
SmartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000029c  00800060  000019ca  00001a5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  008002fc  008002fc  00001cfa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001cfa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001d2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f8  00000000  00000000  00001d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004acc  00000000  00000000  00002160  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001302  00000000  00000000  00006c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000028ef  00000000  00000000  00007f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008ec  00000000  00000000  0000a820  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f99  00000000  00000000  0000b10c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002938  00000000  00000000  0000c0a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000330  00000000  00000000  0000e9dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 7d 0b 	jmp	0x16fa	; 0x16fa <__vector_1>
       8:	0c 94 a6 0b 	jmp	0x174c	; 0x174c <__vector_2>
       c:	0c 94 cf 0b 	jmp	0x179e	; 0x179e <__vector_3>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 6a 0c 	jmp	0x18d4	; 0x18d4 <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	60 01       	movw	r12, r0
      56:	64 01       	movw	r12, r8
      58:	68 01       	movw	r12, r16
      5a:	6c 01       	movw	r12, r24
      5c:	70 01       	movw	r14, r0
      5e:	74 01       	movw	r14, r8
      60:	78 01       	movw	r14, r16
      62:	7c 01       	movw	r14, r24
      64:	80 01       	movw	r16, r0
      66:	84 01       	movw	r16, r8

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf e5       	ldi	r28, 0x5F	; 95
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e6       	ldi	r26, 0x60	; 96
      78:	b0 e0       	ldi	r27, 0x00	; 0
      7a:	ea ec       	ldi	r30, 0xCA	; 202
      7c:	f9 e1       	ldi	r31, 0x19	; 25
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 3f       	cpi	r26, 0xFC	; 252
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	ac ef       	ldi	r26, 0xFC	; 252
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a7 31       	cpi	r26, 0x17	; 23
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 10 02 	call	0x420	; 0x420 <main>
      9e:	0c 94 e3 0c 	jmp	0x19c6	; 0x19c6 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_ISR>:

}

void ADC_ISR(void)
{
	Gloable_u16_Analog_MV = (Gloable_u16_ADC_Reading * 5000UL) /1024 ;
      a6:	20 91 ff 02 	lds	r18, 0x02FF	; 0x8002ff <Gloable_u16_ADC_Reading>
      aa:	30 91 00 03 	lds	r19, 0x0300	; 0x800300 <Gloable_u16_ADC_Reading+0x1>
      ae:	a8 e8       	ldi	r26, 0x88	; 136
      b0:	b3 e1       	ldi	r27, 0x13	; 19
      b2:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__umulhisi3>
      b6:	9b 01       	movw	r18, r22
      b8:	ac 01       	movw	r20, r24
      ba:	01 2e       	mov	r0, r17
      bc:	1a e0       	ldi	r17, 0x0A	; 10
      be:	56 95       	lsr	r21
      c0:	47 95       	ror	r20
      c2:	37 95       	ror	r19
      c4:	27 95       	ror	r18
      c6:	1a 95       	dec	r17
      c8:	d1 f7       	brne	.-12     	; 0xbe <ADC_ISR+0x18>
      ca:	10 2d       	mov	r17, r0
      cc:	30 93 13 03 	sts	0x0313, r19	; 0x800313 <Gloable_u16_Analog_MV+0x1>
      d0:	20 93 12 03 	sts	0x0312, r18	; 0x800312 <Gloable_u16_Analog_MV>
	Gloable_u8_temp = Gloable_u16_Analog_MV / 10 ;
      d4:	ad ec       	ldi	r26, 0xCD	; 205
      d6:	bc ec       	ldi	r27, 0xCC	; 204
      d8:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__umulhisi3>
      dc:	96 95       	lsr	r25
      de:	87 95       	ror	r24
      e0:	96 95       	lsr	r25
      e2:	87 95       	ror	r24
      e4:	96 95       	lsr	r25
      e6:	87 95       	ror	r24
      e8:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <Gloable_u8_temp>
      ec:	08 95       	ret

000000ee <X_ISR>:
	
}

void X_ISR(void)
  {
	  Local_u8_Variable13 = 1;
      ee:	81 e0       	ldi	r24, 0x01	; 1
      f0:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <Local_u8_Variable13>

	  while(Local_u8_Variable6 == 0)
      f4:	04 c0       	rjmp	.+8      	; 0xfe <X_ISR+0x10>
	  {
		  Local_u8_Variable6 = H_KeyPad_Read();
      f6:	0e 94 36 07 	call	0xe6c	; 0xe6c <H_KeyPad_Read>
      fa:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <__data_end>

void X_ISR(void)
  {
	  Local_u8_Variable13 = 1;

	  while(Local_u8_Variable6 == 0)
      fe:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <__data_end>
     102:	88 23       	and	r24, r24
     104:	c1 f3       	breq	.-16     	; 0xf6 <X_ISR+0x8>
	  {
		  Local_u8_Variable6 = H_KeyPad_Read();
	  }

  }
     106:	08 95       	ret

00000108 <LCD_Welcome>:
	
}//end of main
/***********************************************************************************************************************************************/
void LCD_Welcome(void)
{
	H_Lcd_GoTo(0,0);
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	80 e0       	ldi	r24, 0x00	; 0
     10c:	0e 94 68 08 	call	0x10d0	; 0x10d0 <H_Lcd_GoTo>
	H_Lcd_WriteString("Welcome to your"); 
     110:	81 e7       	ldi	r24, 0x71	; 113
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	0e 94 51 08 	call	0x10a2	; 0x10a2 <H_Lcd_WriteString>
	H_Lcd_GoTo(1,0);
     118:	60 e0       	ldi	r22, 0x00	; 0
     11a:	81 e0       	ldi	r24, 0x01	; 1
     11c:	0e 94 68 08 	call	0x10d0	; 0x10d0 <H_Lcd_GoTo>
	H_Lcd_WriteString("home sir");
     120:	81 e9       	ldi	r24, 0x91	; 145
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	0e 94 51 08 	call	0x10a2	; 0x10a2 <H_Lcd_WriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     128:	2f ef       	ldi	r18, 0xFF	; 255
     12a:	89 e6       	ldi	r24, 0x69	; 105
     12c:	98 e1       	ldi	r25, 0x18	; 24
     12e:	21 50       	subi	r18, 0x01	; 1
     130:	80 40       	sbci	r24, 0x00	; 0
     132:	90 40       	sbci	r25, 0x00	; 0
     134:	e1 f7       	brne	.-8      	; 0x12e <LCD_Welcome+0x26>
     136:	00 c0       	rjmp	.+0      	; 0x138 <LCD_Welcome+0x30>
     138:	00 00       	nop
	_delay_ms(500);
	H_Lcd_Clr();
     13a:	0e 94 64 08 	call	0x10c8	; 0x10c8 <H_Lcd_Clr>
     13e:	2f ef       	ldi	r18, 0xFF	; 255
     140:	89 e6       	ldi	r24, 0x69	; 105
     142:	98 e1       	ldi	r25, 0x18	; 24
     144:	21 50       	subi	r18, 0x01	; 1
     146:	80 40       	sbci	r24, 0x00	; 0
     148:	90 40       	sbci	r25, 0x00	; 0
     14a:	e1 f7       	brne	.-8      	; 0x144 <LCD_Welcome+0x3c>
     14c:	00 c0       	rjmp	.+0      	; 0x14e <LCD_Welcome+0x46>
     14e:	00 00       	nop
	_delay_ms(500);
	H_Lcd_WriteString("Press 'A' To");
     150:	8b e9       	ldi	r24, 0x9B	; 155
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 51 08 	call	0x10a2	; 0x10a2 <H_Lcd_WriteString>
	H_Lcd_GoTo(1,0);
     158:	60 e0       	ldi	r22, 0x00	; 0
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	0e 94 68 08 	call	0x10d0	; 0x10d0 <H_Lcd_GoTo>
	H_Lcd_WriteString("Proceed");
     160:	89 ea       	ldi	r24, 0xA9	; 169
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	0e 94 51 08 	call	0x10a2	; 0x10a2 <H_Lcd_WriteString>
	/*****************************************************************************/
	UART_TxString("Welcome to your home sir");
     168:	81 e8       	ldi	r24, 0x81	; 129
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
	UART_Tx(13);
     170:	8d e0       	ldi	r24, 0x0D	; 13
     172:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
	UART_TxString(" Press 'A' To");
     176:	8a e9       	ldi	r24, 0x9A	; 154
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
	UART_Tx(13);
     17e:	8d e0       	ldi	r24, 0x0D	; 13
     180:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
	UART_TxString(" Proceed");
     184:	88 ea       	ldi	r24, 0xA8	; 168
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
	UART_Tx(13);	
     18c:	8d e0       	ldi	r24, 0x0D	; 13
     18e:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
     192:	08 95       	ret

00000194 <Door_Control>:
}

 void Door_Control(void)
 {
	 M_Dio_PinMode(PD7,OUTPUT);
     194:	61 e0       	ldi	r22, 0x01	; 1
     196:	8f e2       	ldi	r24, 0x2F	; 47
     198:	0e 94 64 09 	call	0x12c8	; 0x12c8 <M_Dio_PinMode>
	 u8 Local_u8_reading = 0 ;
	 UART_Tx(NEXTLINE);
     19c:	8d e0       	ldi	r24, 0x0D	; 13
     19e:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
	 UART_TxString(" 1-Door Open");
     1a2:	81 eb       	ldi	r24, 0xB1	; 177
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
	 UART_Tx(NEXTLINE);
     1aa:	8d e0       	ldi	r24, 0x0D	; 13
     1ac:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
	 UART_TxString(" 2-Door Close");
     1b0:	8e eb       	ldi	r24, 0xBE	; 190
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
	 Local_u8_reading = HC05_Rx() ;
     1b8:	0e 94 bf 06 	call	0xd7e	; 0xd7e <HC05_Rx>
	 if (Local_u8_reading == '1')
     1bc:	81 33       	cpi	r24, 0x31	; 49
     1be:	b1 f4       	brne	.+44     	; 0x1ec <Door_Control+0x58>
	 {
		 M_Dio_PinWrite(PD7,HIGH);
     1c0:	61 e0       	ldi	r22, 0x01	; 1
     1c2:	8f e2       	ldi	r24, 0x2F	; 47
     1c4:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
     1c8:	8f e3       	ldi	r24, 0x3F	; 63
     1ca:	9f e1       	ldi	r25, 0x1F	; 31
     1cc:	01 97       	sbiw	r24, 0x01	; 1
     1ce:	f1 f7       	brne	.-4      	; 0x1cc <Door_Control+0x38>
     1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <Door_Control+0x3e>
     1d2:	00 00       	nop
		 _delay_ms(2);
		 M_Dio_PinWrite(PD7,LOW);
     1d4:	62 e0       	ldi	r22, 0x02	; 2
     1d6:	8f e2       	ldi	r24, 0x2F	; 47
     1d8:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
	     UART_Tx(13);
     1dc:	8d e0       	ldi	r24, 0x0D	; 13
     1de:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
		 UART_TxString("DONE");
     1e2:	8e ec       	ldi	r24, 0xCE	; 206
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
     1ea:	08 95       	ret

		 
	 }
	 else if(Local_u8_reading == '2')
     1ec:	82 33       	cpi	r24, 0x32	; 50
     1ee:	c1 f4       	brne	.+48     	; 0x220 <Door_Control+0x8c>
	 {
		 M_Dio_PinWrite(PD7,HIGH);
     1f0:	61 e0       	ldi	r22, 0x01	; 1
     1f2:	8f e2       	ldi	r24, 0x2F	; 47
     1f4:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
     1f8:	8f e6       	ldi	r24, 0x6F	; 111
     1fa:	97 e1       	ldi	r25, 0x17	; 23
     1fc:	01 97       	sbiw	r24, 0x01	; 1
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <Door_Control+0x68>
     200:	00 c0       	rjmp	.+0      	; 0x202 <Door_Control+0x6e>
     202:	00 00       	nop
		 _delay_ms(1.5);
		 M_Dio_PinWrite(PD7,LOW);
     204:	62 e0       	ldi	r22, 0x02	; 2
     206:	8f e2       	ldi	r24, 0x2F	; 47
     208:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
	     UART_Tx(NEXTLINE);
     20c:	8d e0       	ldi	r24, 0x0D	; 13
     20e:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
		 UART_TxString("  DONE");
     212:	8c ec       	ldi	r24, 0xCC	; 204
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
		 UART_Tx(NEXTLINE);
     21a:	8d e0       	ldi	r24, 0x0D	; 13
     21c:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
     220:	08 95       	ret

00000222 <Light_Control>:


 void Light_Control(void)
 {
	u8 Local_u8_reading = 0 ;
    UART_Tx(NEXTLINE);
     222:	8d e0       	ldi	r24, 0x0D	; 13
     224:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
	UART_TxString(" 1-Lights ON");
     228:	83 ed       	ldi	r24, 0xD3	; 211
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
	UART_Tx(NEXTLINE);
     230:	8d e0       	ldi	r24, 0x0D	; 13
     232:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
	UART_TxString(" 2-Lights OFF");
     236:	80 ee       	ldi	r24, 0xE0	; 224
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
	UART_Tx(NEXTLINE);
     23e:	8d e0       	ldi	r24, 0x0D	; 13
     240:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>

	Local_u8_reading = HC05_Rx() ;
     244:	0e 94 bf 06 	call	0xd7e	; 0xd7e <HC05_Rx>
	if (Local_u8_reading == '1')
     248:	81 33       	cpi	r24, 0x31	; 49
     24a:	81 f4       	brne	.+32     	; 0x26c <Light_Control+0x4a>
	{
		H_Led_On(LED0);
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	0e 94 a6 08 	call	0x114c	; 0x114c <H_Led_On>
		H_Led_On(LED1);
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	0e 94 a6 08 	call	0x114c	; 0x114c <H_Led_On>
		H_Led_On(LED2);
     258:	82 e0       	ldi	r24, 0x02	; 2
     25a:	0e 94 a6 08 	call	0x114c	; 0x114c <H_Led_On>
		H_Led_On(LED3);
     25e:	83 e0       	ldi	r24, 0x03	; 3
     260:	0e 94 a6 08 	call	0x114c	; 0x114c <H_Led_On>
		H_Led_On(LED4);
     264:	84 e0       	ldi	r24, 0x04	; 4
     266:	0e 94 a6 08 	call	0x114c	; 0x114c <H_Led_On>
     26a:	08 95       	ret
	}
	else if (Local_u8_reading == '2')
     26c:	82 33       	cpi	r24, 0x32	; 50
     26e:	79 f4       	brne	.+30     	; 0x28e <Light_Control+0x6c>
	{
		H_Led_Off(LED0);
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	0e 94 cc 08 	call	0x1198	; 0x1198 <H_Led_Off>
		H_Led_Off(LED1);
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	0e 94 cc 08 	call	0x1198	; 0x1198 <H_Led_Off>
		H_Led_Off(LED2);
     27c:	82 e0       	ldi	r24, 0x02	; 2
     27e:	0e 94 cc 08 	call	0x1198	; 0x1198 <H_Led_Off>
		H_Led_Off(LED3);
     282:	83 e0       	ldi	r24, 0x03	; 3
     284:	0e 94 cc 08 	call	0x1198	; 0x1198 <H_Led_Off>
		H_Led_Off(LED4);
     288:	84 e0       	ldi	r24, 0x04	; 4
     28a:	0e 94 cc 08 	call	0x1198	; 0x1198 <H_Led_Off>
     28e:	08 95       	ret

00000290 <Dim_Light_Control>:
 
 
  void Dim_Light_Control(void)
  {
	  u8 Local_u8_reading = 0 ;
	  UART_Tx(NEXTLINE);
     290:	8d e0       	ldi	r24, 0x0D	; 13
     292:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
	  UART_TxString(" Enter intensity from 0:9");
     296:	8e ee       	ldi	r24, 0xEE	; 238
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
	  UART_Tx(NEXTLINE);
     29e:	8d e0       	ldi	r24, 0x0D	; 13
     2a0:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
	  Local_u8_reading = HC05_Rx() ;
     2a4:	0e 94 bf 06 	call	0xd7e	; 0xd7e <HC05_Rx>
	  if (Local_u8_reading != 0)
     2a8:	88 23       	and	r24, r24
     2aa:	89 f1       	breq	.+98     	; 0x30e <Dim_Light_Control+0x7e>
	  {
		  switch(Local_u8_reading)
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	fc 01       	movw	r30, r24
     2b0:	f0 97       	sbiw	r30, 0x30	; 48
     2b2:	ea 30       	cpi	r30, 0x0A	; 10
     2b4:	f1 05       	cpc	r31, r1
     2b6:	58 f5       	brcc	.+86     	; 0x30e <Dim_Light_Control+0x7e>
     2b8:	e6 5d       	subi	r30, 0xD6	; 214
     2ba:	ff 4f       	sbci	r31, 0xFF	; 255
     2bc:	0c 94 ce 0c 	jmp	0x199c	; 0x199c <__tablejump2__>
		  {
			  case 48: TIMER0_SetCompVal(2);       break;
     2c0:	82 e0       	ldi	r24, 0x02	; 2
     2c2:	0e 94 0f 0c 	call	0x181e	; 0x181e <TIMER0_SetCompVal>
     2c6:	08 95       	ret
			  case 49: TIMER0_SetCompVal(25);      break;
     2c8:	89 e1       	ldi	r24, 0x19	; 25
     2ca:	0e 94 0f 0c 	call	0x181e	; 0x181e <TIMER0_SetCompVal>
     2ce:	08 95       	ret
			  case 50: TIMER0_SetCompVal(50);      break;
     2d0:	82 e3       	ldi	r24, 0x32	; 50
     2d2:	0e 94 0f 0c 	call	0x181e	; 0x181e <TIMER0_SetCompVal>
     2d6:	08 95       	ret
			  case 51: TIMER0_SetCompVal(75);      break;
     2d8:	8b e4       	ldi	r24, 0x4B	; 75
     2da:	0e 94 0f 0c 	call	0x181e	; 0x181e <TIMER0_SetCompVal>
     2de:	08 95       	ret
			  case 52: TIMER0_SetCompVal(100);     break;
     2e0:	84 e6       	ldi	r24, 0x64	; 100
     2e2:	0e 94 0f 0c 	call	0x181e	; 0x181e <TIMER0_SetCompVal>
     2e6:	08 95       	ret
			  case 53: TIMER0_SetCompVal(125);     break;
     2e8:	8d e7       	ldi	r24, 0x7D	; 125
     2ea:	0e 94 0f 0c 	call	0x181e	; 0x181e <TIMER0_SetCompVal>
     2ee:	08 95       	ret
			  case 54: TIMER0_SetCompVal(150);     break;
     2f0:	86 e9       	ldi	r24, 0x96	; 150
     2f2:	0e 94 0f 0c 	call	0x181e	; 0x181e <TIMER0_SetCompVal>
     2f6:	08 95       	ret
			  case 55: TIMER0_SetCompVal(175);     break;
     2f8:	8f ea       	ldi	r24, 0xAF	; 175
     2fa:	0e 94 0f 0c 	call	0x181e	; 0x181e <TIMER0_SetCompVal>
     2fe:	08 95       	ret
			  case 56: TIMER0_SetCompVal(200);     break;
     300:	88 ec       	ldi	r24, 0xC8	; 200
     302:	0e 94 0f 0c 	call	0x181e	; 0x181e <TIMER0_SetCompVal>
     306:	08 95       	ret
			  case 57: TIMER0_SetCompVal(250);     break;
     308:	8a ef       	ldi	r24, 0xFA	; 250
     30a:	0e 94 0f 0c 	call	0x181e	; 0x181e <TIMER0_SetCompVal>
     30e:	08 95       	ret

00000310 <AirCond_control>:


void AirCond_control(void)
{
	u8 Local_u8_erorr ;
	Local_u8_erorr = M_ADC_StartConversionAsynch(0, &Gloable_u16_ADC_Reading,ADC_ISR);
     310:	43 e5       	ldi	r20, 0x53	; 83
     312:	50 e0       	ldi	r21, 0x00	; 0
     314:	6f ef       	ldi	r22, 0xFF	; 255
     316:	72 e0       	ldi	r23, 0x02	; 2
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	0e 94 05 09 	call	0x120a	; 0x120a <M_ADC_StartConversionAsynch>
     31e:	08 95       	ret

00000320 <TimerISR>:
}


void TimerISR(void)
{
	AirCond_control();
     320:	0e 94 88 01 	call	0x310	; 0x310 <AirCond_control>
	if(Gloable_u8_AC_Flag == 1)
     324:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <Gloable_u8_AC_Flag>
     328:	81 30       	cpi	r24, 0x01	; 1
     32a:	61 f4       	brne	.+24     	; 0x344 <TimerISR+0x24>
	{
	if(Gloable_u8_temp > 27)
     32c:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <Gloable_u8_temp>
     330:	8c 31       	cpi	r24, 0x1C	; 28
     332:	18 f0       	brcs	.+6      	; 0x33a <TimerISR+0x1a>
	{
		H_H_Bridge_CH1_EN();
     334:	0e 94 db 06 	call	0xdb6	; 0xdb6 <H_H_Bridge_CH1_EN>
     338:	08 95       	ret
	}
	else if  (Gloable_u8_temp < 21)
     33a:	85 31       	cpi	r24, 0x15	; 21
     33c:	28 f4       	brcc	.+10     	; 0x348 <TimerISR+0x28>
	{
		H_H_Bridge_CH1_Break();
     33e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <H_H_Bridge_CH1_Break>
     342:	08 95       	ret
		// do nothing
	}
	}
	else
	{
		H_H_Bridge_CH1_Break();
     344:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <H_H_Bridge_CH1_Break>
     348:	08 95       	ret

0000034a <AirCond_EN>:
	}
}

void AirCond_EN(void)
{
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
	u8 Local_u8_Number=0;
	u8 Local_u8_Number1=0;
    u8 Local_u8_reading ;
	UART_TxString("LOADING.....");
     34e:	88 e0       	ldi	r24, 0x08	; 8
     350:	91 e0       	ldi	r25, 0x01	; 1
     352:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
	while(Gloable_u8_temp == 0); //wait until adc take reading
     356:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <Gloable_u8_temp>
     35a:	88 23       	and	r24, r24
     35c:	e1 f3       	breq	.-8      	; 0x356 <AirCond_EN+0xc>
     35e:	2f ef       	ldi	r18, 0xFF	; 255
     360:	80 e7       	ldi	r24, 0x70	; 112
     362:	92 e0       	ldi	r25, 0x02	; 2
     364:	21 50       	subi	r18, 0x01	; 1
     366:	80 40       	sbci	r24, 0x00	; 0
     368:	90 40       	sbci	r25, 0x00	; 0
     36a:	e1 f7       	brne	.-8      	; 0x364 <AirCond_EN+0x1a>
     36c:	00 c0       	rjmp	.+0      	; 0x36e <AirCond_EN+0x24>
     36e:	00 00       	nop
	_delay_ms(50);
	Local_u8_Number = (Gloable_u8_temp/10)+48 ;
     370:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <Gloable_u8_temp>
     374:	9d ec       	ldi	r25, 0xCD	; 205
     376:	89 9f       	mul	r24, r25
     378:	91 2d       	mov	r25, r1
     37a:	11 24       	eor	r1, r1
     37c:	96 95       	lsr	r25
     37e:	96 95       	lsr	r25
     380:	96 95       	lsr	r25
     382:	d0 e3       	ldi	r29, 0x30	; 48
     384:	d9 0f       	add	r29, r25
	Local_u8_Number1=  (Gloable_u8_temp%10)+48 ;
     386:	99 0f       	add	r25, r25
     388:	29 2f       	mov	r18, r25
     38a:	22 0f       	add	r18, r18
     38c:	22 0f       	add	r18, r18
     38e:	92 0f       	add	r25, r18
     390:	89 1b       	sub	r24, r25
     392:	c0 e3       	ldi	r28, 0x30	; 48
     394:	c8 0f       	add	r28, r24
    UART_Tx(13);
     396:	8d e0       	ldi	r24, 0x0D	; 13
     398:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
     39c:	2f ef       	ldi	r18, 0xFF	; 255
     39e:	80 e7       	ldi	r24, 0x70	; 112
     3a0:	92 e0       	ldi	r25, 0x02	; 2
     3a2:	21 50       	subi	r18, 0x01	; 1
     3a4:	80 40       	sbci	r24, 0x00	; 0
     3a6:	90 40       	sbci	r25, 0x00	; 0
     3a8:	e1 f7       	brne	.-8      	; 0x3a2 <AirCond_EN+0x58>
     3aa:	00 c0       	rjmp	.+0      	; 0x3ac <AirCond_EN+0x62>
     3ac:	00 00       	nop
	_delay_ms(50);
	UART_TxString(" Current temperature is : ");
     3ae:	85 e1       	ldi	r24, 0x15	; 21
     3b0:	91 e0       	ldi	r25, 0x01	; 1
     3b2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
     3b6:	2f ef       	ldi	r18, 0xFF	; 255
     3b8:	80 e7       	ldi	r24, 0x70	; 112
     3ba:	92 e0       	ldi	r25, 0x02	; 2
     3bc:	21 50       	subi	r18, 0x01	; 1
     3be:	80 40       	sbci	r24, 0x00	; 0
     3c0:	90 40       	sbci	r25, 0x00	; 0
     3c2:	e1 f7       	brne	.-8      	; 0x3bc <AirCond_EN+0x72>
     3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <AirCond_EN+0x7c>
     3c6:	00 00       	nop
		_delay_ms(50);
	UART_Tx(Local_u8_Number);
     3c8:	8d 2f       	mov	r24, r29
     3ca:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
     3ce:	2f ef       	ldi	r18, 0xFF	; 255
     3d0:	80 e7       	ldi	r24, 0x70	; 112
     3d2:	92 e0       	ldi	r25, 0x02	; 2
     3d4:	21 50       	subi	r18, 0x01	; 1
     3d6:	80 40       	sbci	r24, 0x00	; 0
     3d8:	90 40       	sbci	r25, 0x00	; 0
     3da:	e1 f7       	brne	.-8      	; 0x3d4 <AirCond_EN+0x8a>
     3dc:	00 c0       	rjmp	.+0      	; 0x3de <AirCond_EN+0x94>
     3de:	00 00       	nop
		_delay_ms(50);
	UART_Tx(Local_u8_Number1); 
     3e0:	8c 2f       	mov	r24, r28
     3e2:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
    UART_Tx(13);
     3e6:	8d e0       	ldi	r24, 0x0D	; 13
     3e8:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
	UART_TxString("   1-AC Enable");
     3ec:	80 e3       	ldi	r24, 0x30	; 48
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
    UART_Tx(13);
     3f4:	8d e0       	ldi	r24, 0x0D	; 13
     3f6:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
	UART_TxString(" 2-AC Disable");
     3fa:	8f e3       	ldi	r24, 0x3F	; 63
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
	Local_u8_reading = HC05_Rx() ;
     402:	0e 94 bf 06 	call	0xd7e	; 0xd7e <HC05_Rx>
	if (Local_u8_reading == '1')
     406:	81 33       	cpi	r24, 0x31	; 49
     408:	21 f4       	brne	.+8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
	{
		Gloable_u8_AC_Flag = 1 ;
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <Gloable_u8_AC_Flag>
     410:	04 c0       	rjmp	.+8      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
	}
	else if (Local_u8_reading == '2')
     412:	82 33       	cpi	r24, 0x32	; 50
     414:	11 f4       	brne	.+4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
	{
		Gloable_u8_AC_Flag = 0 ;
     416:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <Gloable_u8_AC_Flag>
		//DO Nothing
	}
	
	
	
}
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	08 95       	ret

00000420 <main>:
u8  Local_u8_Variable13 ;

/**************************************************************************************************************************************************/

int main(void)
{
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	cd b7       	in	r28, 0x3d	; 61
     426:	de b7       	in	r29, 0x3e	; 62
     428:	a8 97       	sbiw	r28, 0x28	; 40
     42a:	0f b6       	in	r0, 0x3f	; 63
     42c:	f8 94       	cli
     42e:	de bf       	out	0x3e, r29	; 62
     430:	0f be       	out	0x3f, r0	; 63
     432:	cd bf       	out	0x3d, r28	; 61
	
	/*****************************************************INITS***********************************************************/
	//H_KeyPad_Init();
	H_Lcd_Init();
     434:	0e 94 15 08 	call	0x102a	; 0x102a <H_Lcd_Init>
	H_Buzzer_Init();
     438:	0e 94 88 06 	call	0xd10	; 0xd10 <H_Buzzer_Init>
	HC05_Init();
     43c:	0e 94 bc 06 	call	0xd78	; 0xd78 <HC05_Init>
	H_H_Bridge_Init();
     440:	0e 94 c2 06 	call	0xd84	; 0xd84 <H_H_Bridge_Init>
	M_ADC_INIT();
     444:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <M_ADC_INIT>
	H_H_Bridge_Init();
     448:	0e 94 c2 06 	call	0xd84	; 0xd84 <H_H_Bridge_Init>
	TIMER1_Init();
     44c:	0e 94 4c 0c 	call	0x1898	; 0x1898 <TIMER1_Init>
	M_Timer1_CallBackFn(TimerISR);
     450:	80 e9       	ldi	r24, 0x90	; 144
     452:	91 e0       	ldi	r25, 0x01	; 1
     454:	0e 94 65 0c 	call	0x18ca	; 0x18ca <M_Timer1_CallBackFn>
	TIMER0_Init();
     458:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <TIMER0_Init>
	TIMER0_SetCompVal(2);
     45c:	82 e0       	ldi	r24, 0x02	; 2
     45e:	0e 94 0f 0c 	call	0x181e	; 0x181e <TIMER0_SetCompVal>
	M_EXTI_Init();
     462:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <M_EXTI_Init>
	M_Dio_PinMode(PB3,OUTPUT);
     466:	61 e0       	ldi	r22, 0x01	; 1
     468:	87 e1       	ldi	r24, 0x17	; 23
     46a:	0e 94 64 09 	call	0x12c8	; 0x12c8 <M_Dio_PinMode>
	M_GIE_EnableGlobal();
     46e:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <M_GIE_EnableGlobal>
	H_Led_Init(LED0);
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	0e 94 80 08 	call	0x1100	; 0x1100 <H_Led_Init>
	H_Led_Init(LED1);
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	0e 94 80 08 	call	0x1100	; 0x1100 <H_Led_Init>
	H_Led_Init(LED2);
     47e:	82 e0       	ldi	r24, 0x02	; 2
     480:	0e 94 80 08 	call	0x1100	; 0x1100 <H_Led_Init>
	H_Led_Init(LED3);
     484:	83 e0       	ldi	r24, 0x03	; 3
     486:	0e 94 80 08 	call	0x1100	; 0x1100 <H_Led_Init>
	H_Led_Init(LED4);
     48a:	84 e0       	ldi	r24, 0x04	; 4
     48c:	0e 94 80 08 	call	0x1100	; 0x1100 <H_Led_Init>
	H_KeyPad_Init();
     490:	0e 94 f5 06 	call	0xdea	; 0xdea <H_KeyPad_Init>
    M_EXTI_CallBack(INT0,X_ISR);
     494:	67 e7       	ldi	r22, 0x77	; 119
     496:	70 e0       	ldi	r23, 0x00	; 0
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	0e 94 6f 0b 	call	0x16de	; 0x16de <M_EXTI_CallBack>

	/*************************************************LOCAL_VARIABLES*******************************************************/
	u8 Local_u8_ID = TAKE_ID;
	u8 Local_u8_AdminID = 0;
	u8 Local_u8_AdminCounter = 0;
	u8 Local_u8_IDAndPass[40] = {0};
     49e:	fe 01       	movw	r30, r28
     4a0:	31 96       	adiw	r30, 0x01	; 1
     4a2:	88 e2       	ldi	r24, 0x28	; 40
     4a4:	df 01       	movw	r26, r30
     4a6:	1d 92       	st	X+, r1
     4a8:	8a 95       	dec	r24
     4aa:	e9 f7       	brne	.-6      	; 0x4a6 <main+0x86>
																   HC-05  --> ADMIN_MODE
																   KEYPAD --> USER_MODE
																	
																						*/
																	
	LCD_Welcome();
     4ac:	0e 94 84 00 	call	0x108	; 0x108 <LCD_Welcome>
	u8 Local_u8_EEPROMCount = 0;
	u8 Local_u8_Variable1 =0;
	u8 Local_u8_Variable2 =0;
	u8 Local_u8_Variable3 =0;
	u8 Local_u8_Variable4 =0;
	u8 Local_u8_Variable5 =0;
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	04 c0       	rjmp	.+8      	; 0x4bc <main+0x9c>
	while(WATING_FOR_A)
	{ 
	 
		while (Local_u8_Variable13 == 0)
		{
					Local_u8_Variable5 = HC05_Rx();
     4b4:	0e 94 bf 06 	call	0xd7e	; 0xd7e <HC05_Rx>
					if(Local_u8_Variable5 != 0)
     4b8:	81 11       	cpse	r24, r1
     4ba:	04 c0       	rjmp	.+8      	; 0x4c4 <main+0xa4>
																	
	LCD_Welcome();
	while(WATING_FOR_A)
	{ 
	 
		while (Local_u8_Variable13 == 0)
     4bc:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <Local_u8_Variable13>
     4c0:	99 23       	and	r25, r25
     4c2:	c1 f3       	breq	.-16     	; 0x4b4 <main+0x94>

		}
	
		

		if(Local_u8_Variable5 == 'A' || Local_u8_Variable5 == 'a')
     4c4:	81 34       	cpi	r24, 0x41	; 65
     4c6:	59 f0       	breq	.+22     	; 0x4de <main+0xbe>
     4c8:	81 36       	cpi	r24, 0x61	; 97
     4ca:	71 f0       	breq	.+28     	; 0x4e8 <main+0xc8>
		{
			Local_u8_Mode = ADMIN_MODE; 
			break;
		}
		else if(Local_u8_Variable6 == 'A')
     4cc:	90 91 fc 02 	lds	r25, 0x02FC	; 0x8002fc <__data_end>
     4d0:	91 34       	cpi	r25, 0x41	; 65
     4d2:	a1 f7       	brne	.-24     	; 0x4bc <main+0x9c>
		{
			Local_u8_Mode = USER_MODE;
     4d4:	0f 2e       	mov	r0, r31
     4d6:	f5 e1       	ldi	r31, 0x15	; 21
     4d8:	ff 2e       	mov	r15, r31
     4da:	f0 2d       	mov	r31, r0
     4dc:	09 c0       	rjmp	.+18     	; 0x4f0 <main+0xd0>
	
		

		if(Local_u8_Variable5 == 'A' || Local_u8_Variable5 == 'a')
		{
			Local_u8_Mode = ADMIN_MODE; 
     4de:	0f 2e       	mov	r0, r31
     4e0:	f4 e1       	ldi	r31, 0x14	; 20
     4e2:	ff 2e       	mov	r15, r31
     4e4:	f0 2d       	mov	r31, r0
     4e6:	04 c0       	rjmp	.+8      	; 0x4f0 <main+0xd0>
     4e8:	0f 2e       	mov	r0, r31
     4ea:	f4 e1       	ldi	r31, 0x14	; 20
     4ec:	ff 2e       	mov	r15, r31
     4ee:	f0 2d       	mov	r31, r0
	/***************************************************************REGISTER_ADMIN************************************************************/

														/*SUPPOSED TO WORK THE FIRST TIME ONLY*/
	
	
	Local_u8_EEPROM = EEPROMINT_ReadByte(FIRST_BYTE); // IF EMPTY --> THERE'S NO ADMIN JUST YET
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	0e 94 ab 06 	call	0xd56	; 0xd56 <EEPROMINT_ReadByte>
     4f8:	08 2f       	mov	r16, r24
	
	if(Local_u8_EEPROM == EMPTY)
     4fa:	8f 3f       	cpi	r24, 0xFF	; 255
     4fc:	09 f0       	breq	.+2      	; 0x500 <main+0xe0>
     4fe:	a0 c0       	rjmp	.+320    	; 0x640 <main+0x220>
	{
		
																		/*ID*/
																		
		UART_TxString(" The First time you need to create an admin");
     500:	8d e4       	ldi	r24, 0x4D	; 77
     502:	91 e0       	ldi	r25, 0x01	; 1
     504:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
     508:	bf ef       	ldi	r27, 0xFF	; 255
     50a:	2e e9       	ldi	r18, 0x9E	; 158
     50c:	84 e2       	ldi	r24, 0x24	; 36
     50e:	b1 50       	subi	r27, 0x01	; 1
     510:	20 40       	sbci	r18, 0x00	; 0
     512:	80 40       	sbci	r24, 0x00	; 0
     514:	e1 f7       	brne	.-8      	; 0x50e <main+0xee>
     516:	00 c0       	rjmp	.+0      	; 0x518 <main+0xf8>
     518:	00 00       	nop
		_delay_ms(DISPLAY_TIME);
		UART_Tx(NEXTLINE);
     51a:	8d e0       	ldi	r24, 0x0D	; 13
     51c:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
		UART_TxString(" Enter Name: ");
     520:	89 e7       	ldi	r24, 0x79	; 121
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
		UART_Tx(NEXTLINE);
     528:	8d e0       	ldi	r24, 0x0D	; 13
     52a:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
    M_EXTI_CallBack(INT0,X_ISR);

	/*************************************************LOCAL_VARIABLES*******************************************************/
	u8 Local_u8_ID = TAKE_ID;
	u8 Local_u8_AdminID = 0;
	u8 Local_u8_AdminCounter = 0;
     52e:	10 e0       	ldi	r17, 0x00	; 0
		UART_TxString(" The First time you need to create an admin");
		_delay_ms(DISPLAY_TIME);
		UART_Tx(NEXTLINE);
		UART_TxString(" Enter Name: ");
		UART_Tx(NEXTLINE);
		while(Local_u8_Admin == NO_ADMIN)
     530:	2c c0       	rjmp	.+88     	; 0x58a <main+0x16a>
		{
			Local_u8_Variable3 = HC05_Rx();
     532:	0e 94 bf 06 	call	0xd7e	; 0xd7e <HC05_Rx>
			
			if((Local_u8_Variable3 == ENTER) && (Local_u8_Error == ERROR)) //IF ENTER IS PRESSED ON A BLANK SCREEN
     536:	8d 30       	cpi	r24, 0x0D	; 13
     538:	e1 f4       	brne	.+56     	; 0x572 <main+0x152>
     53a:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <Local_u8_Error>
     53e:	91 11       	cpse	r25, r1
     540:	18 c0       	rjmp	.+48     	; 0x572 <main+0x152>
			{
				UART_TxString(" Error please try again");
     542:	87 e8       	ldi	r24, 0x87	; 135
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
     54a:	9f ef       	ldi	r25, 0xFF	; 255
     54c:	ae e9       	ldi	r26, 0x9E	; 158
     54e:	b4 e2       	ldi	r27, 0x24	; 36
     550:	91 50       	subi	r25, 0x01	; 1
     552:	a0 40       	sbci	r26, 0x00	; 0
     554:	b0 40       	sbci	r27, 0x00	; 0
     556:	e1 f7       	brne	.-8      	; 0x550 <main+0x130>
     558:	00 c0       	rjmp	.+0      	; 0x55a <main+0x13a>
     55a:	00 00       	nop
				_delay_ms(DISPLAY_TIME);
				UART_Tx(NEXTLINE);
     55c:	8d e0       	ldi	r24, 0x0D	; 13
     55e:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
				UART_TxString(" Enter Name: ");
     562:	89 e7       	ldi	r24, 0x79	; 121
     564:	91 e0       	ldi	r25, 0x01	; 1
     566:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
				UART_Tx(NEXTLINE);
     56a:	8d e0       	ldi	r24, 0x0D	; 13
     56c:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
     570:	0c c0       	rjmp	.+24     	; 0x58a <main+0x16a>
			}
			else if (Local_u8_Variable3 == ENTER)
     572:	8d 30       	cpi	r24, 0x0D	; 13
     574:	71 f0       	breq	.+28     	; 0x592 <main+0x172>
			{
				break; //STOP TAKING ID
			}
			else if(Local_u8_Variable3 != ENTER)
     576:	49 f0       	breq	.+18     	; 0x58a <main+0x16a>
			{
				Local_u8_Error = NO_ERROR; //THE SCREEN IS NOT BLANK ANYMORE
     578:	91 e0       	ldi	r25, 0x01	; 1
     57a:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <Local_u8_Error>
				Local_u8_AdminID = Local_u8_Variable3;
				//_delay_ms(10);
				EEPROMINT_WriteByte(Local_u8_AdminCounter,Local_u8_AdminID);
     57e:	68 2f       	mov	r22, r24
     580:	81 2f       	mov	r24, r17
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	0e 94 92 06 	call	0xd24	; 0xd24 <EEPROMINT_WriteByte>
				Local_u8_AdminCounter++;
     588:	1f 5f       	subi	r17, 0xFF	; 255
		UART_TxString(" The First time you need to create an admin");
		_delay_ms(DISPLAY_TIME);
		UART_Tx(NEXTLINE);
		UART_TxString(" Enter Name: ");
		UART_Tx(NEXTLINE);
		while(Local_u8_Admin == NO_ADMIN)
     58a:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <Local_u8_Admin>
     58e:	88 23       	and	r24, r24
     590:	81 f2       	breq	.-96     	; 0x532 <main+0x112>
				//Do Nothing
			}
		}
		
		
		Local_u8_Error = ERROR; //SETTING IT BACK TO MAKE ANOTHER CHECK ON ANOTHER ITERATION
     592:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <Local_u8_Error>
		UART_Tx(NEXTLINE);
     596:	8d e0       	ldi	r24, 0x0D	; 13
     598:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
     59c:	2f ef       	ldi	r18, 0xFF	; 255
     59e:	8e e9       	ldi	r24, 0x9E	; 158
     5a0:	94 e2       	ldi	r25, 0x24	; 36
     5a2:	21 50       	subi	r18, 0x01	; 1
     5a4:	80 40       	sbci	r24, 0x00	; 0
     5a6:	90 40       	sbci	r25, 0x00	; 0
     5a8:	e1 f7       	brne	.-8      	; 0x5a2 <main+0x182>
     5aa:	00 c0       	rjmp	.+0      	; 0x5ac <main+0x18c>
     5ac:	00 00       	nop
		_delay_ms(DISPLAY_TIME);

		
		
																	/*PASSWORD*/
		UART_TxString("Now Enter Password: ");
     5ae:	8f e9       	ldi	r24, 0x9F	; 159
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
		UART_Tx(NEXTLINE);
     5b6:	8d e0       	ldi	r24, 0x0D	; 13
     5b8:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
		while(Local_u8_Admin == NO_ADMIN)
     5bc:	3c c0       	rjmp	.+120    	; 0x636 <main+0x216>
		{
			Local_u8_Variable4 = HC05_Rx();
     5be:	0e 94 bf 06 	call	0xd7e	; 0xd7e <HC05_Rx>

			if((Local_u8_Variable4 == ENTER) && (Local_u8_Error == ERROR))
     5c2:	8d 30       	cpi	r24, 0x0D	; 13
     5c4:	e1 f4       	brne	.+56     	; 0x5fe <main+0x1de>
     5c6:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <Local_u8_Error>
     5ca:	91 11       	cpse	r25, r1
     5cc:	18 c0       	rjmp	.+48     	; 0x5fe <main+0x1de>
			{
				UART_TxString("Error please try again");
     5ce:	88 e8       	ldi	r24, 0x88	; 136
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
     5d6:	af ef       	ldi	r26, 0xFF	; 255
     5d8:	be e9       	ldi	r27, 0x9E	; 158
     5da:	24 e2       	ldi	r18, 0x24	; 36
     5dc:	a1 50       	subi	r26, 0x01	; 1
     5de:	b0 40       	sbci	r27, 0x00	; 0
     5e0:	20 40       	sbci	r18, 0x00	; 0
     5e2:	e1 f7       	brne	.-8      	; 0x5dc <main+0x1bc>
     5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <main+0x1c6>
     5e6:	00 00       	nop
				_delay_ms(DISPLAY_TIME);
				UART_Tx(NEXTLINE);
     5e8:	8d e0       	ldi	r24, 0x0D	; 13
     5ea:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
				UART_TxString("Password: ");
     5ee:	89 ea       	ldi	r24, 0xA9	; 169
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
				UART_Tx(NEXTLINE);
     5f6:	8d e0       	ldi	r24, 0x0D	; 13
     5f8:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
     5fc:	1c c0       	rjmp	.+56     	; 0x636 <main+0x216>
			}
			else if(Local_u8_Variable4 != ENTER)
     5fe:	8d 30       	cpi	r24, 0x0D	; 13
     600:	51 f0       	breq	.+20     	; 0x616 <main+0x1f6>
			{
				Local_u8_Error = NO_ERROR;
     602:	91 e0       	ldi	r25, 0x01	; 1
     604:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <Local_u8_Error>
				Local_u8_AdminID = Local_u8_Variable4;
				EEPROMINT_WriteByte(Local_u8_AdminCounter,Local_u8_AdminID);
     608:	68 2f       	mov	r22, r24
     60a:	81 2f       	mov	r24, r17
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	0e 94 92 06 	call	0xd24	; 0xd24 <EEPROMINT_WriteByte>
				Local_u8_AdminCounter++;
     612:	1f 5f       	subi	r17, 0xFF	; 255
     614:	10 c0       	rjmp	.+32     	; 0x636 <main+0x216>
			}
			else if(Local_u8_Variable4 == ENTER)
     616:	8d 30       	cpi	r24, 0x0D	; 13
     618:	71 f4       	brne	.+28     	; 0x636 <main+0x216>
			{
				EEPROMINT_WriteByte(Local_u8_AdminCounter,END_OF_CREDENTIALS);//END OF ID & PASS
     61a:	64 e2       	ldi	r22, 0x24	; 36
     61c:	81 2f       	mov	r24, r17
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	0e 94 92 06 	call	0xd24	; 0xd24 <EEPROMINT_WriteByte>
				Local_u8_AdminCounter++;
     624:	1f 5f       	subi	r17, 0xFF	; 255
				EEPROMINT_WriteByte(LAST_BYTE,Local_u8_AdminCounter);
     626:	61 2f       	mov	r22, r17
     628:	8f ef       	ldi	r24, 0xFF	; 255
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	0e 94 92 06 	call	0xd24	; 0xd24 <EEPROMINT_WriteByte>
				Local_u8_Admin = ADMIN_EXISTS;//EXIT WHILE
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <Local_u8_Admin>
		
		
																	/*PASSWORD*/
		UART_TxString("Now Enter Password: ");
		UART_Tx(NEXTLINE);
		while(Local_u8_Admin == NO_ADMIN)
     636:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <Local_u8_Admin>
     63a:	88 23       	and	r24, r24
     63c:	09 f4       	brne	.+2      	; 0x640 <main+0x220>
     63e:	bf cf       	rjmp	.-130    	; 0x5be <main+0x19e>
				EEPROMINT_WriteByte(LAST_BYTE,Local_u8_AdminCounter);
				Local_u8_Admin = ADMIN_EXISTS;//EXIT WHILE
			}
		}
	}
	Local_u8_Error = NO_ERROR;	
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <Local_u8_Error>
	/***************************************************************LOGIN*******************************************************************/
	 while (STILL_LOGGING_IN)
	 {
		 if(Local_u8_Mode == ADMIN_MODE)
     646:	84 e1       	ldi	r24, 0x14	; 20
     648:	f8 12       	cpse	r15, r24
     64a:	3b c2       	rjmp	.+1142   	; 0xac2 <__stack+0x263>
		 {
			 UART_TxString(" Log In");
     64c:	84 eb       	ldi	r24, 0xB4	; 180
     64e:	91 e0       	ldi	r25, 0x01	; 1
     650:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
			 UART_Tx(NEXTLINE);
     654:	8d e0       	ldi	r24, 0x0D	; 13
     656:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
			 
			 while(Local_u8_EEPROM != END_OF_CREDENTIALS)
     65a:	bc c0       	rjmp	.+376    	; 0x7d4 <main+0x3b4>
			 {
				 
																		/*ENTER ID*/
				 
				 UART_TxString("ID:");
     65c:	8d eb       	ldi	r24, 0xBD	; 189
     65e:	91 e0       	ldi	r25, 0x01	; 1
     660:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
				 while(Local_u8_ID == TAKE_ID)
     664:	10 e0       	ldi	r17, 0x00	; 0
     666:	ff 24       	eor	r15, r15
     668:	f3 94       	inc	r15
     66a:	27 c0       	rjmp	.+78     	; 0x6ba <main+0x29a>
				 {
					 Local_u8_Variable1 = HC05_Rx();
     66c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <HC05_Rx>
					 
					 if( (Local_u8_Variable1 == ENTER) && (Local_u8_Error == ERROR))
     670:	8d 30       	cpi	r24, 0x0D	; 13
     672:	81 f4       	brne	.+32     	; 0x694 <main+0x274>
     674:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <Local_u8_Error>
     678:	91 11       	cpse	r25, r1
     67a:	0c c0       	rjmp	.+24     	; 0x694 <main+0x274>
					 {
						 UART_TxString(" Error please try again");
     67c:	87 e8       	ldi	r24, 0x87	; 135
     67e:	91 e0       	ldi	r25, 0x01	; 1
     680:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
				         UART_Tx(NEXTLINE);
     684:	8d e0       	ldi	r24, 0x0D	; 13
     686:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
						 UART_TxString(" ID:");
     68a:	8c eb       	ldi	r24, 0xBC	; 188
     68c:	91 e0       	ldi	r25, 0x01	; 1
     68e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
     692:	13 c0       	rjmp	.+38     	; 0x6ba <main+0x29a>
					 }
					 else if(Local_u8_Variable1 == ENTER)
     694:	8d 30       	cpi	r24, 0x0D	; 13
     696:	21 f4       	brne	.+8      	; 0x6a0 <main+0x280>
					 {
						 Local_u8_Error = ERROR;
     698:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <Local_u8_Error>
						 Local_u8_ID = STOP_TAKING_ID;//STOP TAKING ID
     69c:	f1 2c       	mov	r15, r1
     69e:	0d c0       	rjmp	.+26     	; 0x6ba <main+0x29a>
					 }
					 else if(Local_u8_Variable1 != ENTER)
     6a0:	8d 30       	cpi	r24, 0x0D	; 13
     6a2:	59 f0       	breq	.+22     	; 0x6ba <main+0x29a>
					 {
						 Local_u8_Error = NO_ERROR;
     6a4:	91 e0       	ldi	r25, 0x01	; 1
     6a6:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <Local_u8_Error>
						 Local_u8_IDAndPass[Local_u8_counter] = Local_u8_Variable1;
     6aa:	e1 e0       	ldi	r30, 0x01	; 1
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	ec 0f       	add	r30, r28
     6b0:	fd 1f       	adc	r31, r29
     6b2:	e1 0f       	add	r30, r17
     6b4:	f1 1d       	adc	r31, r1
     6b6:	80 83       	st	Z, r24
						 Local_u8_counter++;
     6b8:	1f 5f       	subi	r17, 0xFF	; 255
			 {
				 
																		/*ENTER ID*/
				 
				 UART_TxString("ID:");
				 while(Local_u8_ID == TAKE_ID)
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	f9 16       	cp	r15, r25
     6be:	b1 f2       	breq	.-84     	; 0x66c <main+0x24c>
					 }
				 }
				 
																		 /*ENTER PASSWORD*/
																		 
		         UART_Tx(NEXTLINE);
     6c0:	8d e0       	ldi	r24, 0x0D	; 13
     6c2:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
				 UART_TxString(" PASSWORD: ");
     6c6:	81 ec       	ldi	r24, 0xC1	; 193
     6c8:	91 e0       	ldi	r25, 0x01	; 1
     6ca:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
		         UART_Tx(NEXTLINE);
     6ce:	8d e0       	ldi	r24, 0x0D	; 13
     6d0:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
				 
				 while(Local_u8_ID == START_TAKING_PASS)
     6d4:	2b c0       	rjmp	.+86     	; 0x72c <main+0x30c>
				 {
					 Local_u8_Variable2 = HC05_Rx();
     6d6:	0e 94 bf 06 	call	0xd7e	; 0xd7e <HC05_Rx>
					 
					 if((Local_u8_Variable2 == ENTER) && (Local_u8_Error == ERROR))
     6da:	8d 30       	cpi	r24, 0x0D	; 13
     6dc:	99 f4       	brne	.+38     	; 0x704 <main+0x2e4>
     6de:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <Local_u8_Error>
     6e2:	91 11       	cpse	r25, r1
     6e4:	0f c0       	rjmp	.+30     	; 0x704 <main+0x2e4>
					 {
						 UART_TxString(" Error please try again");
     6e6:	87 e8       	ldi	r24, 0x87	; 135
     6e8:	91 e0       	ldi	r25, 0x01	; 1
     6ea:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
		                 UART_Tx(NEXTLINE);
     6ee:	8d e0       	ldi	r24, 0x0D	; 13
     6f0:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
						 UART_TxString(" PASSWORD: ");
     6f4:	81 ec       	ldi	r24, 0xC1	; 193
     6f6:	91 e0       	ldi	r25, 0x01	; 1
     6f8:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
		                 UART_Tx(NEXTLINE);
     6fc:	8d e0       	ldi	r24, 0x0D	; 13
     6fe:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
     702:	14 c0       	rjmp	.+40     	; 0x72c <main+0x30c>
					 }
					 else if(Local_u8_Variable2 == ENTER)
     704:	8d 30       	cpi	r24, 0x0D	; 13
     706:	29 f4       	brne	.+10     	; 0x712 <main+0x2f2>
					 {
						 Local_u8_Error = ERROR;
     708:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <Local_u8_Error>
						 Local_u8_ID = STOP_TAKING_PASS; //Breaks
     70c:	ff 24       	eor	r15, r15
     70e:	f3 94       	inc	r15
     710:	0d c0       	rjmp	.+26     	; 0x72c <main+0x30c>
					 }
					 
					 /*Enter the password you want untill 'ENTER'*/
					 else if(Local_u8_Variable2 != ENTER)
     712:	8d 30       	cpi	r24, 0x0D	; 13
     714:	59 f0       	breq	.+22     	; 0x72c <main+0x30c>
					 {
						 Local_u8_Error = NO_ERROR;
     716:	91 e0       	ldi	r25, 0x01	; 1
     718:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <Local_u8_Error>
						 Local_u8_IDAndPass[Local_u8_counter] = Local_u8_Variable2;
     71c:	e1 e0       	ldi	r30, 0x01	; 1
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	ec 0f       	add	r30, r28
     722:	fd 1f       	adc	r31, r29
     724:	e1 0f       	add	r30, r17
     726:	f1 1d       	adc	r31, r1
     728:	80 83       	st	Z, r24
						 Local_u8_counter++;
     72a:	1f 5f       	subi	r17, 0xFF	; 255
																		 
		         UART_Tx(NEXTLINE);
				 UART_TxString(" PASSWORD: ");
		         UART_Tx(NEXTLINE);
				 
				 while(Local_u8_ID == START_TAKING_PASS)
     72c:	ff 20       	and	r15, r15
     72e:	99 f2       	breq	.-90     	; 0x6d6 <main+0x2b6>
     730:	f1 2c       	mov	r15, r1
     732:	10 e0       	ldi	r17, 0x00	; 0
     734:	47 c0       	rjmp	.+142    	; 0x7c4 <main+0x3a4>
				 {
					 Local_u8_ForLoopcounter = 0;
					 Local_u8_EEPROMCount = FIRST_EEPROM_PLACE; // --> PLACE NOT VALUE!
					 for(Local_u8_ForLoopcounter; Local_u8_ForLoopcounter < sizeof(Local_u8_IDAndPass) ; Local_u8_ForLoopcounter++)
					 {
						 Local_u8_EEPROM = EEPROMINT_ReadByte(Local_u8_EEPROMCount); //Reading EEPROM consecutively
     736:	8f 2d       	mov	r24, r15
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	0e 94 ab 06 	call	0xd56	; 0xd56 <EEPROMINT_ReadByte>
     73e:	08 2f       	mov	r16, r24
						 Local_u8_EEPROMCount++;
     740:	f3 94       	inc	r15
						 if(Local_u8_EEPROM == END_OF_CREDENTIALS)// while can't break before the for in it
     742:	84 32       	cpi	r24, 0x24	; 36
     744:	09 f4       	brne	.+2      	; 0x748 <main+0x328>
     746:	41 c0       	rjmp	.+130    	; 0x7ca <main+0x3aa>
						 {
							 break;
						 }
						 else if(Local_u8_IDAndPass[Local_u8_ForLoopcounter] != Local_u8_EEPROM && Local_u8_Wrong == 10 )
     748:	e1 e0       	ldi	r30, 0x01	; 1
     74a:	f0 e0       	ldi	r31, 0x00	; 0
     74c:	ec 0f       	add	r30, r28
     74e:	fd 1f       	adc	r31, r29
     750:	e1 0f       	add	r30, r17
     752:	f1 1d       	adc	r31, r1
     754:	80 81       	ld	r24, Z
     756:	08 17       	cp	r16, r24
     758:	a1 f1       	breq	.+104    	; 0x7c2 <main+0x3a2>
						 {
		                     UART_Tx(NEXTLINE);
     75a:	8d e0       	ldi	r24, 0x0D	; 13
     75c:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
							 UART_TxString(" Wrong ID/PASS");
     760:	8d ec       	ldi	r24, 0xCD	; 205
     762:	91 e0       	ldi	r25, 0x01	; 1
     764:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
		                     UART_Tx(NEXTLINE);
     768:	8d e0       	ldi	r24, 0x0D	; 13
     76a:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
							 switch(Local_u8_Trials)
     76e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     772:	82 30       	cpi	r24, 0x02	; 2
     774:	69 f0       	breq	.+26     	; 0x790 <main+0x370>
     776:	83 30       	cpi	r24, 0x03	; 3
     778:	19 f0       	breq	.+6      	; 0x780 <main+0x360>
     77a:	81 30       	cpi	r24, 0x01	; 1
     77c:	31 f5       	brne	.+76     	; 0x7ca <main+0x3aa>
     77e:	10 c0       	rjmp	.+32     	; 0x7a0 <main+0x380>
							 {
								 case TWO_TRIALS:
								 UART_TxString(" 2 trials left ");
     780:	8c ed       	ldi	r24, 0xDC	; 220
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
		                         UART_Tx(NEXTLINE);
     788:	8d e0       	ldi	r24, 0x0D	; 13
     78a:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
								 break;
     78e:	1d c0       	rjmp	.+58     	; 0x7ca <main+0x3aa>
								 case ONE_TRIAL:
								 UART_TxString(" 1 trial left ");
     790:	8c ee       	ldi	r24, 0xEC	; 236
     792:	91 e0       	ldi	r25, 0x01	; 1
     794:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
		                         UART_Tx(NEXTLINE);
     798:	8d e0       	ldi	r24, 0x0D	; 13
     79a:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
								 break;
     79e:	15 c0       	rjmp	.+42     	; 0x7ca <main+0x3aa>
								 case ZERO_TRIALS:
		                         UART_Tx(NEXTLINE);
     7a0:	8d e0       	ldi	r24, 0x0D	; 13
     7a2:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
								 UART_TxString(" EMERGENCY");
     7a6:	8b ef       	ldi	r24, 0xFB	; 251
     7a8:	91 e0       	ldi	r25, 0x01	; 1
     7aa:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
		                         UART_Tx(NEXTLINE);
     7ae:	8d e0       	ldi	r24, 0x0D	; 13
     7b0:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
								 UART_TxString(" CALLING 911");
     7b4:	86 e0       	ldi	r24, 0x06	; 6
     7b6:	92 e0       	ldi	r25, 0x02	; 2
     7b8:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
								 while (EMERGENCY)
								 {
									 H_Buzzer_On();
     7bc:	0e 94 8d 06 	call	0xd1a	; 0xd1a <H_Buzzer_On>
     7c0:	fd cf       	rjmp	.-6      	; 0x7bc <main+0x39c>
															
				 for(Local_u8_Trials ; Local_u8_Trials >= NO_TRIALS ; --Local_u8_Trials)
				 {
					 Local_u8_ForLoopcounter = 0;
					 Local_u8_EEPROMCount = FIRST_EEPROM_PLACE; // --> PLACE NOT VALUE!
					 for(Local_u8_ForLoopcounter; Local_u8_ForLoopcounter < sizeof(Local_u8_IDAndPass) ; Local_u8_ForLoopcounter++)
     7c2:	1f 5f       	subi	r17, 0xFF	; 255
     7c4:	18 32       	cpi	r17, 0x28	; 40
     7c6:	08 f4       	brcc	.+2      	; 0x7ca <main+0x3aa>
     7c8:	b6 cf       	rjmp	.-148    	; 0x736 <main+0x316>
							 break; // don't keep searching in the wrong user and pass
						 }
					 }
					 Local_u8_counter = RESET;
					 Local_u8_ID = TAKE_ID; //RESETTING IT TO DEFAULT --> PREPARING TO LOOP AGAIN
					 --Local_u8_Trials;
     7ca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     7ce:	81 50       	subi	r24, 0x01	; 1
     7d0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		 if(Local_u8_Mode == ADMIN_MODE)
		 {
			 UART_TxString(" Log In");
			 UART_Tx(NEXTLINE);
			 
			 while(Local_u8_EEPROM != END_OF_CREDENTIALS)
     7d4:	04 32       	cpi	r16, 0x24	; 36
     7d6:	09 f0       	breq	.+2      	; 0x7da <main+0x3ba>
     7d8:	41 cf       	rjmp	.-382    	; 0x65c <main+0x23c>
					 --Local_u8_Trials;
					 break; //GO DO THE 'while(Local_u8_EEPROM != END_OF_CREDENTIALS)' AGAIN (BREAK FROM THE OUTTER FOR LOOP)
				 }	 
			 }
	/***************************************************************END_OF_LOGIN*******************************************************************/
		     UART_Tx(NEXTLINE);
     7da:	8d e0       	ldi	r24, 0x0D	; 13
     7dc:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
			 UART_TxString(" Successful LOGIN");
     7e0:	83 e1       	ldi	r24, 0x13	; 19
     7e2:	92 e0       	ldi	r25, 0x02	; 2
     7e4:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
		     UART_Tx(NEXTLINE);
     7e8:	8d e0       	ldi	r24, 0x0D	; 13
     7ea:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
	
	/***************************************************************MAIN_MENU*******************************************************************/
			 while(WAITING_FOR_CHOICE)
			 {
				 UART_TxString(" 1-ADD USER");
     7ee:	85 e2       	ldi	r24, 0x25	; 37
     7f0:	92 e0       	ldi	r25, 0x02	; 2
     7f2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
			     UART_Tx(NEXTLINE);
     7f6:	8d e0       	ldi	r24, 0x0D	; 13
     7f8:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
				 UART_TxString(" 2-REMOVE USER");
     7fc:	81 e3       	ldi	r24, 0x31	; 49
     7fe:	92 e0       	ldi	r25, 0x02	; 2
     800:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
		         UART_Tx(NEXTLINE);
     804:	8d e0       	ldi	r24, 0x0D	; 13
     806:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
				 UART_TxString(" 3-MENU");
     80a:	80 e4       	ldi	r24, 0x40	; 64
     80c:	92 e0       	ldi	r25, 0x02	; 2
     80e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
				 
				 
				 Local_u8_AdminCounter = EEPROMINT_ReadByte(LAST_BYTE);//UPDATE THE COUNTER
     812:	8f ef       	ldi	r24, 0xFF	; 255
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	0e 94 ab 06 	call	0xd56	; 0xd56 <EEPROMINT_ReadByte>
     81a:	18 2f       	mov	r17, r24
				 Local_u8_Variable7 = HC05_Rx();
     81c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <HC05_Rx>
				 switch (Local_u8_Variable7)
     820:	82 33       	cpi	r24, 0x32	; 50
     822:	09 f4       	brne	.+2      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     824:	82 c0       	rjmp	.+260    	; 0x92a <__stack+0xcb>
     826:	83 33       	cpi	r24, 0x33	; 51
     828:	09 f4       	brne	.+2      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     82a:	f8 c0       	rjmp	.+496    	; 0xa1c <__stack+0x1bd>
     82c:	81 33       	cpi	r24, 0x31	; 49
     82e:	f9 f6       	brne	.-66     	; 0x7ee <main+0x3ce>
				 {
					 case ADD_USER:
		             UART_Tx(NEXTLINE);
     830:	8d e0       	ldi	r24, 0x0D	; 13
     832:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
					 UART_TxString(" ID: ");
     836:	88 e4       	ldi	r24, 0x48	; 72
     838:	92 e0       	ldi	r25, 0x02	; 2
     83a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
					 while(ADDING_ID)
					 {
						 Local_u8_Variable8 = HC05_Rx();
     83e:	0e 94 bf 06 	call	0xd7e	; 0xd7e <HC05_Rx>
						 
						 if( (Local_u8_Variable8 == ENTER) && (Local_u8_Error == ERROR))
     842:	8d 30       	cpi	r24, 0x0D	; 13
     844:	99 f4       	brne	.+38     	; 0x86c <__stack+0xd>
     846:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <Local_u8_Error>
     84a:	91 11       	cpse	r25, r1
     84c:	0f c0       	rjmp	.+30     	; 0x86c <__stack+0xd>
						 {
							 UART_TxString(" Error please try again");
     84e:	87 e8       	ldi	r24, 0x87	; 135
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
		                     UART_Tx(NEXTLINE);
     856:	8d e0       	ldi	r24, 0x0D	; 13
     858:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
							 UART_TxString(" ID: ");
     85c:	88 e4       	ldi	r24, 0x48	; 72
     85e:	92 e0       	ldi	r25, 0x02	; 2
     860:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
		                     UART_Tx(NEXTLINE);
     864:	8d e0       	ldi	r24, 0x0D	; 13
     866:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
     86a:	e9 cf       	rjmp	.-46     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
						 }
						 
						 else if(Local_u8_Variable8 == ENTER)
     86c:	8d 30       	cpi	r24, 0x0D	; 13
     86e:	a1 f4       	brne	.+40     	; 0x898 <__stack+0x39>
						 {
							 Local_u8_Error = ERROR;
     870:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <Local_u8_Error>
							 EEPROMINT_WriteByte(LAST_BYTE,Local_u8_AdminCounter);//can be removed as counter is saved after password Right?!!
     874:	61 2f       	mov	r22, r17
     876:	8f ef       	ldi	r24, 0xFF	; 255
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	0e 94 92 06 	call	0xd24	; 0xd24 <EEPROMINT_WriteByte>
							 EEPROMINT_WriteByte(Local_u8_AdminCounter,Local_u8_AdminID);
							 Local_u8_AdminCounter++;
						 }
					 }
					 
		             UART_Tx(NEXTLINE);
     87e:	8d e0       	ldi	r24, 0x0D	; 13
     880:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
					 UART_TxString(" PASSWORD:");
     884:	8e e4       	ldi	r24, 0x4E	; 78
     886:	92 e0       	ldi	r25, 0x02	; 2
     888:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
					 Local_u8_AdminCounter = EEPROMINT_ReadByte(LAST_BYTE);//UPDATE THE COUNTER
     88c:	8f ef       	ldi	r24, 0xFF	; 255
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	0e 94 ab 06 	call	0xd56	; 0xd56 <EEPROMINT_ReadByte>
     894:	18 2f       	mov	r17, r24
     896:	0c c0       	rjmp	.+24     	; 0x8b0 <__stack+0x51>
						 {
							 Local_u8_Error = ERROR;
							 EEPROMINT_WriteByte(LAST_BYTE,Local_u8_AdminCounter);//can be removed as counter is saved after password Right?!!
							 break;//END OF TAKING ID
						 }
						 else if(Local_u8_Variable8 != ENTER)
     898:	8d 30       	cpi	r24, 0x0D	; 13
     89a:	89 f2       	breq	.-94     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
						 {
							 Local_u8_Error = NO_ERROR;
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <Local_u8_Error>
							 Local_u8_AdminID = Local_u8_Variable8;
							 //_delay_ms(10);
							 EEPROMINT_WriteByte(Local_u8_AdminCounter,Local_u8_AdminID);
     8a2:	68 2f       	mov	r22, r24
     8a4:	81 2f       	mov	r24, r17
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	0e 94 92 06 	call	0xd24	; 0xd24 <EEPROMINT_WriteByte>
							 Local_u8_AdminCounter++;
     8ac:	1f 5f       	subi	r17, 0xFF	; 255
     8ae:	c7 cf       	rjmp	.-114    	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
					 UART_TxString(" PASSWORD:");
					 Local_u8_AdminCounter = EEPROMINT_ReadByte(LAST_BYTE);//UPDATE THE COUNTER
					 
					 while(ADDING_PASS)
					 {
						 Local_u8_Variable9 = HC05_Rx();
     8b0:	0e 94 bf 06 	call	0xd7e	; 0xd7e <HC05_Rx>
			
						 if( (Local_u8_Variable9 == ENTER) && (Local_u8_Error == ERROR))
     8b4:	8d 30       	cpi	r24, 0x0D	; 13
     8b6:	99 f4       	brne	.+38     	; 0x8de <__stack+0x7f>
     8b8:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <Local_u8_Error>
     8bc:	91 11       	cpse	r25, r1
     8be:	0f c0       	rjmp	.+30     	; 0x8de <__stack+0x7f>
						 {
							 UART_TxString(" Error please try again");
     8c0:	87 e8       	ldi	r24, 0x87	; 135
     8c2:	91 e0       	ldi	r25, 0x01	; 1
     8c4:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
		                     UART_Tx(NEXTLINE);
     8c8:	8d e0       	ldi	r24, 0x0D	; 13
     8ca:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
							 UART_TxString(" PASSWORD:");
     8ce:	8e e4       	ldi	r24, 0x4E	; 78
     8d0:	92 e0       	ldi	r25, 0x02	; 2
     8d2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
		                     UART_Tx(NEXTLINE);
     8d6:	8d e0       	ldi	r24, 0x0D	; 13
     8d8:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
     8dc:	e9 cf       	rjmp	.-46     	; 0x8b0 <__stack+0x51>
						 }
						 else if(Local_u8_Variable9 != ENTER)
     8de:	8d 30       	cpi	r24, 0x0D	; 13
     8e0:	51 f0       	breq	.+20     	; 0x8f6 <__stack+0x97>
						 {
							 Local_u8_Error = NO_ERROR;
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <Local_u8_Error>
							 Local_u8_AdminID = Local_u8_Variable9;
						//	 H_Lcd_WriteCharacter(Local_u8_AdminID);
							 EEPROMINT_WriteByte(Local_u8_AdminCounter,Local_u8_AdminID);
     8e8:	68 2f       	mov	r22, r24
     8ea:	81 2f       	mov	r24, r17
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	0e 94 92 06 	call	0xd24	; 0xd24 <EEPROMINT_WriteByte>
							 Local_u8_AdminCounter++;
     8f2:	1f 5f       	subi	r17, 0xFF	; 255
     8f4:	dd cf       	rjmp	.-70     	; 0x8b0 <__stack+0x51>
						 }
						 else if(Local_u8_Variable9 == ENTER)
     8f6:	8d 30       	cpi	r24, 0x0D	; 13
     8f8:	d9 f6       	brne	.-74     	; 0x8b0 <__stack+0x51>
						 {
							 EEPROMINT_WriteByte(Local_u8_AdminCounter,END_OF_CREDENTIALS);
     8fa:	64 e2       	ldi	r22, 0x24	; 36
     8fc:	81 2f       	mov	r24, r17
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	0e 94 92 06 	call	0xd24	; 0xd24 <EEPROMINT_WriteByte>
							 Local_u8_Error = ERROR;
     904:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <Local_u8_Error>
							 Local_u8_AdminCounter++;
     908:	61 e0       	ldi	r22, 0x01	; 1
     90a:	61 0f       	add	r22, r17
							 EEPROMINT_WriteByte(LAST_BYTE,Local_u8_AdminCounter);//UPDATE THE COUNTER (IN EEPROM)
     90c:	8f ef       	ldi	r24, 0xFF	; 255
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	0e 94 92 06 	call	0xd24	; 0xd24 <EEPROMINT_WriteByte>
		                     UART_Tx(NEXTLINE);
     914:	8d e0       	ldi	r24, 0x0D	; 13
     916:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
							 UART_TxString(" USER ADDED");
     91a:	89 e5       	ldi	r24, 0x59	; 89
     91c:	92 e0       	ldi	r25, 0x02	; 2
     91e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
		                     UART_Tx(NEXTLINE);
     922:	8d e0       	ldi	r24, 0x0D	; 13
     924:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
						 {
							 //Do Nothing
						 }
					 }
					 
					 break;
     928:	62 cf       	rjmp	.-316    	; 0x7ee <main+0x3ce>
					 case REMOVE_USER:
		             UART_Tx(NEXTLINE);
     92a:	8d e0       	ldi	r24, 0x0D	; 13
     92c:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
					 UART_TxString(" Enter ID&PASS");
     930:	85 e6       	ldi	r24, 0x65	; 101
     932:	92 e0       	ldi	r25, 0x02	; 2
     934:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
					 UART_TxString(" Combined");
     938:	84 e7       	ldi	r24, 0x74	; 116
     93a:	92 e0       	ldi	r25, 0x02	; 2
     93c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
		             UART_Tx(NEXTLINE);
     940:	8d e0       	ldi	r24, 0x0D	; 13
     942:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
					 Local_u8_counter = RESET;
					 Local_u8_EEPROMCount = RESET;
     946:	00 e0       	ldi	r16, 0x00	; 0
					 case REMOVE_USER:
		             UART_Tx(NEXTLINE);
					 UART_TxString(" Enter ID&PASS");
					 UART_TxString(" Combined");
		             UART_Tx(NEXTLINE);
					 Local_u8_counter = RESET;
     948:	10 e0       	ldi	r17, 0x00	; 0
					 Local_u8_EEPROMCount = RESET;
					 u8 Local_u8_EEPROMTEMP = NONE;
					 u8 Local_u8_EEPROMVALUE = NONE;
					 while(TAKING_ID_PASS)
					 {
						 Local_u8_Variable10 = HC05_Rx();
     94a:	0e 94 bf 06 	call	0xd7e	; 0xd7e <HC05_Rx>
						 
						 if(Local_u8_Variable10 == ENTER)
     94e:	8d 30       	cpi	r24, 0x0D	; 13
     950:	89 f0       	breq	.+34     	; 0x974 <__stack+0x115>
						 {
							 break;
						 }
						 else if(Local_u8_Variable10 != ENTER)
     952:	d9 f3       	breq	.-10     	; 0x94a <__stack+0xeb>
						 {
							 Local_u8_IDAndPass[Local_u8_counter] = Local_u8_Variable10;
     954:	e1 e0       	ldi	r30, 0x01	; 1
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	ec 0f       	add	r30, r28
     95a:	fd 1f       	adc	r31, r29
     95c:	e1 0f       	add	r30, r17
     95e:	f1 1d       	adc	r31, r1
     960:	80 83       	st	Z, r24
							// H_Lcd_WriteCharacter(Local_u8_Variable10);
							 Local_u8_counter++;
     962:	1f 5f       	subi	r17, 0xFF	; 255
							 Local_u8_EEPROMVALUE = EEPROMINT_ReadByte(Local_u8_EEPROMCount) ;
     964:	80 2f       	mov	r24, r16
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	0e 94 ab 06 	call	0xd56	; 0xd56 <EEPROMINT_ReadByte>
							 if(Local_u8_EEPROMVALUE == END_OF_CREDENTIALS)
     96c:	84 32       	cpi	r24, 0x24	; 36
     96e:	69 f3       	breq	.-38     	; 0x94a <__stack+0xeb>
							 {
								 //Do Nothing
							 }
							 else
							 {
								 Local_u8_EEPROMCount++;
     970:	0f 5f       	subi	r16, 0xFF	; 255
     972:	eb cf       	rjmp	.-42     	; 0x94a <__stack+0xeb>
					 }
					 
					 while(REMOVING_USER)
					 {
						 u8 Local_u8_BREAK = NO;//END 'while(REMOVING_USER)' LOOP
						 if(Local_u8_EEPROMCount == LAST_PLACE)
     974:	0f 3f       	cpi	r16, 0xFF	; 255
     976:	79 f4       	brne	.+30     	; 0x996 <__stack+0x137>
						 {
		                     UART_Tx(13);
     978:	8d e0       	ldi	r24, 0x0D	; 13
     97a:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
							 UART_TxString(" USER DOESN'T");
     97e:	8e e7       	ldi	r24, 0x7E	; 126
     980:	92 e0       	ldi	r25, 0x02	; 2
     982:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
		                     UART_Tx(13);
     986:	8d e0       	ldi	r24, 0x0D	; 13
     988:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
							 UART_TxString(" EXIST");
     98c:	8c e8       	ldi	r24, 0x8C	; 140
     98e:	92 e0       	ldi	r25, 0x02	; 2
     990:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
							 break; //END 'while(REMOVING_USER)' LOOP
     994:	2c cf       	rjmp	.-424    	; 0x7ee <main+0x3ce>
						 }
						 else
						 {
							 Local_u8_counter = RESET;
							 Local_u8_EEPROMCount++;
     996:	0f 5f       	subi	r16, 0xFF	; 255
							 Local_u8_EEPROMTEMP = Local_u8_EEPROMCount;
     998:	10 2f       	mov	r17, r16
							 UART_TxString(" EXIST");
							 break; //END 'while(REMOVING_USER)' LOOP
						 }
						 else
						 {
							 Local_u8_counter = RESET;
     99a:	e1 2c       	mov	r14, r1
							 Local_u8_EEPROMCount++;
							 Local_u8_EEPROMTEMP = Local_u8_EEPROMCount;
							 while(CHECKING)
							 {
								 if(Local_u8_IDAndPass[Local_u8_counter] == EEPROMINT_ReadByte(Local_u8_EEPROMTEMP))
     99c:	e1 e0       	ldi	r30, 0x01	; 1
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	ec 0f       	add	r30, r28
     9a2:	fd 1f       	adc	r31, r29
     9a4:	ee 0d       	add	r30, r14
     9a6:	f1 1d       	adc	r31, r1
     9a8:	f0 80       	ld	r15, Z
     9aa:	81 2f       	mov	r24, r17
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	0e 94 ab 06 	call	0xd56	; 0xd56 <EEPROMINT_ReadByte>
     9b2:	f8 12       	cpse	r15, r24
     9b4:	2a c0       	rjmp	.+84     	; 0xa0a <__stack+0x1ab>
								 {
									 Local_u8_EEPROMCount++;
     9b6:	0f 5f       	subi	r16, 0xFF	; 255
									 UART_Tx(NEXTLINE);
     9b8:	8d e0       	ldi	r24, 0x0D	; 13
     9ba:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
									 UART_TxString(" CHECKING...");
     9be:	83 e9       	ldi	r24, 0x93	; 147
     9c0:	92 e0       	ldi	r25, 0x02	; 2
     9c2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
									 
									 if(EEPROMINT_ReadByte(Local_u8_EEPROMCount) == END_OF_CREDENTIALS)
     9c6:	80 2f       	mov	r24, r16
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	0e 94 ab 06 	call	0xd56	; 0xd56 <EEPROMINT_ReadByte>
     9ce:	84 32       	cpi	r24, 0x24	; 36
     9d0:	c9 f4       	brne	.+50     	; 0xa04 <__stack+0x1a5>
     9d2:	05 c0       	rjmp	.+10     	; 0x9de <__stack+0x17f>
									 {
										 while(EEPROMINT_ReadByte(Local_u8_EEPROMTEMP) != END_OF_CREDENTIALS)
										 {
											 EEPROMINT_WriteByte(Local_u8_EEPROMTEMP,EMPTY);
     9d4:	6f ef       	ldi	r22, 0xFF	; 255
     9d6:	c7 01       	movw	r24, r14
     9d8:	0e 94 92 06 	call	0xd24	; 0xd24 <EEPROMINT_WriteByte>
											 --Local_u8_EEPROMTEMP;
     9dc:	11 50       	subi	r17, 0x01	; 1
									 UART_Tx(NEXTLINE);
									 UART_TxString(" CHECKING...");
									 
									 if(EEPROMINT_ReadByte(Local_u8_EEPROMCount) == END_OF_CREDENTIALS)
									 {
										 while(EEPROMINT_ReadByte(Local_u8_EEPROMTEMP) != END_OF_CREDENTIALS)
     9de:	e1 2e       	mov	r14, r17
     9e0:	f1 2c       	mov	r15, r1
     9e2:	c7 01       	movw	r24, r14
     9e4:	0e 94 ab 06 	call	0xd56	; 0xd56 <EEPROMINT_ReadByte>
     9e8:	84 32       	cpi	r24, 0x24	; 36
     9ea:	a1 f7       	brne	.-24     	; 0x9d4 <__stack+0x175>
										 {
											 EEPROMINT_WriteByte(Local_u8_EEPROMTEMP,EMPTY);
											 --Local_u8_EEPROMTEMP;
										 }
										 UART_Tx(NEXTLINE);
     9ec:	8d e0       	ldi	r24, 0x0D	; 13
     9ee:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
										 UART_TxString(" USER DELETED");
     9f2:	80 ea       	ldi	r24, 0xA0	; 160
     9f4:	92 e0       	ldi	r25, 0x02	; 2
     9f6:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
										 UART_Tx(NEXTLINE);
     9fa:	8d e0       	ldi	r24, 0x0D	; 13
     9fc:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
										 Local_u8_BREAK = YES;
     a00:	81 e0       	ldi	r24, 0x01	; 1
										 break;//END 'while(CHECKING)' LOOP
     a02:	08 c0       	rjmp	.+16     	; 0xa14 <__stack+0x1b5>
									 }
									 Local_u8_EEPROMTEMP++;
     a04:	1f 5f       	subi	r17, 0xFF	; 255
									 Local_u8_counter++;
     a06:	e3 94       	inc	r14
     a08:	c9 cf       	rjmp	.-110    	; 0x99c <__stack+0x13d>
								 }
								 else
								 {
									 Local_u8_EEPROMTEMP++;
     a0a:	1f 5f       	subi	r17, 0xFF	; 255
									 Local_u8_EEPROMCount++;
     a0c:	0f 5f       	subi	r16, 0xFF	; 255
									 
									 if(Local_u8_EEPROMCount == LAST_PLACE)
     a0e:	0f 3f       	cpi	r16, 0xFF	; 255
     a10:	29 f6       	brne	.-118    	; 0x99c <__stack+0x13d>
						 }
					 }
					 
					 while(REMOVING_USER)
					 {
						 u8 Local_u8_BREAK = NO;//END 'while(REMOVING_USER)' LOOP
     a12:	80 e0       	ldi	r24, 0x00	; 0
									 {
										 break;//END 'while(CHECKING)' LOOP
									 }
								 }
							 }
							 if(Local_u8_BREAK == YES)
     a14:	81 30       	cpi	r24, 0x01	; 1
     a16:	09 f0       	breq	.+2      	; 0xa1a <__stack+0x1bb>
     a18:	ad cf       	rjmp	.-166    	; 0x974 <__stack+0x115>
     a1a:	e9 ce       	rjmp	.-558    	; 0x7ee <main+0x3ce>
							 }
						 }
					 }
					 break;
					 case MENU:
					 UART_Tx(NEXTLINE);
     a1c:	8d e0       	ldi	r24, 0x0D	; 13
     a1e:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
					 UART_TxString(" Welcome sir");
     a22:	8e ea       	ldi	r24, 0xAE	; 174
     a24:	92 e0       	ldi	r25, 0x02	; 2
     a26:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
					 UART_Tx(NEXTLINE);
     a2a:	8d e0       	ldi	r24, 0x0D	; 13
     a2c:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
					 while (WAITING_FOR_CHOICE)
					 {
						  u8 Local_u8_FlagToMenu = 0;
						 UART_TxString(" 1-Door  2-Light");
     a30:	8b eb       	ldi	r24, 0xBB	; 187
     a32:	92 e0       	ldi	r25, 0x02	; 2
     a34:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
						 UART_Tx(NEXTLINE);
     a38:	8d e0       	ldi	r24, 0x0D	; 13
     a3a:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
						 UART_TxString(" 3-Dim_Light 4-AC");
     a3e:	8c ec       	ldi	r24, 0xCC	; 204
     a40:	92 e0       	ldi	r25, 0x02	; 2
     a42:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
						 UART_Tx(NEXTLINE);
     a46:	8d e0       	ldi	r24, 0x0D	; 13
     a48:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
						 UART_TxString(" 5-Back To Main Menu");
     a4c:	8e ed       	ldi	r24, 0xDE	; 222
     a4e:	92 e0       	ldi	r25, 0x02	; 2
     a50:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_TxString>
						 UART_Tx(NEXTLINE);
     a54:	8d e0       	ldi	r24, 0x0D	; 13
     a56:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>

						 Local_u8_Menu =	HC05_Rx() ;
     a5a:	0e 94 bf 06 	call	0xd7e	; 0xd7e <HC05_Rx>
						 if (Local_u8_Menu != 0)
     a5e:	88 23       	and	r24, r24
     a60:	49 f1       	breq	.+82     	; 0xab4 <__stack+0x255>
						 {
							 
							 switch(Local_u8_Menu)
     a62:	83 33       	cpi	r24, 0x33	; 51
     a64:	b9 f0       	breq	.+46     	; 0xa94 <__stack+0x235>
     a66:	28 f4       	brcc	.+10     	; 0xa72 <__stack+0x213>
     a68:	81 33       	cpi	r24, 0x31	; 49
     a6a:	41 f0       	breq	.+16     	; 0xa7c <__stack+0x21d>
     a6c:	82 33       	cpi	r24, 0x32	; 50
     a6e:	61 f0       	breq	.+24     	; 0xa88 <__stack+0x229>
     a70:	23 c0       	rjmp	.+70     	; 0xab8 <__stack+0x259>
     a72:	84 33       	cpi	r24, 0x34	; 52
     a74:	a9 f0       	breq	.+42     	; 0xaa0 <__stack+0x241>
     a76:	85 33       	cpi	r24, 0x35	; 53
     a78:	c9 f0       	breq	.+50     	; 0xaac <__stack+0x24d>
     a7a:	1e c0       	rjmp	.+60     	; 0xab8 <__stack+0x259>
							 {
								 case 49:H_Lcd_Clr();  Door_Control();                break;
     a7c:	0e 94 64 08 	call	0x10c8	; 0x10c8 <H_Lcd_Clr>
     a80:	0e 94 ca 00 	call	0x194	; 0x194 <Door_Control>
					 UART_Tx(NEXTLINE);
					 UART_TxString(" Welcome sir");
					 UART_Tx(NEXTLINE);
					 while (WAITING_FOR_CHOICE)
					 {
						  u8 Local_u8_FlagToMenu = 0;
     a84:	80 e0       	ldi	r24, 0x00	; 0
						 if (Local_u8_Menu != 0)
						 {
							 
							 switch(Local_u8_Menu)
							 {
								 case 49:H_Lcd_Clr();  Door_Control();                break;
     a86:	19 c0       	rjmp	.+50     	; 0xaba <__stack+0x25b>
								 case 50:H_Lcd_Clr();  Light_Control();			      break;
     a88:	0e 94 64 08 	call	0x10c8	; 0x10c8 <H_Lcd_Clr>
     a8c:	0e 94 11 01 	call	0x222	; 0x222 <Light_Control>
					 UART_Tx(NEXTLINE);
					 UART_TxString(" Welcome sir");
					 UART_Tx(NEXTLINE);
					 while (WAITING_FOR_CHOICE)
					 {
						  u8 Local_u8_FlagToMenu = 0;
     a90:	80 e0       	ldi	r24, 0x00	; 0
						 {
							 
							 switch(Local_u8_Menu)
							 {
								 case 49:H_Lcd_Clr();  Door_Control();                break;
								 case 50:H_Lcd_Clr();  Light_Control();			      break;
     a92:	13 c0       	rjmp	.+38     	; 0xaba <__stack+0x25b>
								 case 51:H_Lcd_Clr();  Dim_Light_Control();		      break;
     a94:	0e 94 64 08 	call	0x10c8	; 0x10c8 <H_Lcd_Clr>
     a98:	0e 94 48 01 	call	0x290	; 0x290 <Dim_Light_Control>
					 UART_Tx(NEXTLINE);
					 UART_TxString(" Welcome sir");
					 UART_Tx(NEXTLINE);
					 while (WAITING_FOR_CHOICE)
					 {
						  u8 Local_u8_FlagToMenu = 0;
     a9c:	80 e0       	ldi	r24, 0x00	; 0
							 
							 switch(Local_u8_Menu)
							 {
								 case 49:H_Lcd_Clr();  Door_Control();                break;
								 case 50:H_Lcd_Clr();  Light_Control();			      break;
								 case 51:H_Lcd_Clr();  Dim_Light_Control();		      break;
     a9e:	0d c0       	rjmp	.+26     	; 0xaba <__stack+0x25b>
								 case 52:H_Lcd_Clr();  AirCond_EN();                  break;
     aa0:	0e 94 64 08 	call	0x10c8	; 0x10c8 <H_Lcd_Clr>
     aa4:	0e 94 a5 01 	call	0x34a	; 0x34a <AirCond_EN>
					 UART_Tx(NEXTLINE);
					 UART_TxString(" Welcome sir");
					 UART_Tx(NEXTLINE);
					 while (WAITING_FOR_CHOICE)
					 {
						  u8 Local_u8_FlagToMenu = 0;
     aa8:	80 e0       	ldi	r24, 0x00	; 0
							 switch(Local_u8_Menu)
							 {
								 case 49:H_Lcd_Clr();  Door_Control();                break;
								 case 50:H_Lcd_Clr();  Light_Control();			      break;
								 case 51:H_Lcd_Clr();  Dim_Light_Control();		      break;
								 case 52:H_Lcd_Clr();  AirCond_EN();                  break;
     aaa:	07 c0       	rjmp	.+14     	; 0xaba <__stack+0x25b>
								 case 53:H_Lcd_Clr();  Local_u8_FlagToMenu = 1;       break;								 
     aac:	0e 94 64 08 	call	0x10c8	; 0x10c8 <H_Lcd_Clr>
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	03 c0       	rjmp	.+6      	; 0xaba <__stack+0x25b>
					 UART_Tx(NEXTLINE);
					 UART_TxString(" Welcome sir");
					 UART_Tx(NEXTLINE);
					 while (WAITING_FOR_CHOICE)
					 {
						  u8 Local_u8_FlagToMenu = 0;
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	01 c0       	rjmp	.+2      	; 0xaba <__stack+0x25b>
     ab8:	80 e0       	ldi	r24, 0x00	; 0
								 case 52:H_Lcd_Clr();  AirCond_EN();                  break;
								 case 53:H_Lcd_Clr();  Local_u8_FlagToMenu = 1;       break;								 
								 default:							                  break;
							 }
						 }
						  if(Local_u8_FlagToMenu == 1)
     aba:	81 30       	cpi	r24, 0x01	; 1
     abc:	09 f0       	breq	.+2      	; 0xac0 <__stack+0x261>
     abe:	b8 cf       	rjmp	.-144    	; 0xa30 <__stack+0x1d1>
     ac0:	96 ce       	rjmp	.-724    	; 0x7ee <main+0x3ce>
					 }

				 }
			 }
/************************************************** USER_MODE***************************************************************************************/
else if (Local_u8_Mode == USER_MODE)
     ac2:	a5 e1       	ldi	r26, 0x15	; 21
     ac4:	fa 12       	cpse	r15, r26
     ac6:	bf cd       	rjmp	.-1154   	; 0x646 <main+0x226>
{     
	H_Lcd_WriteString("Welcome");
     ac8:	83 ef       	ldi	r24, 0xF3	; 243
     aca:	92 e0       	ldi	r25, 0x02	; 2
     acc:	0e 94 51 08 	call	0x10a2	; 0x10a2 <H_Lcd_WriteString>
     ad0:	bf ef       	ldi	r27, 0xFF	; 255
     ad2:	2e e9       	ldi	r18, 0x9E	; 158
     ad4:	84 e2       	ldi	r24, 0x24	; 36
     ad6:	b1 50       	subi	r27, 0x01	; 1
     ad8:	20 40       	sbci	r18, 0x00	; 0
     ada:	80 40       	sbci	r24, 0x00	; 0
     adc:	e1 f7       	brne	.-8      	; 0xad6 <__stack+0x277>
     ade:	00 c0       	rjmp	.+0      	; 0xae0 <__stack+0x281>
     ae0:	00 00       	nop
	_delay_ms(DISPLAY_TIME);
	H_Lcd_Clr();
     ae2:	0e 94 64 08 	call	0x10c8	; 0x10c8 <H_Lcd_Clr>
	Local_u8_EEPROM = 0;
	Local_u8_counter = 0;
	Local_u8_ID = 1;
	Local_u8_Wrong == 10;
	Local_u8_Trials = 3;
     ae6:	83 e0       	ldi	r24, 0x03	; 3
     ae8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		{
			break;
		}
		
		/*Taking the ID*/
		H_Lcd_WriteString("ID:");
     aec:	8d eb       	ldi	r24, 0xBD	; 189
     aee:	91 e0       	ldi	r25, 0x01	; 1
     af0:	0e 94 51 08 	call	0x10a2	; 0x10a2 <H_Lcd_WriteString>
		H_Lcd_GoTo(1,0);
     af4:	60 e0       	ldi	r22, 0x00	; 0
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	0e 94 68 08 	call	0x10d0	; 0x10d0 <H_Lcd_GoTo>
		while(Local_u8_ID)
     afc:	10 e0       	ldi	r17, 0x00	; 0
     afe:	01 e0       	ldi	r16, 0x01	; 1
     b00:	39 c0       	rjmp	.+114    	; 0xb74 <__stack+0x315>
		{
			Local_u8_Variable11 = H_KeyPad_Read();
     b02:	0e 94 36 07 	call	0xe6c	; 0xe6c <H_KeyPad_Read>
			if((Local_u8_Variable11 == '=') && (Local_u8_Error == ERROR))
     b06:	8d 33       	cpi	r24, 0x3D	; 61
     b08:	e1 f4       	brne	.+56     	; 0xb42 <__stack+0x2e3>
     b0a:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <Local_u8_Error>
     b0e:	91 11       	cpse	r25, r1
     b10:	18 c0       	rjmp	.+48     	; 0xb42 <__stack+0x2e3>
			{
				H_Lcd_WriteString("Error please try again");
     b12:	88 e8       	ldi	r24, 0x88	; 136
     b14:	91 e0       	ldi	r25, 0x01	; 1
     b16:	0e 94 51 08 	call	0x10a2	; 0x10a2 <H_Lcd_WriteString>
     b1a:	9f ef       	ldi	r25, 0xFF	; 255
     b1c:	ae e9       	ldi	r26, 0x9E	; 158
     b1e:	b4 e2       	ldi	r27, 0x24	; 36
     b20:	91 50       	subi	r25, 0x01	; 1
     b22:	a0 40       	sbci	r26, 0x00	; 0
     b24:	b0 40       	sbci	r27, 0x00	; 0
     b26:	e1 f7       	brne	.-8      	; 0xb20 <__stack+0x2c1>
     b28:	00 c0       	rjmp	.+0      	; 0xb2a <__stack+0x2cb>
     b2a:	00 00       	nop
				_delay_ms(750);
				H_Lcd_Clr();
     b2c:	0e 94 64 08 	call	0x10c8	; 0x10c8 <H_Lcd_Clr>
				H_Lcd_WriteString("ID:");
     b30:	8d eb       	ldi	r24, 0xBD	; 189
     b32:	91 e0       	ldi	r25, 0x01	; 1
     b34:	0e 94 51 08 	call	0x10a2	; 0x10a2 <H_Lcd_WriteString>
				H_Lcd_GoTo(1,0);
     b38:	60 e0       	ldi	r22, 0x00	; 0
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	0e 94 68 08 	call	0x10d0	; 0x10d0 <H_Lcd_GoTo>
     b40:	19 c0       	rjmp	.+50     	; 0xb74 <__stack+0x315>
			}
			else if(Local_u8_Variable11 == '=')
     b42:	8d 33       	cpi	r24, 0x3D	; 61
     b44:	21 f4       	brne	.+8      	; 0xb4e <__stack+0x2ef>
			{
				/*The end of taking the ID*/
				Local_u8_Error = ERROR;
     b46:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <Local_u8_Error>
				Local_u8_ID = 0;
     b4a:	00 e0       	ldi	r16, 0x00	; 0
     b4c:	13 c0       	rjmp	.+38     	; 0xb74 <__stack+0x315>
			}
			else if(Local_u8_Variable1 != '=')
			{
				Local_u8_Error = NO_ERROR;
     b4e:	91 e0       	ldi	r25, 0x01	; 1
     b50:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <Local_u8_Error>
				Local_u8_IDAndPass[Local_u8_counter] = Local_u8_Variable11;
     b54:	e1 e0       	ldi	r30, 0x01	; 1
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	ec 0f       	add	r30, r28
     b5a:	fd 1f       	adc	r31, r29
     b5c:	e1 0f       	add	r30, r17
     b5e:	f1 1d       	adc	r31, r1
     b60:	80 83       	st	Z, r24
				H_Lcd_WriteCharacter(Local_u8_IDAndPass[Local_u8_counter]);
     b62:	0e 94 99 07 	call	0xf32	; 0xf32 <H_Lcd_WriteCharacter>
				Local_u8_counter++;
     b66:	1f 5f       	subi	r17, 0xFF	; 255
     b68:	8f e3       	ldi	r24, 0x3F	; 63
     b6a:	9c e9       	ldi	r25, 0x9C	; 156
     b6c:	01 97       	sbiw	r24, 0x01	; 1
     b6e:	f1 f7       	brne	.-4      	; 0xb6c <__stack+0x30d>
     b70:	00 c0       	rjmp	.+0      	; 0xb72 <__stack+0x313>
     b72:	00 00       	nop
		}
		
		/*Taking the ID*/
		H_Lcd_WriteString("ID:");
		H_Lcd_GoTo(1,0);
		while(Local_u8_ID)
     b74:	01 11       	cpse	r16, r1
     b76:	c5 cf       	rjmp	.-118    	; 0xb02 <__stack+0x2a3>
				_delay_ms(10);
			}
		}
		
		/*Taking the PASSWORD*/
		H_Lcd_Clr();
     b78:	0e 94 64 08 	call	0x10c8	; 0x10c8 <H_Lcd_Clr>
		H_Lcd_WriteString("PASSWORD: ");
     b7c:	82 ec       	ldi	r24, 0xC2	; 194
     b7e:	91 e0       	ldi	r25, 0x01	; 1
     b80:	0e 94 51 08 	call	0x10a2	; 0x10a2 <H_Lcd_WriteString>
     b84:	9f ef       	ldi	r25, 0xFF	; 255
     b86:	ae e9       	ldi	r26, 0x9E	; 158
     b88:	b4 e2       	ldi	r27, 0x24	; 36
     b8a:	91 50       	subi	r25, 0x01	; 1
     b8c:	a0 40       	sbci	r26, 0x00	; 0
     b8e:	b0 40       	sbci	r27, 0x00	; 0
     b90:	e1 f7       	brne	.-8      	; 0xb8a <__stack+0x32b>
     b92:	00 c0       	rjmp	.+0      	; 0xb94 <__stack+0x335>
     b94:	00 00       	nop
		_delay_ms(DISPLAY_TIME);
		H_Lcd_GoTo(1,0);
     b96:	60 e0       	ldi	r22, 0x00	; 0
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	0e 94 68 08 	call	0x10d0	; 0x10d0 <H_Lcd_GoTo>
		
		while(!Local_u8_ID)
     b9e:	3b c0       	rjmp	.+118    	; 0xc16 <__stack+0x3b7>
		{
			Local_u8_Variable12 = H_KeyPad_Read();
     ba0:	0e 94 36 07 	call	0xe6c	; 0xe6c <H_KeyPad_Read>
			if((Local_u8_Variable12 == '=') && (Local_u8_Error == ERROR))
     ba4:	8d 33       	cpi	r24, 0x3D	; 61
     ba6:	e1 f4       	brne	.+56     	; 0xbe0 <__stack+0x381>
     ba8:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <Local_u8_Error>
     bac:	91 11       	cpse	r25, r1
     bae:	18 c0       	rjmp	.+48     	; 0xbe0 <__stack+0x381>
			{
				H_Lcd_WriteString("Error please try again");
     bb0:	88 e8       	ldi	r24, 0x88	; 136
     bb2:	91 e0       	ldi	r25, 0x01	; 1
     bb4:	0e 94 51 08 	call	0x10a2	; 0x10a2 <H_Lcd_WriteString>
     bb8:	2f ef       	ldi	r18, 0xFF	; 255
     bba:	8e e9       	ldi	r24, 0x9E	; 158
     bbc:	94 e2       	ldi	r25, 0x24	; 36
     bbe:	21 50       	subi	r18, 0x01	; 1
     bc0:	80 40       	sbci	r24, 0x00	; 0
     bc2:	90 40       	sbci	r25, 0x00	; 0
     bc4:	e1 f7       	brne	.-8      	; 0xbbe <__stack+0x35f>
     bc6:	00 c0       	rjmp	.+0      	; 0xbc8 <__stack+0x369>
     bc8:	00 00       	nop
				_delay_ms(DISPLAY_TIME);
				H_Lcd_Clr();
     bca:	0e 94 64 08 	call	0x10c8	; 0x10c8 <H_Lcd_Clr>
				H_Lcd_WriteString("PASSWORD: ");
     bce:	82 ec       	ldi	r24, 0xC2	; 194
     bd0:	91 e0       	ldi	r25, 0x01	; 1
     bd2:	0e 94 51 08 	call	0x10a2	; 0x10a2 <H_Lcd_WriteString>
				H_Lcd_GoTo(1,0);
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	0e 94 68 08 	call	0x10d0	; 0x10d0 <H_Lcd_GoTo>
     bde:	1b c0       	rjmp	.+54     	; 0xc16 <__stack+0x3b7>
			}
			else if(Local_u8_Variable12 == '=')
     be0:	8d 33       	cpi	r24, 0x3D	; 61
     be2:	21 f4       	brne	.+8      	; 0xbec <__stack+0x38d>
			{
				/*The end of taking the ID*/
				Local_u8_Error = ERROR;
     be4:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <Local_u8_Error>
				Local_u8_ID = 1;
     be8:	01 e0       	ldi	r16, 0x01	; 1
     bea:	15 c0       	rjmp	.+42     	; 0xc16 <__stack+0x3b7>
			}
			
			/*Enter the password you want untill 'ENTER'*/
			else if(Local_u8_Variable12 != '=')
     bec:	8d 33       	cpi	r24, 0x3D	; 61
     bee:	99 f0       	breq	.+38     	; 0xc16 <__stack+0x3b7>
			{
				Local_u8_Error = NO_ERROR;
     bf0:	91 e0       	ldi	r25, 0x01	; 1
     bf2:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <Local_u8_Error>
				Local_u8_IDAndPass[Local_u8_counter] = Local_u8_Variable12;
     bf6:	e1 e0       	ldi	r30, 0x01	; 1
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	ec 0f       	add	r30, r28
     bfc:	fd 1f       	adc	r31, r29
     bfe:	e1 0f       	add	r30, r17
     c00:	f1 1d       	adc	r31, r1
     c02:	80 83       	st	Z, r24
				H_Lcd_WriteCharacter(Local_u8_IDAndPass[Local_u8_counter]);
     c04:	0e 94 99 07 	call	0xf32	; 0xf32 <H_Lcd_WriteCharacter>
				Local_u8_counter++;
     c08:	1f 5f       	subi	r17, 0xFF	; 255
     c0a:	af e3       	ldi	r26, 0x3F	; 63
     c0c:	bc e9       	ldi	r27, 0x9C	; 156
     c0e:	11 97       	sbiw	r26, 0x01	; 1
     c10:	f1 f7       	brne	.-4      	; 0xc0e <__stack+0x3af>
     c12:	00 c0       	rjmp	.+0      	; 0xc14 <__stack+0x3b5>
     c14:	00 00       	nop
		H_Lcd_Clr();
		H_Lcd_WriteString("PASSWORD: ");
		_delay_ms(DISPLAY_TIME);
		H_Lcd_GoTo(1,0);
		
		while(!Local_u8_ID)
     c16:	00 23       	and	r16, r16
     c18:	19 f2       	breq	.-122    	; 0xba0 <__stack+0x341>
     c1a:	00 e0       	ldi	r16, 0x00	; 0
     c1c:	10 e0       	ldi	r17, 0x00	; 0
     c1e:	6f c0       	rjmp	.+222    	; 0xcfe <__stack+0x49f>
		{
			Local_u8_ForLoopcounter = 0;
			Local_u8_EEPROMCount = 0;
			for(Local_u8_ForLoopcounter; Local_u8_ForLoopcounter < 255 ; Local_u8_ForLoopcounter++)
			{
				Local_u8_EEPROM = EEPROMINT_ReadByte(Local_u8_EEPROMCount); //Reading EEPROM consecutively
     c20:	80 2f       	mov	r24, r16
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	0e 94 ab 06 	call	0xd56	; 0xd56 <EEPROMINT_ReadByte>
				Local_u8_EEPROMCount++;
     c28:	0f 5f       	subi	r16, 0xFF	; 255
				if(Local_u8_IDAndPass[Local_u8_ForLoopcounter] == Local_u8_EEPROM)
     c2a:	e1 e0       	ldi	r30, 0x01	; 1
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	ec 0f       	add	r30, r28
     c30:	fd 1f       	adc	r31, r29
     c32:	e1 0f       	add	r30, r17
     c34:	f1 1d       	adc	r31, r1
     c36:	90 81       	ld	r25, Z
     c38:	89 13       	cpse	r24, r25
     c3a:	0e c0       	rjmp	.+28     	; 0xc58 <__stack+0x3f9>
				{
					H_Lcd_Clr();
     c3c:	0e 94 64 08 	call	0x10c8	; 0x10c8 <H_Lcd_Clr>
					H_Lcd_WriteString("CHECKING...");
     c40:	84 e9       	ldi	r24, 0x94	; 148
     c42:	92 e0       	ldi	r25, 0x02	; 2
     c44:	0e 94 51 08 	call	0x10a2	; 0x10a2 <H_Lcd_WriteString>
					if(EEPROMINT_ReadByte(Local_u8_EEPROMCount) == '$')
     c48:	80 2f       	mov	r24, r16
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	0e 94 ab 06 	call	0xd56	; 0xd56 <EEPROMINT_ReadByte>
     c50:	84 32       	cpi	r24, 0x24	; 36
     c52:	09 f0       	breq	.+2      	; 0xc56 <__stack+0x3f7>
     c54:	53 c0       	rjmp	.+166    	; 0xcfc <__stack+0x49d>
     c56:	56 c0       	rjmp	.+172    	; 0xd04 <__stack+0x4a5>
						break;
						Local_u8_Wrong == 11;
					}
					
				}
				else if(Local_u8_IDAndPass[Local_u8_ForLoopcounter] != Local_u8_EEPROM && Local_u8_Wrong == 10 )
     c58:	89 17       	cp	r24, r25
     c5a:	09 f4       	brne	.+2      	; 0xc5e <__stack+0x3ff>
     c5c:	4f c0       	rjmp	.+158    	; 0xcfc <__stack+0x49d>
				{
					H_Lcd_Clr();
     c5e:	0e 94 64 08 	call	0x10c8	; 0x10c8 <H_Lcd_Clr>
					H_Lcd_WriteString("Wrong ID/PASS");
     c62:	8e ec       	ldi	r24, 0xCE	; 206
     c64:	91 e0       	ldi	r25, 0x01	; 1
     c66:	0e 94 51 08 	call	0x10a2	; 0x10a2 <H_Lcd_WriteString>
     c6a:	bf ef       	ldi	r27, 0xFF	; 255
     c6c:	29 e6       	ldi	r18, 0x69	; 105
     c6e:	88 e1       	ldi	r24, 0x18	; 24
     c70:	b1 50       	subi	r27, 0x01	; 1
     c72:	20 40       	sbci	r18, 0x00	; 0
     c74:	80 40       	sbci	r24, 0x00	; 0
     c76:	e1 f7       	brne	.-8      	; 0xc70 <__stack+0x411>
     c78:	00 c0       	rjmp	.+0      	; 0xc7a <__stack+0x41b>
     c7a:	00 00       	nop
					_delay_ms(500);
					H_Lcd_GoTo(1,0);
     c7c:	60 e0       	ldi	r22, 0x00	; 0
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	0e 94 68 08 	call	0x10d0	; 0x10d0 <H_Lcd_GoTo>
					switch(Local_u8_Trials)
     c84:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     c88:	82 30       	cpi	r24, 0x02	; 2
     c8a:	a9 f0       	breq	.+42     	; 0xcb6 <__stack+0x457>
     c8c:	83 30       	cpi	r24, 0x03	; 3
     c8e:	19 f0       	breq	.+6      	; 0xc96 <__stack+0x437>
     c90:	81 30       	cpi	r24, 0x01	; 1
     c92:	c1 f5       	brne	.+112    	; 0xd04 <__stack+0x4a5>
     c94:	20 c0       	rjmp	.+64     	; 0xcd6 <__stack+0x477>
					{
						case 3:
						H_Lcd_WriteString("2 trials left ");
     c96:	8d ed       	ldi	r24, 0xDD	; 221
     c98:	91 e0       	ldi	r25, 0x01	; 1
     c9a:	0e 94 51 08 	call	0x10a2	; 0x10a2 <H_Lcd_WriteString>
     c9e:	9f ef       	ldi	r25, 0xFF	; 255
     ca0:	a9 e6       	ldi	r26, 0x69	; 105
     ca2:	b8 e1       	ldi	r27, 0x18	; 24
     ca4:	91 50       	subi	r25, 0x01	; 1
     ca6:	a0 40       	sbci	r26, 0x00	; 0
     ca8:	b0 40       	sbci	r27, 0x00	; 0
     caa:	e1 f7       	brne	.-8      	; 0xca4 <__stack+0x445>
     cac:	00 c0       	rjmp	.+0      	; 0xcae <__stack+0x44f>
     cae:	00 00       	nop
						_delay_ms(500);
						H_Lcd_Clr();
     cb0:	0e 94 64 08 	call	0x10c8	; 0x10c8 <H_Lcd_Clr>
						break;
     cb4:	27 c0       	rjmp	.+78     	; 0xd04 <__stack+0x4a5>
						case 2:
						H_Lcd_WriteString("1 trial left ");
     cb6:	8d ee       	ldi	r24, 0xED	; 237
     cb8:	91 e0       	ldi	r25, 0x01	; 1
     cba:	0e 94 51 08 	call	0x10a2	; 0x10a2 <H_Lcd_WriteString>
     cbe:	2f ef       	ldi	r18, 0xFF	; 255
     cc0:	89 e6       	ldi	r24, 0x69	; 105
     cc2:	98 e1       	ldi	r25, 0x18	; 24
     cc4:	21 50       	subi	r18, 0x01	; 1
     cc6:	80 40       	sbci	r24, 0x00	; 0
     cc8:	90 40       	sbci	r25, 0x00	; 0
     cca:	e1 f7       	brne	.-8      	; 0xcc4 <__stack+0x465>
     ccc:	00 c0       	rjmp	.+0      	; 0xcce <__stack+0x46f>
     cce:	00 00       	nop
						_delay_ms(500);
						H_Lcd_Clr();
     cd0:	0e 94 64 08 	call	0x10c8	; 0x10c8 <H_Lcd_Clr>
						break;
     cd4:	17 c0       	rjmp	.+46     	; 0xd04 <__stack+0x4a5>
						case 1:
						H_Lcd_Clr();
     cd6:	0e 94 64 08 	call	0x10c8	; 0x10c8 <H_Lcd_Clr>
						H_Lcd_GoTo(0,4);
     cda:	64 e0       	ldi	r22, 0x04	; 4
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	0e 94 68 08 	call	0x10d0	; 0x10d0 <H_Lcd_GoTo>
						H_Lcd_WriteString("EMERGENCY");
     ce2:	8c ef       	ldi	r24, 0xFC	; 252
     ce4:	91 e0       	ldi	r25, 0x01	; 1
     ce6:	0e 94 51 08 	call	0x10a2	; 0x10a2 <H_Lcd_WriteString>
						H_Lcd_GoTo(1,0);
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	0e 94 68 08 	call	0x10d0	; 0x10d0 <H_Lcd_GoTo>
						H_Lcd_WriteString("CALLING 911");
     cf2:	87 e0       	ldi	r24, 0x07	; 7
     cf4:	92 e0       	ldi	r25, 0x02	; 2
     cf6:	0e 94 51 08 	call	0x10a2	; 0x10a2 <H_Lcd_WriteString>
     cfa:	ff cf       	rjmp	.-2      	; 0xcfa <__stack+0x49b>
		
		for(Local_u8_Trials ; Local_u8_Trials >=0 ; --Local_u8_Trials)
		{
			Local_u8_ForLoopcounter = 0;
			Local_u8_EEPROMCount = 0;
			for(Local_u8_ForLoopcounter; Local_u8_ForLoopcounter < 255 ; Local_u8_ForLoopcounter++)
     cfc:	1f 5f       	subi	r17, 0xFF	; 255
     cfe:	1f 3f       	cpi	r17, 0xFF	; 255
     d00:	09 f0       	breq	.+2      	; 0xd04 <__stack+0x4a5>
     d02:	8e cf       	rjmp	.-228    	; 0xc20 <__stack+0x3c1>
					break;
				}
			}
			Local_u8_counter = 0;
			Local_u8_ID = 1;
			--Local_u8_Trials;
     d04:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     d08:	81 50       	subi	r24, 0x01	; 1
     d0a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
		}
	}
     d0e:	ee ce       	rjmp	.-548    	; 0xaec <__stack+0x28d>

00000d10 <H_Buzzer_Init>:
     d10:	61 e0       	ldi	r22, 0x01	; 1
     d12:	8d e0       	ldi	r24, 0x0D	; 13
     d14:	0e 94 64 09 	call	0x12c8	; 0x12c8 <M_Dio_PinMode>
     d18:	08 95       	ret

00000d1a <H_Buzzer_On>:
     d1a:	61 e0       	ldi	r22, 0x01	; 1
     d1c:	8d e0       	ldi	r24, 0x0D	; 13
     d1e:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
     d22:	08 95       	ret

00000d24 <EEPROMINT_WriteByte>:
     d24:	e1 99       	sbic	0x1c, 1	; 28
     d26:	fe cf       	rjmp	.-4      	; 0xd24 <EEPROMINT_WriteByte>
     d28:	07 b6       	in	r0, 0x37	; 55
     d2a:	00 fc       	sbrc	r0, 0
     d2c:	fd cf       	rjmp	.-6      	; 0xd28 <EEPROMINT_WriteByte+0x4>
     d2e:	8f 3f       	cpi	r24, 0xFF	; 255
     d30:	91 05       	cpc	r25, r1
     d32:	09 f0       	breq	.+2      	; 0xd36 <EEPROMINT_WriteByte+0x12>
     d34:	10 f4       	brcc	.+4      	; 0xd3a <EEPROMINT_WriteByte+0x16>
     d36:	8e bb       	out	0x1e, r24	; 30
     d38:	04 c0       	rjmp	.+8      	; 0xd42 <EEPROMINT_WriteByte+0x1e>
     d3a:	8e bb       	out	0x1e, r24	; 30
     d3c:	89 2f       	mov	r24, r25
     d3e:	83 70       	andi	r24, 0x03	; 3
     d40:	8f bb       	out	0x1f, r24	; 31
     d42:	6d bb       	out	0x1d, r22	; 29
     d44:	8c b3       	in	r24, 0x1c	; 28
     d46:	84 60       	ori	r24, 0x04	; 4
     d48:	8c bb       	out	0x1c, r24	; 28
     d4a:	8c b3       	in	r24, 0x1c	; 28
     d4c:	82 60       	ori	r24, 0x02	; 2
     d4e:	8c bb       	out	0x1c, r24	; 28
     d50:	e1 99       	sbic	0x1c, 1	; 28
     d52:	fe cf       	rjmp	.-4      	; 0xd50 <EEPROMINT_WriteByte+0x2c>
     d54:	08 95       	ret

00000d56 <EEPROMINT_ReadByte>:
     d56:	e1 99       	sbic	0x1c, 1	; 28
     d58:	fe cf       	rjmp	.-4      	; 0xd56 <EEPROMINT_ReadByte>
     d5a:	8f 3f       	cpi	r24, 0xFF	; 255
     d5c:	91 05       	cpc	r25, r1
     d5e:	09 f0       	breq	.+2      	; 0xd62 <EEPROMINT_ReadByte+0xc>
     d60:	10 f4       	brcc	.+4      	; 0xd66 <EEPROMINT_ReadByte+0x10>
     d62:	8e bb       	out	0x1e, r24	; 30
     d64:	04 c0       	rjmp	.+8      	; 0xd6e <EEPROMINT_ReadByte+0x18>
     d66:	8e bb       	out	0x1e, r24	; 30
     d68:	89 2f       	mov	r24, r25
     d6a:	83 70       	andi	r24, 0x03	; 3
     d6c:	8f bb       	out	0x1f, r24	; 31
     d6e:	8c b3       	in	r24, 0x1c	; 28
     d70:	81 60       	ori	r24, 0x01	; 1
     d72:	8c bb       	out	0x1c, r24	; 28
     d74:	8d b3       	in	r24, 0x1d	; 29
     d76:	08 95       	ret

00000d78 <HC05_Init>:
     d78:	0e 94 93 0c 	call	0x1926	; 0x1926 <UART_Init>
     d7c:	08 95       	ret

00000d7e <HC05_Rx>:
     d7e:	0e 94 a9 0c 	call	0x1952	; 0x1952 <UART_Rx>
     d82:	08 95       	ret

00000d84 <H_H_Bridge_Init>:
     d84:	61 e0       	ldi	r22, 0x01	; 1
     d86:	8c e2       	ldi	r24, 0x2C	; 44
     d88:	0e 94 64 09 	call	0x12c8	; 0x12c8 <M_Dio_PinMode>
     d8c:	61 e0       	ldi	r22, 0x01	; 1
     d8e:	8d e2       	ldi	r24, 0x2D	; 45
     d90:	0e 94 64 09 	call	0x12c8	; 0x12c8 <M_Dio_PinMode>
     d94:	61 e0       	ldi	r22, 0x01	; 1
     d96:	83 e2       	ldi	r24, 0x23	; 35
     d98:	0e 94 64 09 	call	0x12c8	; 0x12c8 <M_Dio_PinMode>
     d9c:	61 e0       	ldi	r22, 0x01	; 1
     d9e:	82 e2       	ldi	r24, 0x22	; 34
     da0:	0e 94 64 09 	call	0x12c8	; 0x12c8 <M_Dio_PinMode>
     da4:	61 e0       	ldi	r22, 0x01	; 1
     da6:	81 e2       	ldi	r24, 0x21	; 33
     da8:	0e 94 64 09 	call	0x12c8	; 0x12c8 <M_Dio_PinMode>
     dac:	61 e0       	ldi	r22, 0x01	; 1
     dae:	84 e2       	ldi	r24, 0x24	; 36
     db0:	0e 94 64 09 	call	0x12c8	; 0x12c8 <M_Dio_PinMode>
     db4:	08 95       	ret

00000db6 <H_H_Bridge_CH1_EN>:
     db6:	61 e0       	ldi	r22, 0x01	; 1
     db8:	8c e2       	ldi	r24, 0x2C	; 44
     dba:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
     dbe:	61 e0       	ldi	r22, 0x01	; 1
     dc0:	83 e2       	ldi	r24, 0x23	; 35
     dc2:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
     dc6:	62 e0       	ldi	r22, 0x02	; 2
     dc8:	82 e2       	ldi	r24, 0x22	; 34
     dca:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
     dce:	08 95       	ret

00000dd0 <H_H_Bridge_CH1_Break>:
     dd0:	62 e0       	ldi	r22, 0x02	; 2
     dd2:	8c e2       	ldi	r24, 0x2C	; 44
     dd4:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
     dd8:	62 e0       	ldi	r22, 0x02	; 2
     dda:	83 e2       	ldi	r24, 0x23	; 35
     ddc:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
     de0:	62 e0       	ldi	r22, 0x02	; 2
     de2:	82 e2       	ldi	r24, 0x22	; 34
     de4:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
     de8:	08 95       	ret

00000dea <H_KeyPad_Init>:
 */ 
#include "KeyPad.h"

void H_KeyPad_Init(void)
{
	M_Dio_PinMode(KEYPAD_R0_PIN,OUTPUT);
     dea:	61 e0       	ldi	r22, 0x01	; 1
     dec:	88 e1       	ldi	r24, 0x18	; 24
     dee:	0e 94 64 09 	call	0x12c8	; 0x12c8 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R1_PIN,OUTPUT);
     df2:	61 e0       	ldi	r22, 0x01	; 1
     df4:	89 e1       	ldi	r24, 0x19	; 25
     df6:	0e 94 64 09 	call	0x12c8	; 0x12c8 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R2_PIN,OUTPUT);
     dfa:	61 e0       	ldi	r22, 0x01	; 1
     dfc:	8a e1       	ldi	r24, 0x1A	; 26
     dfe:	0e 94 64 09 	call	0x12c8	; 0x12c8 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R3_PIN,OUTPUT);
     e02:	61 e0       	ldi	r22, 0x01	; 1
     e04:	8b e1       	ldi	r24, 0x1B	; 27
     e06:	0e 94 64 09 	call	0x12c8	; 0x12c8 <M_Dio_PinMode>
	
	M_Dio_PinMode(KEYPAD_C0_PIN,INPUT);
     e0a:	62 e0       	ldi	r22, 0x02	; 2
     e0c:	8e e1       	ldi	r24, 0x1E	; 30
     e0e:	0e 94 64 09 	call	0x12c8	; 0x12c8 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C1_PIN,INPUT);
     e12:	62 e0       	ldi	r22, 0x02	; 2
     e14:	8f e1       	ldi	r24, 0x1F	; 31
     e16:	0e 94 64 09 	call	0x12c8	; 0x12c8 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C2_PIN,INPUT);
     e1a:	62 e0       	ldi	r22, 0x02	; 2
     e1c:	80 e2       	ldi	r24, 0x20	; 32
     e1e:	0e 94 64 09 	call	0x12c8	; 0x12c8 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C3_PIN,INPUT);
     e22:	62 e0       	ldi	r22, 0x02	; 2
     e24:	81 e2       	ldi	r24, 0x21	; 33
     e26:	0e 94 64 09 	call	0x12c8	; 0x12c8 <M_Dio_PinMode>
	
	M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH);
     e2a:	61 e0       	ldi	r22, 0x01	; 1
     e2c:	88 e1       	ldi	r24, 0x18	; 24
     e2e:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH);
     e32:	61 e0       	ldi	r22, 0x01	; 1
     e34:	89 e1       	ldi	r24, 0x19	; 25
     e36:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH);
     e3a:	61 e0       	ldi	r22, 0x01	; 1
     e3c:	8a e1       	ldi	r24, 0x1A	; 26
     e3e:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH);
     e42:	61 e0       	ldi	r22, 0x01	; 1
     e44:	8b e1       	ldi	r24, 0x1B	; 27
     e46:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
	
	M_Dio_PinPullRes(KEYPAD_C0_PIN,ENABLE);
     e4a:	61 e0       	ldi	r22, 0x01	; 1
     e4c:	8e e1       	ldi	r24, 0x1E	; 30
     e4e:	0e 94 ed 09 	call	0x13da	; 0x13da <M_Dio_PinPullRes>
	M_Dio_PinPullRes(KEYPAD_C1_PIN,ENABLE);
     e52:	61 e0       	ldi	r22, 0x01	; 1
     e54:	8f e1       	ldi	r24, 0x1F	; 31
     e56:	0e 94 ed 09 	call	0x13da	; 0x13da <M_Dio_PinPullRes>
	M_Dio_PinPullRes(KEYPAD_C2_PIN,ENABLE);
     e5a:	61 e0       	ldi	r22, 0x01	; 1
     e5c:	80 e2       	ldi	r24, 0x20	; 32
     e5e:	0e 94 ed 09 	call	0x13da	; 0x13da <M_Dio_PinPullRes>
	M_Dio_PinPullRes(KEYPAD_C3_PIN,ENABLE);
     e62:	61 e0       	ldi	r22, 0x01	; 1
     e64:	81 e2       	ldi	r24, 0x21	; 33
     e66:	0e 94 ed 09 	call	0x13da	; 0x13da <M_Dio_PinPullRes>
     e6a:	08 95       	ret

00000e6c <H_KeyPad_Read>:


}
u8 H_KeyPad_Read(void)
{
     e6c:	ff 92       	push	r15
     e6e:	0f 93       	push	r16
     e70:	1f 93       	push	r17
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
     e7a:	60 97       	sbiw	r28, 0x10	; 16
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	f8 94       	cli
     e80:	de bf       	out	0x3e, r29	; 62
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8_Arr[4][4]={{'1','2','3','A'},
     e86:	80 e1       	ldi	r24, 0x10	; 16
     e88:	e1 e6       	ldi	r30, 0x61	; 97
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	de 01       	movw	r26, r28
     e8e:	11 96       	adiw	r26, 0x01	; 1
     e90:	01 90       	ld	r0, Z+
     e92:	0d 92       	st	X+, r0
     e94:	8a 95       	dec	r24
     e96:	e1 f7       	brne	.-8      	; 0xe90 <H_KeyPad_Read+0x24>
		                   {'*','0','=','D'}};
	u8 Local_u8_Reading = KEYPAD_RELEASED ;
	u8 Local_u8_Value = 0 ;
	u8 Local_u8_Row = 0 ;
	u8 Local_u8_Col = 0 ;
	for(Local_u8_Row=KEYPAD_R0_PIN;Local_u8_Row<=KEYPAD_R3_PIN;Local_u8_Row++)
     e98:	08 e1       	ldi	r16, 0x18	; 24
	u8 Local_u8_Arr[4][4]={{'1','2','3','A'},
		                   {'4','5','6','B'},
		                   {'7','8','9','C'},
		                   {'*','0','=','D'}};
	u8 Local_u8_Reading = KEYPAD_RELEASED ;
	u8 Local_u8_Value = 0 ;
     e9a:	f1 2c       	mov	r15, r1
	u8 Local_u8_Row = 0 ;
	u8 Local_u8_Col = 0 ;
	for(Local_u8_Row=KEYPAD_R0_PIN;Local_u8_Row<=KEYPAD_R3_PIN;Local_u8_Row++)
     e9c:	3b c0       	rjmp	.+118    	; 0xf14 <H_KeyPad_Read+0xa8>
	{
		M_Dio_PinWrite(Local_u8_Row,LOW);
     e9e:	62 e0       	ldi	r22, 0x02	; 2
     ea0:	80 2f       	mov	r24, r16
     ea2:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
		for(Local_u8_Col = KEYPAD_C0_PIN;Local_u8_Col<=KEYPAD_C3_PIN;Local_u8_Col++)
     ea6:	1e e1       	ldi	r17, 0x1E	; 30
     ea8:	2e c0       	rjmp	.+92     	; 0xf06 <H_KeyPad_Read+0x9a>
		{
			Local_u8_Reading= M_Dio_PinRead(Local_u8_Col);
     eaa:	81 2f       	mov	r24, r17
     eac:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <M_Dio_PinRead>
			if(Local_u8_Reading == KEYPAD_PRESSED)
     eb0:	81 11       	cpse	r24, r1
     eb2:	28 c0       	rjmp	.+80     	; 0xf04 <H_KeyPad_Read+0x98>
     eb4:	2f ef       	ldi	r18, 0xFF	; 255
     eb6:	40 e7       	ldi	r20, 0x70	; 112
     eb8:	52 e0       	ldi	r21, 0x02	; 2
     eba:	21 50       	subi	r18, 0x01	; 1
     ebc:	40 40       	sbci	r20, 0x00	; 0
     ebe:	50 40       	sbci	r21, 0x00	; 0
     ec0:	e1 f7       	brne	.-8      	; 0xeba <H_KeyPad_Read+0x4e>
     ec2:	00 c0       	rjmp	.+0      	; 0xec4 <H_KeyPad_Read+0x58>
     ec4:	00 00       	nop
			{
				_delay_ms(KEYPAD_DEBOUNCING_TIME);
				if(M_Dio_PinRead(Local_u8_Col) == KEYPAD_PRESSED)
     ec6:	81 2f       	mov	r24, r17
     ec8:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <M_Dio_PinRead>
     ecc:	81 11       	cpse	r24, r1
     ece:	1a c0       	rjmp	.+52     	; 0xf04 <H_KeyPad_Read+0x98>
				{
					while(M_Dio_PinRead(Local_u8_Col) == KEYPAD_PRESSED);//remove it if u want it to write reapidly
     ed0:	81 2f       	mov	r24, r17
     ed2:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <M_Dio_PinRead>
     ed6:	88 23       	and	r24, r24
     ed8:	d9 f3       	breq	.-10     	; 0xed0 <H_KeyPad_Read+0x64>
							Local_u8_Value = Local_u8_Arr[Local_u8_Row - KEYPAD_R0_PIN][Local_u8_Col - KEYPAD_C0_PIN];
     eda:	80 2f       	mov	r24, r16
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	48 97       	sbiw	r24, 0x18	; 24
     ee0:	21 2f       	mov	r18, r17
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	2e 51       	subi	r18, 0x1E	; 30
     ee6:	31 09       	sbc	r19, r1
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	41 e0       	ldi	r20, 0x01	; 1
     ef2:	50 e0       	ldi	r21, 0x00	; 0
     ef4:	4c 0f       	add	r20, r28
     ef6:	5d 1f       	adc	r21, r29
     ef8:	84 0f       	add	r24, r20
     efa:	95 1f       	adc	r25, r21
     efc:	fc 01       	movw	r30, r24
     efe:	e2 0f       	add	r30, r18
     f00:	f3 1f       	adc	r31, r19
     f02:	f0 80       	ld	r15, Z
	u8 Local_u8_Row = 0 ;
	u8 Local_u8_Col = 0 ;
	for(Local_u8_Row=KEYPAD_R0_PIN;Local_u8_Row<=KEYPAD_R3_PIN;Local_u8_Row++)
	{
		M_Dio_PinWrite(Local_u8_Row,LOW);
		for(Local_u8_Col = KEYPAD_C0_PIN;Local_u8_Col<=KEYPAD_C3_PIN;Local_u8_Col++)
     f04:	1f 5f       	subi	r17, 0xFF	; 255
     f06:	12 32       	cpi	r17, 0x22	; 34
     f08:	80 f2       	brcs	.-96     	; 0xeaa <H_KeyPad_Read+0x3e>
				
			}

		}

		M_Dio_PinWrite(Local_u8_Row,HIGH);
     f0a:	61 e0       	ldi	r22, 0x01	; 1
     f0c:	80 2f       	mov	r24, r16
     f0e:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
		                   {'*','0','=','D'}};
	u8 Local_u8_Reading = KEYPAD_RELEASED ;
	u8 Local_u8_Value = 0 ;
	u8 Local_u8_Row = 0 ;
	u8 Local_u8_Col = 0 ;
	for(Local_u8_Row=KEYPAD_R0_PIN;Local_u8_Row<=KEYPAD_R3_PIN;Local_u8_Row++)
     f12:	0f 5f       	subi	r16, 0xFF	; 255
     f14:	0c 31       	cpi	r16, 0x1C	; 28
     f16:	18 f2       	brcs	.-122    	; 0xe9e <H_KeyPad_Read+0x32>

		M_Dio_PinWrite(Local_u8_Row,HIGH);
	}
	
	return Local_u8_Value;  // if the user click return 0 otherwise return 1
     f18:	8f 2d       	mov	r24, r15
     f1a:	60 96       	adiw	r28, 0x10	; 16
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	f8 94       	cli
     f20:	de bf       	out	0x3e, r29	; 62
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	cd bf       	out	0x3d, r28	; 61
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	1f 91       	pop	r17
     f2c:	0f 91       	pop	r16
     f2e:	ff 90       	pop	r15
     f30:	08 95       	ret

00000f32 <H_Lcd_WriteCharacter>:
     f32:	cf 93       	push	r28
     f34:	c8 2f       	mov	r28, r24
     f36:	61 e0       	ldi	r22, 0x01	; 1
     f38:	85 e1       	ldi	r24, 0x15	; 21
     f3a:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
     f3e:	8b b3       	in	r24, 0x1b	; 27
     f40:	9c 2f       	mov	r25, r28
     f42:	90 7f       	andi	r25, 0xF0	; 240
     f44:	8f 70       	andi	r24, 0x0F	; 15
     f46:	89 2b       	or	r24, r25
     f48:	8b bb       	out	0x1b, r24	; 27
     f4a:	61 e0       	ldi	r22, 0x01	; 1
     f4c:	8e e2       	ldi	r24, 0x2E	; 46
     f4e:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
     f52:	8f e9       	ldi	r24, 0x9F	; 159
     f54:	9f e0       	ldi	r25, 0x0F	; 15
     f56:	01 97       	sbiw	r24, 0x01	; 1
     f58:	f1 f7       	brne	.-4      	; 0xf56 <H_Lcd_WriteCharacter+0x24>
     f5a:	00 c0       	rjmp	.+0      	; 0xf5c <H_Lcd_WriteCharacter+0x2a>
     f5c:	00 00       	nop
     f5e:	62 e0       	ldi	r22, 0x02	; 2
     f60:	8e e2       	ldi	r24, 0x2E	; 46
     f62:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
     f66:	8f e1       	ldi	r24, 0x1F	; 31
     f68:	9e e4       	ldi	r25, 0x4E	; 78
     f6a:	01 97       	sbiw	r24, 0x01	; 1
     f6c:	f1 f7       	brne	.-4      	; 0xf6a <H_Lcd_WriteCharacter+0x38>
     f6e:	00 c0       	rjmp	.+0      	; 0xf70 <H_Lcd_WriteCharacter+0x3e>
     f70:	00 00       	nop
     f72:	20 e1       	ldi	r18, 0x10	; 16
     f74:	c2 9f       	mul	r28, r18
     f76:	c0 01       	movw	r24, r0
     f78:	11 24       	eor	r1, r1
     f7a:	9b b3       	in	r25, 0x1b	; 27
     f7c:	9f 70       	andi	r25, 0x0F	; 15
     f7e:	89 2b       	or	r24, r25
     f80:	8b bb       	out	0x1b, r24	; 27
     f82:	61 e0       	ldi	r22, 0x01	; 1
     f84:	8e e2       	ldi	r24, 0x2E	; 46
     f86:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
     f8a:	8f e9       	ldi	r24, 0x9F	; 159
     f8c:	9f e0       	ldi	r25, 0x0F	; 15
     f8e:	01 97       	sbiw	r24, 0x01	; 1
     f90:	f1 f7       	brne	.-4      	; 0xf8e <H_Lcd_WriteCharacter+0x5c>
     f92:	00 c0       	rjmp	.+0      	; 0xf94 <H_Lcd_WriteCharacter+0x62>
     f94:	00 00       	nop
     f96:	62 e0       	ldi	r22, 0x02	; 2
     f98:	8e e2       	ldi	r24, 0x2E	; 46
     f9a:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
     f9e:	8f e1       	ldi	r24, 0x1F	; 31
     fa0:	9e e4       	ldi	r25, 0x4E	; 78
     fa2:	01 97       	sbiw	r24, 0x01	; 1
     fa4:	f1 f7       	brne	.-4      	; 0xfa2 <H_Lcd_WriteCharacter+0x70>
     fa6:	00 c0       	rjmp	.+0      	; 0xfa8 <H_Lcd_WriteCharacter+0x76>
     fa8:	00 00       	nop
     faa:	cf 91       	pop	r28
     fac:	08 95       	ret

00000fae <H_Lcd_WriteCommand>:
     fae:	cf 93       	push	r28
     fb0:	c8 2f       	mov	r28, r24
     fb2:	62 e0       	ldi	r22, 0x02	; 2
     fb4:	85 e1       	ldi	r24, 0x15	; 21
     fb6:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
     fba:	8b b3       	in	r24, 0x1b	; 27
     fbc:	9c 2f       	mov	r25, r28
     fbe:	90 7f       	andi	r25, 0xF0	; 240
     fc0:	8f 70       	andi	r24, 0x0F	; 15
     fc2:	89 2b       	or	r24, r25
     fc4:	8b bb       	out	0x1b, r24	; 27
     fc6:	61 e0       	ldi	r22, 0x01	; 1
     fc8:	8e e2       	ldi	r24, 0x2E	; 46
     fca:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
     fce:	8f e9       	ldi	r24, 0x9F	; 159
     fd0:	9f e0       	ldi	r25, 0x0F	; 15
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	f1 f7       	brne	.-4      	; 0xfd2 <H_Lcd_WriteCommand+0x24>
     fd6:	00 c0       	rjmp	.+0      	; 0xfd8 <H_Lcd_WriteCommand+0x2a>
     fd8:	00 00       	nop
     fda:	62 e0       	ldi	r22, 0x02	; 2
     fdc:	8e e2       	ldi	r24, 0x2E	; 46
     fde:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
     fe2:	8f e1       	ldi	r24, 0x1F	; 31
     fe4:	9e e4       	ldi	r25, 0x4E	; 78
     fe6:	01 97       	sbiw	r24, 0x01	; 1
     fe8:	f1 f7       	brne	.-4      	; 0xfe6 <H_Lcd_WriteCommand+0x38>
     fea:	00 c0       	rjmp	.+0      	; 0xfec <H_Lcd_WriteCommand+0x3e>
     fec:	00 00       	nop
     fee:	20 e1       	ldi	r18, 0x10	; 16
     ff0:	c2 9f       	mul	r28, r18
     ff2:	c0 01       	movw	r24, r0
     ff4:	11 24       	eor	r1, r1
     ff6:	9b b3       	in	r25, 0x1b	; 27
     ff8:	9f 70       	andi	r25, 0x0F	; 15
     ffa:	89 2b       	or	r24, r25
     ffc:	8b bb       	out	0x1b, r24	; 27
     ffe:	61 e0       	ldi	r22, 0x01	; 1
    1000:	8e e2       	ldi	r24, 0x2E	; 46
    1002:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
    1006:	8f e9       	ldi	r24, 0x9F	; 159
    1008:	9f e0       	ldi	r25, 0x0F	; 15
    100a:	01 97       	sbiw	r24, 0x01	; 1
    100c:	f1 f7       	brne	.-4      	; 0x100a <H_Lcd_WriteCommand+0x5c>
    100e:	00 c0       	rjmp	.+0      	; 0x1010 <H_Lcd_WriteCommand+0x62>
    1010:	00 00       	nop
    1012:	62 e0       	ldi	r22, 0x02	; 2
    1014:	8e e2       	ldi	r24, 0x2E	; 46
    1016:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
    101a:	8f e1       	ldi	r24, 0x1F	; 31
    101c:	9e e4       	ldi	r25, 0x4E	; 78
    101e:	01 97       	sbiw	r24, 0x01	; 1
    1020:	f1 f7       	brne	.-4      	; 0x101e <H_Lcd_WriteCommand+0x70>
    1022:	00 c0       	rjmp	.+0      	; 0x1024 <H_Lcd_WriteCommand+0x76>
    1024:	00 00       	nop
    1026:	cf 91       	pop	r28
    1028:	08 95       	ret

0000102a <H_Lcd_Init>:
    102a:	61 e0       	ldi	r22, 0x01	; 1
    102c:	8e e0       	ldi	r24, 0x0E	; 14
    102e:	0e 94 64 09 	call	0x12c8	; 0x12c8 <M_Dio_PinMode>
    1032:	61 e0       	ldi	r22, 0x01	; 1
    1034:	8f e0       	ldi	r24, 0x0F	; 15
    1036:	0e 94 64 09 	call	0x12c8	; 0x12c8 <M_Dio_PinMode>
    103a:	61 e0       	ldi	r22, 0x01	; 1
    103c:	80 e1       	ldi	r24, 0x10	; 16
    103e:	0e 94 64 09 	call	0x12c8	; 0x12c8 <M_Dio_PinMode>
    1042:	61 e0       	ldi	r22, 0x01	; 1
    1044:	81 e1       	ldi	r24, 0x11	; 17
    1046:	0e 94 64 09 	call	0x12c8	; 0x12c8 <M_Dio_PinMode>
    104a:	61 e0       	ldi	r22, 0x01	; 1
    104c:	85 e1       	ldi	r24, 0x15	; 21
    104e:	0e 94 64 09 	call	0x12c8	; 0x12c8 <M_Dio_PinMode>
    1052:	61 e0       	ldi	r22, 0x01	; 1
    1054:	8e e2       	ldi	r24, 0x2E	; 46
    1056:	0e 94 64 09 	call	0x12c8	; 0x12c8 <M_Dio_PinMode>
    105a:	61 e0       	ldi	r22, 0x01	; 1
    105c:	86 e1       	ldi	r24, 0x16	; 22
    105e:	0e 94 64 09 	call	0x12c8	; 0x12c8 <M_Dio_PinMode>
    1062:	62 e0       	ldi	r22, 0x02	; 2
    1064:	86 e1       	ldi	r24, 0x16	; 22
    1066:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
    106a:	2f ef       	ldi	r18, 0xFF	; 255
    106c:	83 ed       	ldi	r24, 0xD3	; 211
    106e:	90 e3       	ldi	r25, 0x30	; 48
    1070:	21 50       	subi	r18, 0x01	; 1
    1072:	80 40       	sbci	r24, 0x00	; 0
    1074:	90 40       	sbci	r25, 0x00	; 0
    1076:	e1 f7       	brne	.-8      	; 0x1070 <H_Lcd_Init+0x46>
    1078:	00 c0       	rjmp	.+0      	; 0x107a <H_Lcd_Init+0x50>
    107a:	00 00       	nop
    107c:	83 e3       	ldi	r24, 0x33	; 51
    107e:	0e 94 d7 07 	call	0xfae	; 0xfae <H_Lcd_WriteCommand>
    1082:	82 e3       	ldi	r24, 0x32	; 50
    1084:	0e 94 d7 07 	call	0xfae	; 0xfae <H_Lcd_WriteCommand>
    1088:	88 e2       	ldi	r24, 0x28	; 40
    108a:	0e 94 d7 07 	call	0xfae	; 0xfae <H_Lcd_WriteCommand>
    108e:	8c e0       	ldi	r24, 0x0C	; 12
    1090:	0e 94 d7 07 	call	0xfae	; 0xfae <H_Lcd_WriteCommand>
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	0e 94 d7 07 	call	0xfae	; 0xfae <H_Lcd_WriteCommand>
    109a:	82 e0       	ldi	r24, 0x02	; 2
    109c:	0e 94 d7 07 	call	0xfae	; 0xfae <H_Lcd_WriteCommand>
    10a0:	08 95       	ret

000010a2 <H_Lcd_WriteString>:
    10a2:	0f 93       	push	r16
    10a4:	1f 93       	push	r17
    10a6:	cf 93       	push	r28
    10a8:	8c 01       	movw	r16, r24
    10aa:	c0 e0       	ldi	r28, 0x00	; 0
    10ac:	03 c0       	rjmp	.+6      	; 0x10b4 <H_Lcd_WriteString+0x12>
    10ae:	0e 94 99 07 	call	0xf32	; 0xf32 <H_Lcd_WriteCharacter>
    10b2:	cf 5f       	subi	r28, 0xFF	; 255
    10b4:	f8 01       	movw	r30, r16
    10b6:	ec 0f       	add	r30, r28
    10b8:	f1 1d       	adc	r31, r1
    10ba:	80 81       	ld	r24, Z
    10bc:	81 11       	cpse	r24, r1
    10be:	f7 cf       	rjmp	.-18     	; 0x10ae <H_Lcd_WriteString+0xc>
    10c0:	cf 91       	pop	r28
    10c2:	1f 91       	pop	r17
    10c4:	0f 91       	pop	r16
    10c6:	08 95       	ret

000010c8 <H_Lcd_Clr>:
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	0e 94 d7 07 	call	0xfae	; 0xfae <H_Lcd_WriteCommand>
    10ce:	08 95       	ret

000010d0 <H_Lcd_GoTo>:
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	00 d0       	rcall	.+0      	; 0x10d6 <H_Lcd_GoTo+0x6>
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	90 e8       	ldi	r25, 0x80	; 128
    10dc:	99 83       	std	Y+1, r25	; 0x01
    10de:	90 ec       	ldi	r25, 0xC0	; 192
    10e0:	9a 83       	std	Y+2, r25	; 0x02
    10e2:	e1 e0       	ldi	r30, 0x01	; 1
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	ec 0f       	add	r30, r28
    10e8:	fd 1f       	adc	r31, r29
    10ea:	e8 0f       	add	r30, r24
    10ec:	f1 1d       	adc	r31, r1
    10ee:	80 81       	ld	r24, Z
    10f0:	86 0f       	add	r24, r22
    10f2:	0e 94 d7 07 	call	0xfae	; 0xfae <H_Lcd_WriteCommand>
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	08 95       	ret

00001100 <H_Led_Init>:
    1100:	82 30       	cpi	r24, 0x02	; 2
    1102:	a9 f0       	breq	.+42     	; 0x112e <H_Led_Init+0x2e>
    1104:	28 f4       	brcc	.+10     	; 0x1110 <H_Led_Init+0x10>
    1106:	88 23       	and	r24, r24
    1108:	41 f0       	breq	.+16     	; 0x111a <H_Led_Init+0x1a>
    110a:	81 30       	cpi	r24, 0x01	; 1
    110c:	59 f0       	breq	.+22     	; 0x1124 <H_Led_Init+0x24>
    110e:	08 95       	ret
    1110:	83 30       	cpi	r24, 0x03	; 3
    1112:	91 f0       	breq	.+36     	; 0x1138 <H_Led_Init+0x38>
    1114:	84 30       	cpi	r24, 0x04	; 4
    1116:	a9 f0       	breq	.+42     	; 0x1142 <H_Led_Init+0x42>
    1118:	08 95       	ret
    111a:	61 e0       	ldi	r22, 0x01	; 1
    111c:	84 e2       	ldi	r24, 0x24	; 36
    111e:	0e 94 64 09 	call	0x12c8	; 0x12c8 <M_Dio_PinMode>
    1122:	08 95       	ret
    1124:	61 e0       	ldi	r22, 0x01	; 1
    1126:	85 e2       	ldi	r24, 0x25	; 37
    1128:	0e 94 64 09 	call	0x12c8	; 0x12c8 <M_Dio_PinMode>
    112c:	08 95       	ret
    112e:	61 e0       	ldi	r22, 0x01	; 1
    1130:	8b e2       	ldi	r24, 0x2B	; 43
    1132:	0e 94 64 09 	call	0x12c8	; 0x12c8 <M_Dio_PinMode>
    1136:	08 95       	ret
    1138:	61 e0       	ldi	r22, 0x01	; 1
    113a:	84 e1       	ldi	r24, 0x14	; 20
    113c:	0e 94 64 09 	call	0x12c8	; 0x12c8 <M_Dio_PinMode>
    1140:	08 95       	ret
    1142:	61 e0       	ldi	r22, 0x01	; 1
    1144:	8d e2       	ldi	r24, 0x2D	; 45
    1146:	0e 94 64 09 	call	0x12c8	; 0x12c8 <M_Dio_PinMode>
    114a:	08 95       	ret

0000114c <H_Led_On>:
    114c:	82 30       	cpi	r24, 0x02	; 2
    114e:	a9 f0       	breq	.+42     	; 0x117a <H_Led_On+0x2e>
    1150:	28 f4       	brcc	.+10     	; 0x115c <H_Led_On+0x10>
    1152:	88 23       	and	r24, r24
    1154:	41 f0       	breq	.+16     	; 0x1166 <H_Led_On+0x1a>
    1156:	81 30       	cpi	r24, 0x01	; 1
    1158:	59 f0       	breq	.+22     	; 0x1170 <H_Led_On+0x24>
    115a:	08 95       	ret
    115c:	83 30       	cpi	r24, 0x03	; 3
    115e:	91 f0       	breq	.+36     	; 0x1184 <H_Led_On+0x38>
    1160:	84 30       	cpi	r24, 0x04	; 4
    1162:	a9 f0       	breq	.+42     	; 0x118e <H_Led_On+0x42>
    1164:	08 95       	ret
    1166:	61 e0       	ldi	r22, 0x01	; 1
    1168:	84 e2       	ldi	r24, 0x24	; 36
    116a:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
    116e:	08 95       	ret
    1170:	61 e0       	ldi	r22, 0x01	; 1
    1172:	85 e2       	ldi	r24, 0x25	; 37
    1174:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
    1178:	08 95       	ret
    117a:	61 e0       	ldi	r22, 0x01	; 1
    117c:	8b e2       	ldi	r24, 0x2B	; 43
    117e:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
    1182:	08 95       	ret
    1184:	61 e0       	ldi	r22, 0x01	; 1
    1186:	84 e1       	ldi	r24, 0x14	; 20
    1188:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
    118c:	08 95       	ret
    118e:	61 e0       	ldi	r22, 0x01	; 1
    1190:	8d e2       	ldi	r24, 0x2D	; 45
    1192:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
    1196:	08 95       	ret

00001198 <H_Led_Off>:
    1198:	82 30       	cpi	r24, 0x02	; 2
    119a:	a9 f0       	breq	.+42     	; 0x11c6 <H_Led_Off+0x2e>
    119c:	28 f4       	brcc	.+10     	; 0x11a8 <H_Led_Off+0x10>
    119e:	88 23       	and	r24, r24
    11a0:	41 f0       	breq	.+16     	; 0x11b2 <H_Led_Off+0x1a>
    11a2:	81 30       	cpi	r24, 0x01	; 1
    11a4:	59 f0       	breq	.+22     	; 0x11bc <H_Led_Off+0x24>
    11a6:	08 95       	ret
    11a8:	83 30       	cpi	r24, 0x03	; 3
    11aa:	91 f0       	breq	.+36     	; 0x11d0 <H_Led_Off+0x38>
    11ac:	84 30       	cpi	r24, 0x04	; 4
    11ae:	a9 f0       	breq	.+42     	; 0x11da <H_Led_Off+0x42>
    11b0:	08 95       	ret
    11b2:	62 e0       	ldi	r22, 0x02	; 2
    11b4:	84 e2       	ldi	r24, 0x24	; 36
    11b6:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
    11ba:	08 95       	ret
    11bc:	62 e0       	ldi	r22, 0x02	; 2
    11be:	85 e2       	ldi	r24, 0x25	; 37
    11c0:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
    11c4:	08 95       	ret
    11c6:	62 e0       	ldi	r22, 0x02	; 2
    11c8:	8b e2       	ldi	r24, 0x2B	; 43
    11ca:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
    11ce:	08 95       	ret
    11d0:	62 e0       	ldi	r22, 0x02	; 2
    11d2:	84 e1       	ldi	r24, 0x14	; 20
    11d4:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
    11d8:	08 95       	ret
    11da:	62 e0       	ldi	r22, 0x02	; 2
    11dc:	8d e2       	ldi	r24, 0x2D	; 45
    11de:	0e 94 76 0a 	call	0x14ec	; 0x14ec <M_Dio_PinWrite>
    11e2:	08 95       	ret

000011e4 <M_ADC_INIT>:
    11e4:	87 b1       	in	r24, 0x07	; 7
    11e6:	8f 77       	andi	r24, 0x7F	; 127
    11e8:	87 b9       	out	0x07, r24	; 7
    11ea:	87 b1       	in	r24, 0x07	; 7
    11ec:	80 64       	ori	r24, 0x40	; 64
    11ee:	87 b9       	out	0x07, r24	; 7
    11f0:	87 b1       	in	r24, 0x07	; 7
    11f2:	8f 7d       	andi	r24, 0xDF	; 223
    11f4:	87 b9       	out	0x07, r24	; 7
    11f6:	86 b1       	in	r24, 0x06	; 6
    11f8:	88 7f       	andi	r24, 0xF8	; 248
    11fa:	86 b9       	out	0x06, r24	; 6
    11fc:	86 b1       	in	r24, 0x06	; 6
    11fe:	87 60       	ori	r24, 0x07	; 7
    1200:	86 b9       	out	0x06, r24	; 6
    1202:	86 b1       	in	r24, 0x06	; 6
    1204:	80 68       	ori	r24, 0x80	; 128
    1206:	86 b9       	out	0x06, r24	; 6
    1208:	08 95       	ret

0000120a <M_ADC_StartConversionAsynch>:
    120a:	61 15       	cp	r22, r1
    120c:	71 05       	cpc	r23, r1
    120e:	01 f1       	breq	.+64     	; 0x1250 <M_ADC_StartConversionAsynch+0x46>
    1210:	41 15       	cp	r20, r1
    1212:	51 05       	cpc	r21, r1
    1214:	f9 f0       	breq	.+62     	; 0x1254 <M_ADC_StartConversionAsynch+0x4a>
    1216:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <Global_ADCBusyFlag>
    121a:	91 11       	cpse	r25, r1
    121c:	1d c0       	rjmp	.+58     	; 0x1258 <M_ADC_StartConversionAsynch+0x4e>
    121e:	91 e0       	ldi	r25, 0x01	; 1
    1220:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <Global_ADCBusyFlag>
    1224:	70 93 05 03 	sts	0x0305, r23	; 0x800305 <Global_PointerResult+0x1>
    1228:	60 93 04 03 	sts	0x0304, r22	; 0x800304 <Global_PointerResult>
    122c:	50 93 03 03 	sts	0x0303, r21	; 0x800303 <Global_NotificationFunc+0x1>
    1230:	40 93 02 03 	sts	0x0302, r20	; 0x800302 <Global_NotificationFunc>
    1234:	97 b1       	in	r25, 0x07	; 7
    1236:	90 7e       	andi	r25, 0xE0	; 224
    1238:	97 b9       	out	0x07, r25	; 7
    123a:	97 b1       	in	r25, 0x07	; 7
    123c:	89 2b       	or	r24, r25
    123e:	87 b9       	out	0x07, r24	; 7
    1240:	86 b1       	in	r24, 0x06	; 6
    1242:	80 64       	ori	r24, 0x40	; 64
    1244:	86 b9       	out	0x06, r24	; 6
    1246:	86 b1       	in	r24, 0x06	; 6
    1248:	88 60       	ori	r24, 0x08	; 8
    124a:	86 b9       	out	0x06, r24	; 6
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	08 95       	ret
    1250:	83 e0       	ldi	r24, 0x03	; 3
    1252:	08 95       	ret
    1254:	83 e0       	ldi	r24, 0x03	; 3
    1256:	08 95       	ret
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	08 95       	ret

0000125c <__vector_16>:
    125c:	1f 92       	push	r1
    125e:	0f 92       	push	r0
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	0f 92       	push	r0
    1264:	11 24       	eor	r1, r1
    1266:	2f 93       	push	r18
    1268:	3f 93       	push	r19
    126a:	4f 93       	push	r20
    126c:	5f 93       	push	r21
    126e:	6f 93       	push	r22
    1270:	7f 93       	push	r23
    1272:	8f 93       	push	r24
    1274:	9f 93       	push	r25
    1276:	af 93       	push	r26
    1278:	bf 93       	push	r27
    127a:	ef 93       	push	r30
    127c:	ff 93       	push	r31
    127e:	e0 91 04 03 	lds	r30, 0x0304	; 0x800304 <Global_PointerResult>
    1282:	f0 91 05 03 	lds	r31, 0x0305	; 0x800305 <Global_PointerResult+0x1>
    1286:	84 b1       	in	r24, 0x04	; 4
    1288:	95 b1       	in	r25, 0x05	; 5
    128a:	91 83       	std	Z+1, r25	; 0x01
    128c:	80 83       	st	Z, r24
    128e:	86 b1       	in	r24, 0x06	; 6
    1290:	87 7f       	andi	r24, 0xF7	; 247
    1292:	86 b9       	out	0x06, r24	; 6
    1294:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <Global_ADCBusyFlag>
    1298:	e0 91 02 03 	lds	r30, 0x0302	; 0x800302 <Global_NotificationFunc>
    129c:	f0 91 03 03 	lds	r31, 0x0303	; 0x800303 <Global_NotificationFunc+0x1>
    12a0:	30 97       	sbiw	r30, 0x00	; 0
    12a2:	09 f0       	breq	.+2      	; 0x12a6 <__vector_16+0x4a>
    12a4:	09 95       	icall
    12a6:	ff 91       	pop	r31
    12a8:	ef 91       	pop	r30
    12aa:	bf 91       	pop	r27
    12ac:	af 91       	pop	r26
    12ae:	9f 91       	pop	r25
    12b0:	8f 91       	pop	r24
    12b2:	7f 91       	pop	r23
    12b4:	6f 91       	pop	r22
    12b6:	5f 91       	pop	r21
    12b8:	4f 91       	pop	r20
    12ba:	3f 91       	pop	r19
    12bc:	2f 91       	pop	r18
    12be:	0f 90       	pop	r0
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	0f 90       	pop	r0
    12c4:	1f 90       	pop	r1
    12c6:	18 95       	reti

000012c8 <M_Dio_PinMode>:
    12c8:	9d ec       	ldi	r25, 0xCD	; 205
    12ca:	89 9f       	mul	r24, r25
    12cc:	91 2d       	mov	r25, r1
    12ce:	11 24       	eor	r1, r1
    12d0:	29 2f       	mov	r18, r25
    12d2:	26 95       	lsr	r18
    12d4:	26 95       	lsr	r18
    12d6:	26 95       	lsr	r18
    12d8:	22 0f       	add	r18, r18
    12da:	32 2f       	mov	r19, r18
    12dc:	33 0f       	add	r19, r19
    12de:	33 0f       	add	r19, r19
    12e0:	23 0f       	add	r18, r19
    12e2:	82 1b       	sub	r24, r18
    12e4:	28 2f       	mov	r18, r24
    12e6:	96 95       	lsr	r25
    12e8:	96 95       	lsr	r25
    12ea:	96 95       	lsr	r25
    12ec:	61 30       	cpi	r22, 0x01	; 1
    12ee:	19 f0       	breq	.+6      	; 0x12f6 <M_Dio_PinMode+0x2e>
    12f0:	62 30       	cpi	r22, 0x02	; 2
    12f2:	c1 f1       	breq	.+112    	; 0x1364 <M_Dio_PinMode+0x9c>
    12f4:	08 95       	ret
    12f6:	92 30       	cpi	r25, 0x02	; 2
    12f8:	a1 f0       	breq	.+40     	; 0x1322 <M_Dio_PinMode+0x5a>
    12fa:	18 f4       	brcc	.+6      	; 0x1302 <M_Dio_PinMode+0x3a>
    12fc:	91 30       	cpi	r25, 0x01	; 1
    12fe:	31 f0       	breq	.+12     	; 0x130c <M_Dio_PinMode+0x44>
    1300:	08 95       	ret
    1302:	93 30       	cpi	r25, 0x03	; 3
    1304:	c9 f0       	breq	.+50     	; 0x1338 <M_Dio_PinMode+0x70>
    1306:	94 30       	cpi	r25, 0x04	; 4
    1308:	11 f1       	breq	.+68     	; 0x134e <M_Dio_PinMode+0x86>
    130a:	08 95       	ret
    130c:	3a b3       	in	r19, 0x1a	; 26
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <M_Dio_PinMode+0x50>
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	2a 95       	dec	r18
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <M_Dio_PinMode+0x4c>
    131c:	83 2b       	or	r24, r19
    131e:	8a bb       	out	0x1a, r24	; 26
    1320:	08 95       	ret
    1322:	37 b3       	in	r19, 0x17	; 23
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 c0       	rjmp	.+4      	; 0x132e <M_Dio_PinMode+0x66>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	2a 95       	dec	r18
    1330:	e2 f7       	brpl	.-8      	; 0x132a <M_Dio_PinMode+0x62>
    1332:	83 2b       	or	r24, r19
    1334:	87 bb       	out	0x17, r24	; 23
    1336:	08 95       	ret
    1338:	34 b3       	in	r19, 0x14	; 20
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <M_Dio_PinMode+0x7c>
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	2a 95       	dec	r18
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <M_Dio_PinMode+0x78>
    1348:	83 2b       	or	r24, r19
    134a:	84 bb       	out	0x14, r24	; 20
    134c:	08 95       	ret
    134e:	31 b3       	in	r19, 0x11	; 17
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	02 c0       	rjmp	.+4      	; 0x135a <M_Dio_PinMode+0x92>
    1356:	88 0f       	add	r24, r24
    1358:	99 1f       	adc	r25, r25
    135a:	2a 95       	dec	r18
    135c:	e2 f7       	brpl	.-8      	; 0x1356 <M_Dio_PinMode+0x8e>
    135e:	83 2b       	or	r24, r19
    1360:	81 bb       	out	0x11, r24	; 17
    1362:	08 95       	ret
    1364:	92 30       	cpi	r25, 0x02	; 2
    1366:	a9 f0       	breq	.+42     	; 0x1392 <M_Dio_PinMode+0xca>
    1368:	18 f4       	brcc	.+6      	; 0x1370 <M_Dio_PinMode+0xa8>
    136a:	91 30       	cpi	r25, 0x01	; 1
    136c:	31 f0       	breq	.+12     	; 0x137a <M_Dio_PinMode+0xb2>
    136e:	08 95       	ret
    1370:	93 30       	cpi	r25, 0x03	; 3
    1372:	d9 f0       	breq	.+54     	; 0x13aa <M_Dio_PinMode+0xe2>
    1374:	94 30       	cpi	r25, 0x04	; 4
    1376:	29 f1       	breq	.+74     	; 0x13c2 <M_Dio_PinMode+0xfa>
    1378:	08 95       	ret
    137a:	3a b3       	in	r19, 0x1a	; 26
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <M_Dio_PinMode+0xbe>
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	2a 95       	dec	r18
    1388:	e2 f7       	brpl	.-8      	; 0x1382 <M_Dio_PinMode+0xba>
    138a:	80 95       	com	r24
    138c:	83 23       	and	r24, r19
    138e:	8a bb       	out	0x1a, r24	; 26
    1390:	08 95       	ret
    1392:	37 b3       	in	r19, 0x17	; 23
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	02 c0       	rjmp	.+4      	; 0x139e <M_Dio_PinMode+0xd6>
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	2a 95       	dec	r18
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <M_Dio_PinMode+0xd2>
    13a2:	80 95       	com	r24
    13a4:	83 23       	and	r24, r19
    13a6:	87 bb       	out	0x17, r24	; 23
    13a8:	08 95       	ret
    13aa:	34 b3       	in	r19, 0x14	; 20
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <M_Dio_PinMode+0xee>
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	2a 95       	dec	r18
    13b8:	e2 f7       	brpl	.-8      	; 0x13b2 <M_Dio_PinMode+0xea>
    13ba:	80 95       	com	r24
    13bc:	83 23       	and	r24, r19
    13be:	84 bb       	out	0x14, r24	; 20
    13c0:	08 95       	ret
    13c2:	31 b3       	in	r19, 0x11	; 17
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <M_Dio_PinMode+0x106>
    13ca:	88 0f       	add	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	2a 95       	dec	r18
    13d0:	e2 f7       	brpl	.-8      	; 0x13ca <M_Dio_PinMode+0x102>
    13d2:	80 95       	com	r24
    13d4:	83 23       	and	r24, r19
    13d6:	81 bb       	out	0x11, r24	; 17
    13d8:	08 95       	ret

000013da <M_Dio_PinPullRes>:
    13da:	9d ec       	ldi	r25, 0xCD	; 205
    13dc:	89 9f       	mul	r24, r25
    13de:	91 2d       	mov	r25, r1
    13e0:	11 24       	eor	r1, r1
    13e2:	29 2f       	mov	r18, r25
    13e4:	26 95       	lsr	r18
    13e6:	26 95       	lsr	r18
    13e8:	26 95       	lsr	r18
    13ea:	22 0f       	add	r18, r18
    13ec:	32 2f       	mov	r19, r18
    13ee:	33 0f       	add	r19, r19
    13f0:	33 0f       	add	r19, r19
    13f2:	23 0f       	add	r18, r19
    13f4:	82 1b       	sub	r24, r18
    13f6:	28 2f       	mov	r18, r24
    13f8:	96 95       	lsr	r25
    13fa:	96 95       	lsr	r25
    13fc:	96 95       	lsr	r25
    13fe:	61 30       	cpi	r22, 0x01	; 1
    1400:	19 f0       	breq	.+6      	; 0x1408 <M_Dio_PinPullRes+0x2e>
    1402:	62 30       	cpi	r22, 0x02	; 2
    1404:	c1 f1       	breq	.+112    	; 0x1476 <M_Dio_PinPullRes+0x9c>
    1406:	08 95       	ret
    1408:	92 30       	cpi	r25, 0x02	; 2
    140a:	a1 f0       	breq	.+40     	; 0x1434 <M_Dio_PinPullRes+0x5a>
    140c:	18 f4       	brcc	.+6      	; 0x1414 <M_Dio_PinPullRes+0x3a>
    140e:	91 30       	cpi	r25, 0x01	; 1
    1410:	31 f0       	breq	.+12     	; 0x141e <M_Dio_PinPullRes+0x44>
    1412:	08 95       	ret
    1414:	93 30       	cpi	r25, 0x03	; 3
    1416:	c9 f0       	breq	.+50     	; 0x144a <M_Dio_PinPullRes+0x70>
    1418:	94 30       	cpi	r25, 0x04	; 4
    141a:	11 f1       	breq	.+68     	; 0x1460 <M_Dio_PinPullRes+0x86>
    141c:	08 95       	ret
    141e:	3b b3       	in	r19, 0x1b	; 27
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	02 c0       	rjmp	.+4      	; 0x142a <M_Dio_PinPullRes+0x50>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	2a 95       	dec	r18
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <M_Dio_PinPullRes+0x4c>
    142e:	83 2b       	or	r24, r19
    1430:	8b bb       	out	0x1b, r24	; 27
    1432:	08 95       	ret
    1434:	38 b3       	in	r19, 0x18	; 24
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <M_Dio_PinPullRes+0x66>
    143c:	88 0f       	add	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	2a 95       	dec	r18
    1442:	e2 f7       	brpl	.-8      	; 0x143c <M_Dio_PinPullRes+0x62>
    1444:	83 2b       	or	r24, r19
    1446:	88 bb       	out	0x18, r24	; 24
    1448:	08 95       	ret
    144a:	35 b3       	in	r19, 0x15	; 21
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <M_Dio_PinPullRes+0x7c>
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	2a 95       	dec	r18
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <M_Dio_PinPullRes+0x78>
    145a:	83 2b       	or	r24, r19
    145c:	85 bb       	out	0x15, r24	; 21
    145e:	08 95       	ret
    1460:	32 b3       	in	r19, 0x12	; 18
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	02 c0       	rjmp	.+4      	; 0x146c <M_Dio_PinPullRes+0x92>
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	2a 95       	dec	r18
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <M_Dio_PinPullRes+0x8e>
    1470:	83 2b       	or	r24, r19
    1472:	82 bb       	out	0x12, r24	; 18
    1474:	08 95       	ret
    1476:	92 30       	cpi	r25, 0x02	; 2
    1478:	a9 f0       	breq	.+42     	; 0x14a4 <M_Dio_PinPullRes+0xca>
    147a:	18 f4       	brcc	.+6      	; 0x1482 <M_Dio_PinPullRes+0xa8>
    147c:	91 30       	cpi	r25, 0x01	; 1
    147e:	31 f0       	breq	.+12     	; 0x148c <M_Dio_PinPullRes+0xb2>
    1480:	08 95       	ret
    1482:	93 30       	cpi	r25, 0x03	; 3
    1484:	d9 f0       	breq	.+54     	; 0x14bc <M_Dio_PinPullRes+0xe2>
    1486:	94 30       	cpi	r25, 0x04	; 4
    1488:	29 f1       	breq	.+74     	; 0x14d4 <M_Dio_PinPullRes+0xfa>
    148a:	08 95       	ret
    148c:	3b b3       	in	r19, 0x1b	; 27
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <M_Dio_PinPullRes+0xbe>
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	2a 95       	dec	r18
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <M_Dio_PinPullRes+0xba>
    149c:	80 95       	com	r24
    149e:	83 23       	and	r24, r19
    14a0:	8b bb       	out	0x1b, r24	; 27
    14a2:	08 95       	ret
    14a4:	38 b3       	in	r19, 0x18	; 24
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <M_Dio_PinPullRes+0xd6>
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	2a 95       	dec	r18
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <M_Dio_PinPullRes+0xd2>
    14b4:	80 95       	com	r24
    14b6:	83 23       	and	r24, r19
    14b8:	88 bb       	out	0x18, r24	; 24
    14ba:	08 95       	ret
    14bc:	35 b3       	in	r19, 0x15	; 21
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <M_Dio_PinPullRes+0xee>
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	2a 95       	dec	r18
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <M_Dio_PinPullRes+0xea>
    14cc:	80 95       	com	r24
    14ce:	83 23       	and	r24, r19
    14d0:	85 bb       	out	0x15, r24	; 21
    14d2:	08 95       	ret
    14d4:	32 b3       	in	r19, 0x12	; 18
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <M_Dio_PinPullRes+0x106>
    14dc:	88 0f       	add	r24, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	2a 95       	dec	r18
    14e2:	e2 f7       	brpl	.-8      	; 0x14dc <M_Dio_PinPullRes+0x102>
    14e4:	80 95       	com	r24
    14e6:	83 23       	and	r24, r19
    14e8:	82 bb       	out	0x12, r24	; 18
    14ea:	08 95       	ret

000014ec <M_Dio_PinWrite>:
    14ec:	9d ec       	ldi	r25, 0xCD	; 205
    14ee:	89 9f       	mul	r24, r25
    14f0:	91 2d       	mov	r25, r1
    14f2:	11 24       	eor	r1, r1
    14f4:	29 2f       	mov	r18, r25
    14f6:	26 95       	lsr	r18
    14f8:	26 95       	lsr	r18
    14fa:	26 95       	lsr	r18
    14fc:	22 0f       	add	r18, r18
    14fe:	32 2f       	mov	r19, r18
    1500:	33 0f       	add	r19, r19
    1502:	33 0f       	add	r19, r19
    1504:	23 0f       	add	r18, r19
    1506:	82 1b       	sub	r24, r18
    1508:	28 2f       	mov	r18, r24
    150a:	96 95       	lsr	r25
    150c:	96 95       	lsr	r25
    150e:	96 95       	lsr	r25
    1510:	61 30       	cpi	r22, 0x01	; 1
    1512:	19 f0       	breq	.+6      	; 0x151a <M_Dio_PinWrite+0x2e>
    1514:	62 30       	cpi	r22, 0x02	; 2
    1516:	c1 f1       	breq	.+112    	; 0x1588 <M_Dio_PinWrite+0x9c>
    1518:	08 95       	ret
    151a:	92 30       	cpi	r25, 0x02	; 2
    151c:	a1 f0       	breq	.+40     	; 0x1546 <M_Dio_PinWrite+0x5a>
    151e:	18 f4       	brcc	.+6      	; 0x1526 <M_Dio_PinWrite+0x3a>
    1520:	91 30       	cpi	r25, 0x01	; 1
    1522:	31 f0       	breq	.+12     	; 0x1530 <M_Dio_PinWrite+0x44>
    1524:	08 95       	ret
    1526:	93 30       	cpi	r25, 0x03	; 3
    1528:	c9 f0       	breq	.+50     	; 0x155c <M_Dio_PinWrite+0x70>
    152a:	94 30       	cpi	r25, 0x04	; 4
    152c:	11 f1       	breq	.+68     	; 0x1572 <M_Dio_PinWrite+0x86>
    152e:	08 95       	ret
    1530:	3b b3       	in	r19, 0x1b	; 27
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	02 c0       	rjmp	.+4      	; 0x153c <M_Dio_PinWrite+0x50>
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	2a 95       	dec	r18
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <M_Dio_PinWrite+0x4c>
    1540:	83 2b       	or	r24, r19
    1542:	8b bb       	out	0x1b, r24	; 27
    1544:	08 95       	ret
    1546:	38 b3       	in	r19, 0x18	; 24
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <M_Dio_PinWrite+0x66>
    154e:	88 0f       	add	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	2a 95       	dec	r18
    1554:	e2 f7       	brpl	.-8      	; 0x154e <M_Dio_PinWrite+0x62>
    1556:	83 2b       	or	r24, r19
    1558:	88 bb       	out	0x18, r24	; 24
    155a:	08 95       	ret
    155c:	35 b3       	in	r19, 0x15	; 21
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <M_Dio_PinWrite+0x7c>
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	2a 95       	dec	r18
    156a:	e2 f7       	brpl	.-8      	; 0x1564 <M_Dio_PinWrite+0x78>
    156c:	83 2b       	or	r24, r19
    156e:	85 bb       	out	0x15, r24	; 21
    1570:	08 95       	ret
    1572:	32 b3       	in	r19, 0x12	; 18
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	02 c0       	rjmp	.+4      	; 0x157e <M_Dio_PinWrite+0x92>
    157a:	88 0f       	add	r24, r24
    157c:	99 1f       	adc	r25, r25
    157e:	2a 95       	dec	r18
    1580:	e2 f7       	brpl	.-8      	; 0x157a <M_Dio_PinWrite+0x8e>
    1582:	83 2b       	or	r24, r19
    1584:	82 bb       	out	0x12, r24	; 18
    1586:	08 95       	ret
    1588:	92 30       	cpi	r25, 0x02	; 2
    158a:	a9 f0       	breq	.+42     	; 0x15b6 <M_Dio_PinWrite+0xca>
    158c:	18 f4       	brcc	.+6      	; 0x1594 <M_Dio_PinWrite+0xa8>
    158e:	91 30       	cpi	r25, 0x01	; 1
    1590:	31 f0       	breq	.+12     	; 0x159e <M_Dio_PinWrite+0xb2>
    1592:	08 95       	ret
    1594:	93 30       	cpi	r25, 0x03	; 3
    1596:	d9 f0       	breq	.+54     	; 0x15ce <M_Dio_PinWrite+0xe2>
    1598:	94 30       	cpi	r25, 0x04	; 4
    159a:	29 f1       	breq	.+74     	; 0x15e6 <M_Dio_PinWrite+0xfa>
    159c:	08 95       	ret
    159e:	3b b3       	in	r19, 0x1b	; 27
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <M_Dio_PinWrite+0xbe>
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	2a 95       	dec	r18
    15ac:	e2 f7       	brpl	.-8      	; 0x15a6 <M_Dio_PinWrite+0xba>
    15ae:	80 95       	com	r24
    15b0:	83 23       	and	r24, r19
    15b2:	8b bb       	out	0x1b, r24	; 27
    15b4:	08 95       	ret
    15b6:	38 b3       	in	r19, 0x18	; 24
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <M_Dio_PinWrite+0xd6>
    15be:	88 0f       	add	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	2a 95       	dec	r18
    15c4:	e2 f7       	brpl	.-8      	; 0x15be <M_Dio_PinWrite+0xd2>
    15c6:	80 95       	com	r24
    15c8:	83 23       	and	r24, r19
    15ca:	88 bb       	out	0x18, r24	; 24
    15cc:	08 95       	ret
    15ce:	35 b3       	in	r19, 0x15	; 21
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <M_Dio_PinWrite+0xee>
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	2a 95       	dec	r18
    15dc:	e2 f7       	brpl	.-8      	; 0x15d6 <M_Dio_PinWrite+0xea>
    15de:	80 95       	com	r24
    15e0:	83 23       	and	r24, r19
    15e2:	85 bb       	out	0x15, r24	; 21
    15e4:	08 95       	ret
    15e6:	32 b3       	in	r19, 0x12	; 18
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <M_Dio_PinWrite+0x106>
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	2a 95       	dec	r18
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <M_Dio_PinWrite+0x102>
    15f6:	80 95       	com	r24
    15f8:	83 23       	and	r24, r19
    15fa:	82 bb       	out	0x12, r24	; 18
    15fc:	08 95       	ret

000015fe <M_Dio_PinRead>:
    15fe:	9d ec       	ldi	r25, 0xCD	; 205
    1600:	89 9f       	mul	r24, r25
    1602:	91 2d       	mov	r25, r1
    1604:	11 24       	eor	r1, r1
    1606:	29 2f       	mov	r18, r25
    1608:	26 95       	lsr	r18
    160a:	26 95       	lsr	r18
    160c:	26 95       	lsr	r18
    160e:	22 0f       	add	r18, r18
    1610:	32 2f       	mov	r19, r18
    1612:	33 0f       	add	r19, r19
    1614:	33 0f       	add	r19, r19
    1616:	23 0f       	add	r18, r19
    1618:	82 1b       	sub	r24, r18
    161a:	28 2f       	mov	r18, r24
    161c:	89 2f       	mov	r24, r25
    161e:	86 95       	lsr	r24
    1620:	86 95       	lsr	r24
    1622:	86 95       	lsr	r24
    1624:	82 30       	cpi	r24, 0x02	; 2
    1626:	91 f0       	breq	.+36     	; 0x164c <M_Dio_PinRead+0x4e>
    1628:	18 f4       	brcc	.+6      	; 0x1630 <M_Dio_PinRead+0x32>
    162a:	81 30       	cpi	r24, 0x01	; 1
    162c:	31 f0       	breq	.+12     	; 0x163a <M_Dio_PinRead+0x3c>
    162e:	29 c0       	rjmp	.+82     	; 0x1682 <M_Dio_PinRead+0x84>
    1630:	83 30       	cpi	r24, 0x03	; 3
    1632:	a9 f0       	breq	.+42     	; 0x165e <M_Dio_PinRead+0x60>
    1634:	84 30       	cpi	r24, 0x04	; 4
    1636:	e1 f0       	breq	.+56     	; 0x1670 <M_Dio_PinRead+0x72>
    1638:	24 c0       	rjmp	.+72     	; 0x1682 <M_Dio_PinRead+0x84>
    163a:	89 b3       	in	r24, 0x19	; 25
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <M_Dio_PinRead+0x46>
    1640:	95 95       	asr	r25
    1642:	87 95       	ror	r24
    1644:	2a 95       	dec	r18
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <M_Dio_PinRead+0x42>
    1648:	81 70       	andi	r24, 0x01	; 1
    164a:	08 95       	ret
    164c:	86 b3       	in	r24, 0x16	; 22
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <M_Dio_PinRead+0x58>
    1652:	95 95       	asr	r25
    1654:	87 95       	ror	r24
    1656:	2a 95       	dec	r18
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <M_Dio_PinRead+0x54>
    165a:	81 70       	andi	r24, 0x01	; 1
    165c:	08 95       	ret
    165e:	83 b3       	in	r24, 0x13	; 19
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <M_Dio_PinRead+0x6a>
    1664:	95 95       	asr	r25
    1666:	87 95       	ror	r24
    1668:	2a 95       	dec	r18
    166a:	e2 f7       	brpl	.-8      	; 0x1664 <M_Dio_PinRead+0x66>
    166c:	81 70       	andi	r24, 0x01	; 1
    166e:	08 95       	ret
    1670:	80 b3       	in	r24, 0x10	; 16
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	02 c0       	rjmp	.+4      	; 0x167a <M_Dio_PinRead+0x7c>
    1676:	95 95       	asr	r25
    1678:	87 95       	ror	r24
    167a:	2a 95       	dec	r18
    167c:	e2 f7       	brpl	.-8      	; 0x1676 <M_Dio_PinRead+0x78>
    167e:	81 70       	andi	r24, 0x01	; 1
    1680:	08 95       	ret
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	08 95       	ret

00001686 <M_EXTI_PINMODE>:
    1686:	62 e0       	ldi	r22, 0x02	; 2
    1688:	8a e2       	ldi	r24, 0x2A	; 42
    168a:	0e 94 64 09 	call	0x12c8	; 0x12c8 <M_Dio_PinMode>
    168e:	62 e0       	ldi	r22, 0x02	; 2
    1690:	8b e2       	ldi	r24, 0x2B	; 43
    1692:	0e 94 64 09 	call	0x12c8	; 0x12c8 <M_Dio_PinMode>
    1696:	61 e0       	ldi	r22, 0x01	; 1
    1698:	8a e2       	ldi	r24, 0x2A	; 42
    169a:	0e 94 ed 09 	call	0x13da	; 0x13da <M_Dio_PinPullRes>
    169e:	61 e0       	ldi	r22, 0x01	; 1
    16a0:	8a e2       	ldi	r24, 0x2A	; 42
    16a2:	0e 94 ed 09 	call	0x13da	; 0x13da <M_Dio_PinPullRes>
    16a6:	08 95       	ret

000016a8 <M_EXTI_Init>:
    16a8:	0e 94 43 0b 	call	0x1686	; 0x1686 <M_EXTI_PINMODE>
    16ac:	85 b7       	in	r24, 0x35	; 53
    16ae:	8e 7f       	andi	r24, 0xFE	; 254
    16b0:	85 bf       	out	0x35, r24	; 53
    16b2:	85 b7       	in	r24, 0x35	; 53
    16b4:	82 60       	ori	r24, 0x02	; 2
    16b6:	85 bf       	out	0x35, r24	; 53
    16b8:	85 b7       	in	r24, 0x35	; 53
    16ba:	84 60       	ori	r24, 0x04	; 4
    16bc:	85 bf       	out	0x35, r24	; 53
    16be:	85 b7       	in	r24, 0x35	; 53
    16c0:	87 7f       	andi	r24, 0xF7	; 247
    16c2:	85 bf       	out	0x35, r24	; 53
    16c4:	84 b7       	in	r24, 0x34	; 52
    16c6:	87 7f       	andi	r24, 0xF7	; 247
    16c8:	84 bf       	out	0x34, r24	; 52
    16ca:	8b b7       	in	r24, 0x3b	; 59
    16cc:	80 64       	ori	r24, 0x40	; 64
    16ce:	8b bf       	out	0x3b, r24	; 59
    16d0:	8b b7       	in	r24, 0x3b	; 59
    16d2:	8f 77       	andi	r24, 0x7F	; 127
    16d4:	8b bf       	out	0x3b, r24	; 59
    16d6:	8b b7       	in	r24, 0x3b	; 59
    16d8:	8f 7d       	andi	r24, 0xDF	; 223
    16da:	8b bf       	out	0x3b, r24	; 59
    16dc:	08 95       	ret

000016de <M_EXTI_CallBack>:
    16de:	61 15       	cp	r22, r1
    16e0:	71 05       	cpc	r23, r1
    16e2:	51 f0       	breq	.+20     	; 0x16f8 <M_EXTI_CallBack+0x1a>
    16e4:	83 30       	cpi	r24, 0x03	; 3
    16e6:	40 f4       	brcc	.+16     	; 0x16f8 <M_EXTI_CallBack+0x1a>
    16e8:	e8 2f       	mov	r30, r24
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	ee 0f       	add	r30, r30
    16ee:	ff 1f       	adc	r31, r31
    16f0:	ea 5f       	subi	r30, 0xFA	; 250
    16f2:	fc 4f       	sbci	r31, 0xFC	; 252
    16f4:	71 83       	std	Z+1, r23	; 0x01
    16f6:	60 83       	st	Z, r22
    16f8:	08 95       	ret

000016fa <__vector_1>:
    16fa:	1f 92       	push	r1
    16fc:	0f 92       	push	r0
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	0f 92       	push	r0
    1702:	11 24       	eor	r1, r1
    1704:	2f 93       	push	r18
    1706:	3f 93       	push	r19
    1708:	4f 93       	push	r20
    170a:	5f 93       	push	r21
    170c:	6f 93       	push	r22
    170e:	7f 93       	push	r23
    1710:	8f 93       	push	r24
    1712:	9f 93       	push	r25
    1714:	af 93       	push	r26
    1716:	bf 93       	push	r27
    1718:	ef 93       	push	r30
    171a:	ff 93       	push	r31
    171c:	e0 91 06 03 	lds	r30, 0x0306	; 0x800306 <CallBackFunc>
    1720:	f0 91 07 03 	lds	r31, 0x0307	; 0x800307 <CallBackFunc+0x1>
    1724:	30 97       	sbiw	r30, 0x00	; 0
    1726:	09 f0       	breq	.+2      	; 0x172a <__vector_1+0x30>
    1728:	09 95       	icall
    172a:	ff 91       	pop	r31
    172c:	ef 91       	pop	r30
    172e:	bf 91       	pop	r27
    1730:	af 91       	pop	r26
    1732:	9f 91       	pop	r25
    1734:	8f 91       	pop	r24
    1736:	7f 91       	pop	r23
    1738:	6f 91       	pop	r22
    173a:	5f 91       	pop	r21
    173c:	4f 91       	pop	r20
    173e:	3f 91       	pop	r19
    1740:	2f 91       	pop	r18
    1742:	0f 90       	pop	r0
    1744:	0f be       	out	0x3f, r0	; 63
    1746:	0f 90       	pop	r0
    1748:	1f 90       	pop	r1
    174a:	18 95       	reti

0000174c <__vector_2>:
    174c:	1f 92       	push	r1
    174e:	0f 92       	push	r0
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	0f 92       	push	r0
    1754:	11 24       	eor	r1, r1
    1756:	2f 93       	push	r18
    1758:	3f 93       	push	r19
    175a:	4f 93       	push	r20
    175c:	5f 93       	push	r21
    175e:	6f 93       	push	r22
    1760:	7f 93       	push	r23
    1762:	8f 93       	push	r24
    1764:	9f 93       	push	r25
    1766:	af 93       	push	r26
    1768:	bf 93       	push	r27
    176a:	ef 93       	push	r30
    176c:	ff 93       	push	r31
    176e:	e0 91 08 03 	lds	r30, 0x0308	; 0x800308 <CallBackFunc+0x2>
    1772:	f0 91 09 03 	lds	r31, 0x0309	; 0x800309 <CallBackFunc+0x3>
    1776:	30 97       	sbiw	r30, 0x00	; 0
    1778:	09 f0       	breq	.+2      	; 0x177c <__vector_2+0x30>
    177a:	09 95       	icall
    177c:	ff 91       	pop	r31
    177e:	ef 91       	pop	r30
    1780:	bf 91       	pop	r27
    1782:	af 91       	pop	r26
    1784:	9f 91       	pop	r25
    1786:	8f 91       	pop	r24
    1788:	7f 91       	pop	r23
    178a:	6f 91       	pop	r22
    178c:	5f 91       	pop	r21
    178e:	4f 91       	pop	r20
    1790:	3f 91       	pop	r19
    1792:	2f 91       	pop	r18
    1794:	0f 90       	pop	r0
    1796:	0f be       	out	0x3f, r0	; 63
    1798:	0f 90       	pop	r0
    179a:	1f 90       	pop	r1
    179c:	18 95       	reti

0000179e <__vector_3>:
    179e:	1f 92       	push	r1
    17a0:	0f 92       	push	r0
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	0f 92       	push	r0
    17a6:	11 24       	eor	r1, r1
    17a8:	2f 93       	push	r18
    17aa:	3f 93       	push	r19
    17ac:	4f 93       	push	r20
    17ae:	5f 93       	push	r21
    17b0:	6f 93       	push	r22
    17b2:	7f 93       	push	r23
    17b4:	8f 93       	push	r24
    17b6:	9f 93       	push	r25
    17b8:	af 93       	push	r26
    17ba:	bf 93       	push	r27
    17bc:	ef 93       	push	r30
    17be:	ff 93       	push	r31
    17c0:	e0 91 0a 03 	lds	r30, 0x030A	; 0x80030a <CallBackFunc+0x4>
    17c4:	f0 91 0b 03 	lds	r31, 0x030B	; 0x80030b <CallBackFunc+0x5>
    17c8:	30 97       	sbiw	r30, 0x00	; 0
    17ca:	09 f0       	breq	.+2      	; 0x17ce <__vector_3+0x30>
    17cc:	09 95       	icall
    17ce:	ff 91       	pop	r31
    17d0:	ef 91       	pop	r30
    17d2:	bf 91       	pop	r27
    17d4:	af 91       	pop	r26
    17d6:	9f 91       	pop	r25
    17d8:	8f 91       	pop	r24
    17da:	7f 91       	pop	r23
    17dc:	6f 91       	pop	r22
    17de:	5f 91       	pop	r21
    17e0:	4f 91       	pop	r20
    17e2:	3f 91       	pop	r19
    17e4:	2f 91       	pop	r18
    17e6:	0f 90       	pop	r0
    17e8:	0f be       	out	0x3f, r0	; 63
    17ea:	0f 90       	pop	r0
    17ec:	1f 90       	pop	r1
    17ee:	18 95       	reti

000017f0 <M_GIE_EnableGlobal>:
    17f0:	78 94       	sei
    17f2:	08 95       	ret

000017f4 <TIMER0_Init>:
    17f4:	83 b7       	in	r24, 0x33	; 51
    17f6:	80 64       	ori	r24, 0x40	; 64
    17f8:	83 bf       	out	0x33, r24	; 51
    17fa:	83 b7       	in	r24, 0x33	; 51
    17fc:	88 60       	ori	r24, 0x08	; 8
    17fe:	83 bf       	out	0x33, r24	; 51
    1800:	80 e7       	ldi	r24, 0x70	; 112
    1802:	82 bf       	out	0x32, r24	; 50
    1804:	83 b7       	in	r24, 0x33	; 51
    1806:	88 7f       	andi	r24, 0xF8	; 248
    1808:	83 bf       	out	0x33, r24	; 51
    180a:	83 b7       	in	r24, 0x33	; 51
    180c:	83 60       	ori	r24, 0x03	; 3
    180e:	83 bf       	out	0x33, r24	; 51
    1810:	83 b7       	in	r24, 0x33	; 51
    1812:	8f 7e       	andi	r24, 0xEF	; 239
    1814:	83 bf       	out	0x33, r24	; 51
    1816:	83 b7       	in	r24, 0x33	; 51
    1818:	80 62       	ori	r24, 0x20	; 32
    181a:	83 bf       	out	0x33, r24	; 51
    181c:	08 95       	ret

0000181e <TIMER0_SetCompVal>:
    181e:	8c bf       	out	0x3c, r24	; 60
    1820:	08 95       	ret

00001822 <__vector_11>:
    1822:	1f 92       	push	r1
    1824:	0f 92       	push	r0
    1826:	0f b6       	in	r0, 0x3f	; 63
    1828:	0f 92       	push	r0
    182a:	11 24       	eor	r1, r1
    182c:	2f 93       	push	r18
    182e:	3f 93       	push	r19
    1830:	4f 93       	push	r20
    1832:	5f 93       	push	r21
    1834:	6f 93       	push	r22
    1836:	7f 93       	push	r23
    1838:	8f 93       	push	r24
    183a:	9f 93       	push	r25
    183c:	af 93       	push	r26
    183e:	bf 93       	push	r27
    1840:	ef 93       	push	r30
    1842:	ff 93       	push	r31
    1844:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <counter.1616>
    1848:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <counter.1616+0x1>
    184c:	01 96       	adiw	r24, 0x01	; 1
    184e:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <counter.1616+0x1>
    1852:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <counter.1616>
    1856:	81 3d       	cpi	r24, 0xD1	; 209
    1858:	93 40       	sbci	r25, 0x03	; 3
    185a:	69 f4       	brne	.+26     	; 0x1876 <__vector_11+0x54>
    185c:	80 e7       	ldi	r24, 0x70	; 112
    185e:	82 bf       	out	0x32, r24	; 50
    1860:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <counter.1616+0x1>
    1864:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <counter.1616>
    1868:	e0 91 10 03 	lds	r30, 0x0310	; 0x800310 <TIMER0_OVFCallBackFunc>
    186c:	f0 91 11 03 	lds	r31, 0x0311	; 0x800311 <TIMER0_OVFCallBackFunc+0x1>
    1870:	30 97       	sbiw	r30, 0x00	; 0
    1872:	09 f0       	breq	.+2      	; 0x1876 <__vector_11+0x54>
    1874:	09 95       	icall
    1876:	ff 91       	pop	r31
    1878:	ef 91       	pop	r30
    187a:	bf 91       	pop	r27
    187c:	af 91       	pop	r26
    187e:	9f 91       	pop	r25
    1880:	8f 91       	pop	r24
    1882:	7f 91       	pop	r23
    1884:	6f 91       	pop	r22
    1886:	5f 91       	pop	r21
    1888:	4f 91       	pop	r20
    188a:	3f 91       	pop	r19
    188c:	2f 91       	pop	r18
    188e:	0f 90       	pop	r0
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	0f 90       	pop	r0
    1894:	1f 90       	pop	r1
    1896:	18 95       	reti

00001898 <TIMER1_Init>:
    1898:	8f b5       	in	r24, 0x2f	; 47
    189a:	8e 7f       	andi	r24, 0xFE	; 254
    189c:	8f bd       	out	0x2f, r24	; 47
    189e:	8f b5       	in	r24, 0x2f	; 47
    18a0:	8d 7f       	andi	r24, 0xFD	; 253
    18a2:	8f bd       	out	0x2f, r24	; 47
    18a4:	8e b5       	in	r24, 0x2e	; 46
    18a6:	87 7f       	andi	r24, 0xF7	; 247
    18a8:	8e bd       	out	0x2e, r24	; 46
    18aa:	8e b5       	in	r24, 0x2e	; 46
    18ac:	8f 7e       	andi	r24, 0xEF	; 239
    18ae:	8e bd       	out	0x2e, r24	; 46
    18b0:	8e b5       	in	r24, 0x2e	; 46
    18b2:	81 60       	ori	r24, 0x01	; 1
    18b4:	8e bd       	out	0x2e, r24	; 46
    18b6:	8e b5       	in	r24, 0x2e	; 46
    18b8:	8d 7f       	andi	r24, 0xFD	; 253
    18ba:	8e bd       	out	0x2e, r24	; 46
    18bc:	8e b5       	in	r24, 0x2e	; 46
    18be:	84 60       	ori	r24, 0x04	; 4
    18c0:	8e bd       	out	0x2e, r24	; 46
    18c2:	89 b7       	in	r24, 0x39	; 57
    18c4:	84 60       	ori	r24, 0x04	; 4
    18c6:	89 bf       	out	0x39, r24	; 57
    18c8:	08 95       	ret

000018ca <M_Timer1_CallBackFn>:
    18ca:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <TIMER1_OVFCallBackFunc+0x1>
    18ce:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <TIMER1_OVFCallBackFunc>
    18d2:	08 95       	ret

000018d4 <__vector_9>:
    18d4:	1f 92       	push	r1
    18d6:	0f 92       	push	r0
    18d8:	0f b6       	in	r0, 0x3f	; 63
    18da:	0f 92       	push	r0
    18dc:	11 24       	eor	r1, r1
    18de:	2f 93       	push	r18
    18e0:	3f 93       	push	r19
    18e2:	4f 93       	push	r20
    18e4:	5f 93       	push	r21
    18e6:	6f 93       	push	r22
    18e8:	7f 93       	push	r23
    18ea:	8f 93       	push	r24
    18ec:	9f 93       	push	r25
    18ee:	af 93       	push	r26
    18f0:	bf 93       	push	r27
    18f2:	ef 93       	push	r30
    18f4:	ff 93       	push	r31
    18f6:	e0 91 0e 03 	lds	r30, 0x030E	; 0x80030e <TIMER1_OVFCallBackFunc>
    18fa:	f0 91 0f 03 	lds	r31, 0x030F	; 0x80030f <TIMER1_OVFCallBackFunc+0x1>
    18fe:	30 97       	sbiw	r30, 0x00	; 0
    1900:	09 f0       	breq	.+2      	; 0x1904 <__vector_9+0x30>
    1902:	09 95       	icall
    1904:	ff 91       	pop	r31
    1906:	ef 91       	pop	r30
    1908:	bf 91       	pop	r27
    190a:	af 91       	pop	r26
    190c:	9f 91       	pop	r25
    190e:	8f 91       	pop	r24
    1910:	7f 91       	pop	r23
    1912:	6f 91       	pop	r22
    1914:	5f 91       	pop	r21
    1916:	4f 91       	pop	r20
    1918:	3f 91       	pop	r19
    191a:	2f 91       	pop	r18
    191c:	0f 90       	pop	r0
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	0f 90       	pop	r0
    1922:	1f 90       	pop	r1
    1924:	18 95       	reti

00001926 <UART_Init>:
    1926:	81 b3       	in	r24, 0x11	; 17
    1928:	8e 7f       	andi	r24, 0xFE	; 254
    192a:	81 bb       	out	0x11, r24	; 17
    192c:	81 b3       	in	r24, 0x11	; 17
    192e:	82 60       	ori	r24, 0x02	; 2
    1930:	81 bb       	out	0x11, r24	; 17
    1932:	87 e6       	ldi	r24, 0x67	; 103
    1934:	89 b9       	out	0x09, r24	; 9
    1936:	10 bc       	out	0x20, r1	; 32
    1938:	86 e8       	ldi	r24, 0x86	; 134
    193a:	80 bd       	out	0x20, r24	; 32
    193c:	8a b1       	in	r24, 0x0a	; 10
    193e:	80 61       	ori	r24, 0x10	; 16
    1940:	8a b9       	out	0x0a, r24	; 10
    1942:	8a b1       	in	r24, 0x0a	; 10
    1944:	88 60       	ori	r24, 0x08	; 8
    1946:	8a b9       	out	0x0a, r24	; 10
    1948:	08 95       	ret

0000194a <UART_Tx>:
    194a:	8c b9       	out	0x0c, r24	; 12
    194c:	5e 9b       	sbis	0x0b, 6	; 11
    194e:	fe cf       	rjmp	.-4      	; 0x194c <UART_Tx+0x2>
    1950:	08 95       	ret

00001952 <UART_Rx>:
    1952:	04 c0       	rjmp	.+8      	; 0x195c <UART_Rx+0xa>
    1954:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <Local_u8_Variable13>
    1958:	81 11       	cpse	r24, r1
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <UART_Rx+0xe>
    195c:	5f 9b       	sbis	0x0b, 7	; 11
    195e:	fa cf       	rjmp	.-12     	; 0x1954 <UART_Rx+0x2>
    1960:	8c b1       	in	r24, 0x0c	; 12
    1962:	08 95       	ret

00001964 <UART_TxString>:
    1964:	0f 93       	push	r16
    1966:	1f 93       	push	r17
    1968:	cf 93       	push	r28
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	59 f4       	brne	.+22     	; 0x1984 <UART_TxString+0x20>
    196e:	12 c0       	rjmp	.+36     	; 0x1994 <UART_TxString+0x30>
    1970:	0e 94 a5 0c 	call	0x194a	; 0x194a <UART_Tx>
    1974:	cf 5f       	subi	r28, 0xFF	; 255
    1976:	8f e3       	ldi	r24, 0x3F	; 63
    1978:	9c e9       	ldi	r25, 0x9C	; 156
    197a:	01 97       	sbiw	r24, 0x01	; 1
    197c:	f1 f7       	brne	.-4      	; 0x197a <UART_TxString+0x16>
    197e:	00 c0       	rjmp	.+0      	; 0x1980 <UART_TxString+0x1c>
    1980:	00 00       	nop
    1982:	02 c0       	rjmp	.+4      	; 0x1988 <UART_TxString+0x24>
    1984:	8c 01       	movw	r16, r24
    1986:	c0 e0       	ldi	r28, 0x00	; 0
    1988:	f8 01       	movw	r30, r16
    198a:	ec 0f       	add	r30, r28
    198c:	f1 1d       	adc	r31, r1
    198e:	80 81       	ld	r24, Z
    1990:	81 11       	cpse	r24, r1
    1992:	ee cf       	rjmp	.-36     	; 0x1970 <UART_TxString+0xc>
    1994:	cf 91       	pop	r28
    1996:	1f 91       	pop	r17
    1998:	0f 91       	pop	r16
    199a:	08 95       	ret

0000199c <__tablejump2__>:
    199c:	ee 0f       	add	r30, r30
    199e:	ff 1f       	adc	r31, r31
    19a0:	05 90       	lpm	r0, Z+
    19a2:	f4 91       	lpm	r31, Z
    19a4:	e0 2d       	mov	r30, r0
    19a6:	09 94       	ijmp

000019a8 <__umulhisi3>:
    19a8:	a2 9f       	mul	r26, r18
    19aa:	b0 01       	movw	r22, r0
    19ac:	b3 9f       	mul	r27, r19
    19ae:	c0 01       	movw	r24, r0
    19b0:	a3 9f       	mul	r26, r19
    19b2:	70 0d       	add	r23, r0
    19b4:	81 1d       	adc	r24, r1
    19b6:	11 24       	eor	r1, r1
    19b8:	91 1d       	adc	r25, r1
    19ba:	b2 9f       	mul	r27, r18
    19bc:	70 0d       	add	r23, r0
    19be:	81 1d       	adc	r24, r1
    19c0:	11 24       	eor	r1, r1
    19c2:	91 1d       	adc	r25, r1
    19c4:	08 95       	ret

000019c6 <_exit>:
    19c6:	f8 94       	cli

000019c8 <__stop_program>:
    19c8:	ff cf       	rjmp	.-2      	; 0x19c8 <__stop_program>
