
SmartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000029a  00800060  000019a4  00001a38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  008002fa  008002fa  00001cd2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001cd2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001d04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f8  00000000  00000000  00001d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004aca  00000000  00000000  00002138  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001302  00000000  00000000  00006c02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000028f8  00000000  00000000  00007f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008ec  00000000  00000000  0000a7fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fbe  00000000  00000000  0000b0e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000296e  00000000  00000000  0000c0a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000330  00000000  00000000  0000ea14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <__vector_1>
       8:	0c 94 93 0b 	jmp	0x1726	; 0x1726 <__vector_2>
       c:	0c 94 bc 0b 	jmp	0x1778	; 0x1778 <__vector_3>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 57 0c 	jmp	0x18ae	; 0x18ae <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 fe 0b 	jmp	0x17fc	; 0x17fc <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 1b 09 	jmp	0x1236	; 0x1236 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	60 01       	movw	r12, r0
      56:	64 01       	movw	r12, r8
      58:	68 01       	movw	r12, r16
      5a:	6c 01       	movw	r12, r24
      5c:	70 01       	movw	r14, r0
      5e:	74 01       	movw	r14, r8
      60:	78 01       	movw	r14, r16
      62:	7c 01       	movw	r14, r24
      64:	80 01       	movw	r16, r0
      66:	84 01       	movw	r16, r8

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf e5       	ldi	r28, 0x5F	; 95
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e6       	ldi	r26, 0x60	; 96
      78:	b0 e0       	ldi	r27, 0x00	; 0
      7a:	e4 ea       	ldi	r30, 0xA4	; 164
      7c:	f9 e1       	ldi	r31, 0x19	; 25
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 3f       	cpi	r26, 0xFA	; 250
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	aa ef       	ldi	r26, 0xFA	; 250
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a5 31       	cpi	r26, 0x15	; 21
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 10 02 	call	0x420	; 0x420 <main>
      9e:	0c 94 d0 0c 	jmp	0x19a0	; 0x19a0 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_ISR>:
	Local_u8_erorr = M_ADC_StartConversionAsynch(0, &Gloable_u16_ADC_Reading,ADC_ISR);
}

void ADC_ISR(void)
{
	Gloable_u16_Analog_MV = (Gloable_u16_ADC_Reading * 5000UL) /1024 ;
      a6:	20 91 fe 02 	lds	r18, 0x02FE	; 0x8002fe <Gloable_u16_ADC_Reading>
      aa:	30 91 ff 02 	lds	r19, 0x02FF	; 0x8002ff <Gloable_u16_ADC_Reading+0x1>
      ae:	a8 e8       	ldi	r26, 0x88	; 136
      b0:	b3 e1       	ldi	r27, 0x13	; 19
      b2:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
      b6:	9b 01       	movw	r18, r22
      b8:	ac 01       	movw	r20, r24
      ba:	01 2e       	mov	r0, r17
      bc:	1a e0       	ldi	r17, 0x0A	; 10
      be:	56 95       	lsr	r21
      c0:	47 95       	ror	r20
      c2:	37 95       	ror	r19
      c4:	27 95       	ror	r18
      c6:	1a 95       	dec	r17
      c8:	d1 f7       	brne	.-12     	; 0xbe <ADC_ISR+0x18>
      ca:	10 2d       	mov	r17, r0
      cc:	30 93 12 03 	sts	0x0312, r19	; 0x800312 <Gloable_u16_Analog_MV+0x1>
      d0:	20 93 11 03 	sts	0x0311, r18	; 0x800311 <Gloable_u16_Analog_MV>
	Gloable_u8_temp = Gloable_u16_Analog_MV / 10 ;
      d4:	ad ec       	ldi	r26, 0xCD	; 205
      d6:	bc ec       	ldi	r27, 0xCC	; 204
      d8:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
      dc:	96 95       	lsr	r25
      de:	87 95       	ror	r24
      e0:	96 95       	lsr	r25
      e2:	87 95       	ror	r24
      e4:	96 95       	lsr	r25
      e6:	87 95       	ror	r24
      e8:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <Gloable_u8_temp>
      ec:	08 95       	ret

000000ee <X_ISR>:
	}
}

void X_ISR(void)
{
	Local_u8_Variable13 = 1;
      ee:	81 e0       	ldi	r24, 0x01	; 1
      f0:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <Local_u8_Variable13>
	while(Local_u8_Variable6 == 0)
      f4:	04 c0       	rjmp	.+8      	; 0xfe <X_ISR+0x10>
	{
	  Local_u8_Variable6 = H_KeyPad_Read();
      f6:	0e 94 23 07 	call	0xe46	; 0xe46 <H_KeyPad_Read>
      fa:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <__data_end>
}

void X_ISR(void)
{
	Local_u8_Variable13 = 1;
	while(Local_u8_Variable6 == 0)
      fe:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <__data_end>
     102:	88 23       	and	r24, r24
     104:	c1 f3       	breq	.-16     	; 0xf6 <X_ISR+0x8>
	{
	  Local_u8_Variable6 = H_KeyPad_Read();
	}
}
     106:	08 95       	ret

00000108 <LCD_Welcome>:
	
}
/********************************************************************END_OF_MAIN*********************************************************************/
void LCD_Welcome(void)
{
	H_Lcd_GoTo(0,0);
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	80 e0       	ldi	r24, 0x00	; 0
     10c:	0e 94 55 08 	call	0x10aa	; 0x10aa <H_Lcd_GoTo>
	H_Lcd_WriteString("Welcome to your"); 
     110:	80 e7       	ldi	r24, 0x70	; 112
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	0e 94 3e 08 	call	0x107c	; 0x107c <H_Lcd_WriteString>
	H_Lcd_GoTo(1,0);
     118:	60 e0       	ldi	r22, 0x00	; 0
     11a:	81 e0       	ldi	r24, 0x01	; 1
     11c:	0e 94 55 08 	call	0x10aa	; 0x10aa <H_Lcd_GoTo>
	H_Lcd_WriteString("home sir");
     120:	80 e9       	ldi	r24, 0x90	; 144
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	0e 94 3e 08 	call	0x107c	; 0x107c <H_Lcd_WriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     128:	2f ef       	ldi	r18, 0xFF	; 255
     12a:	89 e6       	ldi	r24, 0x69	; 105
     12c:	98 e1       	ldi	r25, 0x18	; 24
     12e:	21 50       	subi	r18, 0x01	; 1
     130:	80 40       	sbci	r24, 0x00	; 0
     132:	90 40       	sbci	r25, 0x00	; 0
     134:	e1 f7       	brne	.-8      	; 0x12e <LCD_Welcome+0x26>
     136:	00 c0       	rjmp	.+0      	; 0x138 <LCD_Welcome+0x30>
     138:	00 00       	nop
	_delay_ms(500);
	H_Lcd_Clr();
     13a:	0e 94 51 08 	call	0x10a2	; 0x10a2 <H_Lcd_Clr>
     13e:	2f ef       	ldi	r18, 0xFF	; 255
     140:	89 e6       	ldi	r24, 0x69	; 105
     142:	98 e1       	ldi	r25, 0x18	; 24
     144:	21 50       	subi	r18, 0x01	; 1
     146:	80 40       	sbci	r24, 0x00	; 0
     148:	90 40       	sbci	r25, 0x00	; 0
     14a:	e1 f7       	brne	.-8      	; 0x144 <LCD_Welcome+0x3c>
     14c:	00 c0       	rjmp	.+0      	; 0x14e <LCD_Welcome+0x46>
     14e:	00 00       	nop
	_delay_ms(500);
	H_Lcd_WriteString("Press 'A' To");
     150:	8a e9       	ldi	r24, 0x9A	; 154
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 3e 08 	call	0x107c	; 0x107c <H_Lcd_WriteString>
	H_Lcd_GoTo(1,0);
     158:	60 e0       	ldi	r22, 0x00	; 0
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	0e 94 55 08 	call	0x10aa	; 0x10aa <H_Lcd_GoTo>
	H_Lcd_WriteString("Proceed");
     160:	88 ea       	ldi	r24, 0xA8	; 168
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	0e 94 3e 08 	call	0x107c	; 0x107c <H_Lcd_WriteString>
	/*****************************************************************************/
	UART_TxString("Welcome to your home sir");
     168:	80 e8       	ldi	r24, 0x80	; 128
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
	UART_Tx(NEXTLINE);
     170:	8d e0       	ldi	r24, 0x0D	; 13
     172:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
	UART_TxString(" Press 'A' To");
     176:	89 e9       	ldi	r24, 0x99	; 153
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
	UART_Tx(NEXTLINE);
     17e:	8d e0       	ldi	r24, 0x0D	; 13
     180:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
	UART_TxString(" Proceed");
     184:	87 ea       	ldi	r24, 0xA7	; 167
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
	UART_Tx(NEXTLINE);	
     18c:	8d e0       	ldi	r24, 0x0D	; 13
     18e:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
     192:	08 95       	ret

00000194 <Door_Control>:
}

 void Door_Control(void)
 {
	 M_Dio_PinMode(PD7,OUTPUT);
     194:	61 e0       	ldi	r22, 0x01	; 1
     196:	8f e2       	ldi	r24, 0x2F	; 47
     198:	0e 94 51 09 	call	0x12a2	; 0x12a2 <M_Dio_PinMode>
	 u8 Local_u8_DOOR_STATUS = ALREADY_CLOSED;
	 UART_Tx(NEXTLINE);
     19c:	8d e0       	ldi	r24, 0x0D	; 13
     19e:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
	 UART_TxString(" 1-Door Open");
     1a2:	80 eb       	ldi	r24, 0xB0	; 176
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
	 UART_Tx(NEXTLINE);
     1aa:	8d e0       	ldi	r24, 0x0D	; 13
     1ac:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
	 UART_TxString(" 2-Door Close");
     1b0:	8d eb       	ldi	r24, 0xBD	; 189
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
	 Local_u8_DOOR_STATUS = HC05_Rx();
     1b8:	0e 94 ac 06 	call	0xd58	; 0xd58 <HC05_Rx>
	 
	 if (Local_u8_DOOR_STATUS == OPEN_DOOR)
     1bc:	81 33       	cpi	r24, 0x31	; 49
     1be:	b1 f4       	brne	.+44     	; 0x1ec <Door_Control+0x58>
	 {
		 M_Dio_PinWrite(PD7,HIGH);
     1c0:	61 e0       	ldi	r22, 0x01	; 1
     1c2:	8f e2       	ldi	r24, 0x2F	; 47
     1c4:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
     1c8:	8f e3       	ldi	r24, 0x3F	; 63
     1ca:	9f e1       	ldi	r25, 0x1F	; 31
     1cc:	01 97       	sbiw	r24, 0x01	; 1
     1ce:	f1 f7       	brne	.-4      	; 0x1cc <Door_Control+0x38>
     1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <Door_Control+0x3e>
     1d2:	00 00       	nop
		 _delay_ms(2);
		 M_Dio_PinWrite(PD7,LOW);
     1d4:	62 e0       	ldi	r22, 0x02	; 2
     1d6:	8f e2       	ldi	r24, 0x2F	; 47
     1d8:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
	     UART_Tx(NEXTLINE);
     1dc:	8d e0       	ldi	r24, 0x0D	; 13
     1de:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
		 UART_TxString("DONE");
     1e2:	8d ec       	ldi	r24, 0xCD	; 205
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
     1ea:	08 95       	ret
	 }
	 else if(Local_u8_DOOR_STATUS == CLOSE_DOOR)
     1ec:	82 33       	cpi	r24, 0x32	; 50
     1ee:	c1 f4       	brne	.+48     	; 0x220 <Door_Control+0x8c>
	 {
		 M_Dio_PinWrite(PD7,HIGH);
     1f0:	61 e0       	ldi	r22, 0x01	; 1
     1f2:	8f e2       	ldi	r24, 0x2F	; 47
     1f4:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
     1f8:	8f e6       	ldi	r24, 0x6F	; 111
     1fa:	97 e1       	ldi	r25, 0x17	; 23
     1fc:	01 97       	sbiw	r24, 0x01	; 1
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <Door_Control+0x68>
     200:	00 c0       	rjmp	.+0      	; 0x202 <Door_Control+0x6e>
     202:	00 00       	nop
		 _delay_ms(1.5);
		 M_Dio_PinWrite(PD7,LOW);
     204:	62 e0       	ldi	r22, 0x02	; 2
     206:	8f e2       	ldi	r24, 0x2F	; 47
     208:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
	     UART_Tx(NEXTLINE);
     20c:	8d e0       	ldi	r24, 0x0D	; 13
     20e:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
		 UART_TxString("  DONE");
     212:	8b ec       	ldi	r24, 0xCB	; 203
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
		 UART_Tx(NEXTLINE);
     21a:	8d e0       	ldi	r24, 0x0D	; 13
     21c:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
     220:	08 95       	ret

00000222 <Light_Control>:
 }

 void Light_Control(void)
 {
	u8 Local_u8_LIGHTS = OFF ;
    UART_Tx(NEXTLINE);
     222:	8d e0       	ldi	r24, 0x0D	; 13
     224:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
	UART_TxString(" 1-Lights ON");
     228:	82 ed       	ldi	r24, 0xD2	; 210
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
	UART_Tx(NEXTLINE);
     230:	8d e0       	ldi	r24, 0x0D	; 13
     232:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
	UART_TxString(" 2-Lights OFF");
     236:	8f ed       	ldi	r24, 0xDF	; 223
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
	UART_Tx(NEXTLINE);
     23e:	8d e0       	ldi	r24, 0x0D	; 13
     240:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>

	Local_u8_LIGHTS = HC05_Rx() ;
     244:	0e 94 ac 06 	call	0xd58	; 0xd58 <HC05_Rx>
	if (Local_u8_LIGHTS == LIGHTS_ON)
     248:	81 33       	cpi	r24, 0x31	; 49
     24a:	81 f4       	brne	.+32     	; 0x26c <Light_Control+0x4a>
	{
		H_Led_On(LED0);
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	0e 94 93 08 	call	0x1126	; 0x1126 <H_Led_On>
		H_Led_On(LED1);
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	0e 94 93 08 	call	0x1126	; 0x1126 <H_Led_On>
		H_Led_On(LED2);
     258:	82 e0       	ldi	r24, 0x02	; 2
     25a:	0e 94 93 08 	call	0x1126	; 0x1126 <H_Led_On>
		H_Led_On(LED3);
     25e:	83 e0       	ldi	r24, 0x03	; 3
     260:	0e 94 93 08 	call	0x1126	; 0x1126 <H_Led_On>
		H_Led_On(LED4);
     264:	84 e0       	ldi	r24, 0x04	; 4
     266:	0e 94 93 08 	call	0x1126	; 0x1126 <H_Led_On>
     26a:	08 95       	ret
	}
	else if (Local_u8_LIGHTS == LIGHTS_ON)
     26c:	81 33       	cpi	r24, 0x31	; 49
     26e:	79 f4       	brne	.+30     	; 0x28e <Light_Control+0x6c>
	{
		H_Led_Off(LED0);
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	0e 94 b9 08 	call	0x1172	; 0x1172 <H_Led_Off>
		H_Led_Off(LED1);
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	0e 94 b9 08 	call	0x1172	; 0x1172 <H_Led_Off>
		H_Led_Off(LED2);
     27c:	82 e0       	ldi	r24, 0x02	; 2
     27e:	0e 94 b9 08 	call	0x1172	; 0x1172 <H_Led_Off>
		H_Led_Off(LED3);
     282:	83 e0       	ldi	r24, 0x03	; 3
     284:	0e 94 b9 08 	call	0x1172	; 0x1172 <H_Led_Off>
		H_Led_Off(LED4);
     288:	84 e0       	ldi	r24, 0x04	; 4
     28a:	0e 94 b9 08 	call	0x1172	; 0x1172 <H_Led_Off>
     28e:	08 95       	ret

00000290 <Dim_Light_Control>:
 }
 
  void Dim_Light_Control(void)
  {
	  u8 Local_u8_reading = 0 ;
	  UART_Tx(NEXTLINE);
     290:	8d e0       	ldi	r24, 0x0D	; 13
     292:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
	  UART_TxString(" Enter intensity from 0:9");
     296:	8d ee       	ldi	r24, 0xED	; 237
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
	  UART_Tx(NEXTLINE);
     29e:	8d e0       	ldi	r24, 0x0D	; 13
     2a0:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
	  Local_u8_reading = HC05_Rx() ;
     2a4:	0e 94 ac 06 	call	0xd58	; 0xd58 <HC05_Rx>
	  if (Local_u8_reading != 0)
     2a8:	88 23       	and	r24, r24
     2aa:	89 f1       	breq	.+98     	; 0x30e <Dim_Light_Control+0x7e>
	  {
		  switch(Local_u8_reading)
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	fc 01       	movw	r30, r24
     2b0:	f0 97       	sbiw	r30, 0x30	; 48
     2b2:	ea 30       	cpi	r30, 0x0A	; 10
     2b4:	f1 05       	cpc	r31, r1
     2b6:	58 f5       	brcc	.+86     	; 0x30e <Dim_Light_Control+0x7e>
     2b8:	e6 5d       	subi	r30, 0xD6	; 214
     2ba:	ff 4f       	sbci	r31, 0xFF	; 255
     2bc:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <__tablejump2__>
		  {
			  case 48: TIMER0_SetCompVal(2);       break;
     2c0:	82 e0       	ldi	r24, 0x02	; 2
     2c2:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <TIMER0_SetCompVal>
     2c6:	08 95       	ret
			  case 49: TIMER0_SetCompVal(25);      break;
     2c8:	89 e1       	ldi	r24, 0x19	; 25
     2ca:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <TIMER0_SetCompVal>
     2ce:	08 95       	ret
			  case 50: TIMER0_SetCompVal(50);      break;
     2d0:	82 e3       	ldi	r24, 0x32	; 50
     2d2:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <TIMER0_SetCompVal>
     2d6:	08 95       	ret
			  case 51: TIMER0_SetCompVal(75);      break;
     2d8:	8b e4       	ldi	r24, 0x4B	; 75
     2da:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <TIMER0_SetCompVal>
     2de:	08 95       	ret
			  case 52: TIMER0_SetCompVal(100);     break;
     2e0:	84 e6       	ldi	r24, 0x64	; 100
     2e2:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <TIMER0_SetCompVal>
     2e6:	08 95       	ret
			  case 53: TIMER0_SetCompVal(125);     break;
     2e8:	8d e7       	ldi	r24, 0x7D	; 125
     2ea:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <TIMER0_SetCompVal>
     2ee:	08 95       	ret
			  case 54: TIMER0_SetCompVal(150);     break;
     2f0:	86 e9       	ldi	r24, 0x96	; 150
     2f2:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <TIMER0_SetCompVal>
     2f6:	08 95       	ret
			  case 55: TIMER0_SetCompVal(175);     break;
     2f8:	8f ea       	ldi	r24, 0xAF	; 175
     2fa:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <TIMER0_SetCompVal>
     2fe:	08 95       	ret
			  case 56: TIMER0_SetCompVal(200);     break;
     300:	88 ec       	ldi	r24, 0xC8	; 200
     302:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <TIMER0_SetCompVal>
     306:	08 95       	ret
			  case 57: TIMER0_SetCompVal(250);     break;
     308:	8a ef       	ldi	r24, 0xFA	; 250
     30a:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <TIMER0_SetCompVal>
     30e:	08 95       	ret

00000310 <AirCond_control>:
  }

void AirCond_control(void)
{
	u8 Local_u8_erorr ;
	Local_u8_erorr = M_ADC_StartConversionAsynch(0, &Gloable_u16_ADC_Reading,ADC_ISR);
     310:	43 e5       	ldi	r20, 0x53	; 83
     312:	50 e0       	ldi	r21, 0x00	; 0
     314:	6e ef       	ldi	r22, 0xFE	; 254
     316:	72 e0       	ldi	r23, 0x02	; 2
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <M_ADC_StartConversionAsynch>
     31e:	08 95       	ret

00000320 <TimerISR>:
	Gloable_u8_temp = Gloable_u16_Analog_MV / 10 ;
}

void TimerISR(void)
{
	AirCond_control();
     320:	0e 94 88 01 	call	0x310	; 0x310 <AirCond_control>
	if(Gloable_u8_AC_Flag == AC_ON)
     324:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <Gloable_u8_AC_Flag>
     328:	81 30       	cpi	r24, 0x01	; 1
     32a:	61 f4       	brne	.+24     	; 0x344 <TimerISR+0x24>
	{
		if(Gloable_u8_temp > 27)
     32c:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <Gloable_u8_temp>
     330:	8c 31       	cpi	r24, 0x1C	; 28
     332:	18 f0       	brcs	.+6      	; 0x33a <TimerISR+0x1a>
		{
			H_H_Bridge_CH1_EN();
     334:	0e 94 c8 06 	call	0xd90	; 0xd90 <H_H_Bridge_CH1_EN>
     338:	08 95       	ret
		}
		else if  (Gloable_u8_temp < 21)
     33a:	85 31       	cpi	r24, 0x15	; 21
     33c:	28 f4       	brcc	.+10     	; 0x348 <TimerISR+0x28>
		{
			H_H_Bridge_CH1_Break();
     33e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <H_H_Bridge_CH1_Break>
     342:	08 95       	ret
			// do nothing
		}
	}
	else
	{
		H_H_Bridge_CH1_Break();
     344:	0e 94 d5 06 	call	0xdaa	; 0xdaa <H_H_Bridge_CH1_Break>
     348:	08 95       	ret

0000034a <AirCond_EN>:
	}
}

void AirCond_EN(void)
{
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
	u8 Local_u8_Number=0;
	u8 Local_u8_Number1=0;
    u8 Local_u8_reading ;
	UART_TxString("LOADING.....");
     34e:	87 e0       	ldi	r24, 0x07	; 7
     350:	91 e0       	ldi	r25, 0x01	; 1
     352:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
	while(Gloable_u8_temp == 0); //wait until adc take reading
     356:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <Gloable_u8_temp>
     35a:	88 23       	and	r24, r24
     35c:	e1 f3       	breq	.-8      	; 0x356 <AirCond_EN+0xc>
     35e:	2f ef       	ldi	r18, 0xFF	; 255
     360:	80 e7       	ldi	r24, 0x70	; 112
     362:	92 e0       	ldi	r25, 0x02	; 2
     364:	21 50       	subi	r18, 0x01	; 1
     366:	80 40       	sbci	r24, 0x00	; 0
     368:	90 40       	sbci	r25, 0x00	; 0
     36a:	e1 f7       	brne	.-8      	; 0x364 <AirCond_EN+0x1a>
     36c:	00 c0       	rjmp	.+0      	; 0x36e <AirCond_EN+0x24>
     36e:	00 00       	nop
	_delay_ms(50);
	Local_u8_Number = (Gloable_u8_temp/10)+48 ;
     370:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <Gloable_u8_temp>
     374:	9d ec       	ldi	r25, 0xCD	; 205
     376:	89 9f       	mul	r24, r25
     378:	91 2d       	mov	r25, r1
     37a:	11 24       	eor	r1, r1
     37c:	96 95       	lsr	r25
     37e:	96 95       	lsr	r25
     380:	96 95       	lsr	r25
     382:	d0 e3       	ldi	r29, 0x30	; 48
     384:	d9 0f       	add	r29, r25
	Local_u8_Number1=  (Gloable_u8_temp%10)+48 ;
     386:	99 0f       	add	r25, r25
     388:	29 2f       	mov	r18, r25
     38a:	22 0f       	add	r18, r18
     38c:	22 0f       	add	r18, r18
     38e:	92 0f       	add	r25, r18
     390:	89 1b       	sub	r24, r25
     392:	c0 e3       	ldi	r28, 0x30	; 48
     394:	c8 0f       	add	r28, r24
    UART_Tx(NEXTLINE);
     396:	8d e0       	ldi	r24, 0x0D	; 13
     398:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
     39c:	2f ef       	ldi	r18, 0xFF	; 255
     39e:	80 e7       	ldi	r24, 0x70	; 112
     3a0:	92 e0       	ldi	r25, 0x02	; 2
     3a2:	21 50       	subi	r18, 0x01	; 1
     3a4:	80 40       	sbci	r24, 0x00	; 0
     3a6:	90 40       	sbci	r25, 0x00	; 0
     3a8:	e1 f7       	brne	.-8      	; 0x3a2 <AirCond_EN+0x58>
     3aa:	00 c0       	rjmp	.+0      	; 0x3ac <AirCond_EN+0x62>
     3ac:	00 00       	nop
	_delay_ms(50);
	UART_TxString(" Current temperature is : ");
     3ae:	84 e1       	ldi	r24, 0x14	; 20
     3b0:	91 e0       	ldi	r25, 0x01	; 1
     3b2:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
     3b6:	2f ef       	ldi	r18, 0xFF	; 255
     3b8:	80 e7       	ldi	r24, 0x70	; 112
     3ba:	92 e0       	ldi	r25, 0x02	; 2
     3bc:	21 50       	subi	r18, 0x01	; 1
     3be:	80 40       	sbci	r24, 0x00	; 0
     3c0:	90 40       	sbci	r25, 0x00	; 0
     3c2:	e1 f7       	brne	.-8      	; 0x3bc <AirCond_EN+0x72>
     3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <AirCond_EN+0x7c>
     3c6:	00 00       	nop
	_delay_ms(50);
	UART_Tx(Local_u8_Number);
     3c8:	8d 2f       	mov	r24, r29
     3ca:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
     3ce:	2f ef       	ldi	r18, 0xFF	; 255
     3d0:	80 e7       	ldi	r24, 0x70	; 112
     3d2:	92 e0       	ldi	r25, 0x02	; 2
     3d4:	21 50       	subi	r18, 0x01	; 1
     3d6:	80 40       	sbci	r24, 0x00	; 0
     3d8:	90 40       	sbci	r25, 0x00	; 0
     3da:	e1 f7       	brne	.-8      	; 0x3d4 <AirCond_EN+0x8a>
     3dc:	00 c0       	rjmp	.+0      	; 0x3de <AirCond_EN+0x94>
     3de:	00 00       	nop
	_delay_ms(50);
	UART_Tx(Local_u8_Number1); 
     3e0:	8c 2f       	mov	r24, r28
     3e2:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
    UART_Tx(NEXTLINE);
     3e6:	8d e0       	ldi	r24, 0x0D	; 13
     3e8:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
	UART_TxString("   1-AC Enable");
     3ec:	8f e2       	ldi	r24, 0x2F	; 47
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
    UART_Tx(NEXTLINE);
     3f4:	8d e0       	ldi	r24, 0x0D	; 13
     3f6:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
	UART_TxString(" 2-AC Disable");
     3fa:	8e e3       	ldi	r24, 0x3E	; 62
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
	
	Local_u8_reading = HC05_Rx() ;
     402:	0e 94 ac 06 	call	0xd58	; 0xd58 <HC05_Rx>
	if (Local_u8_reading == TURN_ON)
     406:	81 33       	cpi	r24, 0x31	; 49
     408:	21 f4       	brne	.+8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
	{
		Gloable_u8_AC_Flag = AC_ON ;
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <Gloable_u8_AC_Flag>
     410:	04 c0       	rjmp	.+8      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
	}
	else if (Local_u8_reading == TURN_OFF)
     412:	82 33       	cpi	r24, 0x32	; 50
     414:	11 f4       	brne	.+4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
	{
		Gloable_u8_AC_Flag = AC_OFF ;
     416:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <Gloable_u8_AC_Flag>
	}
	else
	{
		//DO Nothing
	}
}
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	08 95       	ret

00000420 <main>:
u8  static Local_u8_Error = ERROR	 ;
u8  Local_u8_Variable6 =0			 ;
u8  Local_u8_Variable13				 ;	
/***********************************************************START_OF_MAIN*********************************************************************/
int main(void)
{
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	cd b7       	in	r28, 0x3d	; 61
     426:	de b7       	in	r29, 0x3e	; 62
     428:	a8 97       	sbiw	r28, 0x28	; 40
     42a:	0f b6       	in	r0, 0x3f	; 63
     42c:	f8 94       	cli
     42e:	de bf       	out	0x3e, r29	; 62
     430:	0f be       	out	0x3f, r0	; 63
     432:	cd bf       	out	0x3d, r28	; 61
	
	/************************************************INITS******************************************************/
	H_Lcd_Init();
     434:	0e 94 02 08 	call	0x1004	; 0x1004 <H_Lcd_Init>
	H_Buzzer_Init();
     438:	0e 94 75 06 	call	0xcea	; 0xcea <H_Buzzer_Init>
	HC05_Init();
     43c:	0e 94 a9 06 	call	0xd52	; 0xd52 <HC05_Init>
	H_H_Bridge_Init();
     440:	0e 94 af 06 	call	0xd5e	; 0xd5e <H_H_Bridge_Init>
	M_ADC_INIT();
     444:	0e 94 df 08 	call	0x11be	; 0x11be <M_ADC_INIT>
	H_H_Bridge_Init();
     448:	0e 94 af 06 	call	0xd5e	; 0xd5e <H_H_Bridge_Init>
	TIMER1_Init();
     44c:	0e 94 39 0c 	call	0x1872	; 0x1872 <TIMER1_Init>
	M_Timer1_CallBackFn(TimerISR);
     450:	80 e9       	ldi	r24, 0x90	; 144
     452:	91 e0       	ldi	r25, 0x01	; 1
     454:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <M_Timer1_CallBackFn>
	TIMER0_Init();
     458:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <TIMER0_Init>
	TIMER0_SetCompVal(2);
     45c:	82 e0       	ldi	r24, 0x02	; 2
     45e:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <TIMER0_SetCompVal>
	M_EXTI_Init();
     462:	0e 94 41 0b 	call	0x1682	; 0x1682 <M_EXTI_Init>
	M_Dio_PinMode(PB3,OUTPUT);
     466:	61 e0       	ldi	r22, 0x01	; 1
     468:	87 e1       	ldi	r24, 0x17	; 23
     46a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <M_Dio_PinMode>
	M_GIE_EnableGlobal();
     46e:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <M_GIE_EnableGlobal>
	H_Led_Init(LED0);
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	0e 94 6d 08 	call	0x10da	; 0x10da <H_Led_Init>
	H_Led_Init(LED1);
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	0e 94 6d 08 	call	0x10da	; 0x10da <H_Led_Init>
	H_Led_Init(LED2);
     47e:	82 e0       	ldi	r24, 0x02	; 2
     480:	0e 94 6d 08 	call	0x10da	; 0x10da <H_Led_Init>
	H_Led_Init(LED3);
     484:	83 e0       	ldi	r24, 0x03	; 3
     486:	0e 94 6d 08 	call	0x10da	; 0x10da <H_Led_Init>
	H_Led_Init(LED4);
     48a:	84 e0       	ldi	r24, 0x04	; 4
     48c:	0e 94 6d 08 	call	0x10da	; 0x10da <H_Led_Init>
	H_KeyPad_Init();
     490:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <H_KeyPad_Init>
    M_EXTI_CallBack(INT0,X_ISR);
     494:	67 e7       	ldi	r22, 0x77	; 119
     496:	70 e0       	ldi	r23, 0x00	; 0
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <M_EXTI_CallBack>
	/*************************************************LOCAL_VARIABLES***********************************************/
	u8 Local_u8_ID = TAKE_ID;
	u8 Local_u8_AdminID = 0;
	u8 Local_u8_AdminCounter = 0;
	u8 Local_u8_IDAndPass[40] = {0};
     49e:	fe 01       	movw	r30, r28
     4a0:	31 96       	adiw	r30, 0x01	; 1
     4a2:	88 e2       	ldi	r24, 0x28	; 40
     4a4:	df 01       	movw	r26, r30
     4a6:	1d 92       	st	X+, r1
     4a8:	8a 95       	dec	r24
     4aa:	e9 f7       	brne	.-6      	; 0x4a6 <main+0x86>
																   HC-05  --> ADMIN_MODE
																   KEYPAD --> USER_MODE
																	
																						*/
																	
	LCD_Welcome();
     4ac:	0e 94 84 00 	call	0x108	; 0x108 <LCD_Welcome>
	u8 Local_u8_EEPROMCount = 0;
	u8 Local_u8_Variable1 =0;
	u8 Local_u8_Variable2 =0;
	u8 Local_u8_Variable3 =0;
	u8 Local_u8_Variable4 =0;
	u8 Local_u8_Variable5 =0;
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	04 c0       	rjmp	.+8      	; 0x4bc <main+0x9c>
	LCD_Welcome();
	while(WATING_FOR_A)
	{ 
		while (Local_u8_Variable13 == 0)
		{
					Local_u8_Variable5 = HC05_Rx();
     4b4:	0e 94 ac 06 	call	0xd58	; 0xd58 <HC05_Rx>
					if(Local_u8_Variable5 != 0)
     4b8:	81 11       	cpse	r24, r1
     4ba:	04 c0       	rjmp	.+8      	; 0x4c4 <main+0xa4>
																						*/
																	
	LCD_Welcome();
	while(WATING_FOR_A)
	{ 
		while (Local_u8_Variable13 == 0)
     4bc:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <Local_u8_Variable13>
     4c0:	99 23       	and	r25, r25
     4c2:	c1 f3       	breq	.-16     	; 0x4b4 <main+0x94>

		}
	
		

		if(Local_u8_Variable5 == 'A' || Local_u8_Variable5 == 'a')
     4c4:	81 34       	cpi	r24, 0x41	; 65
     4c6:	41 f0       	breq	.+16     	; 0x4d8 <main+0xb8>
     4c8:	81 36       	cpi	r24, 0x61	; 97
     4ca:	41 f0       	breq	.+16     	; 0x4dc <main+0xbc>
		{
			Local_u8_Mode = ADMIN_MODE; 
			break;
		}
		else if(Local_u8_Variable6 == 'A')
     4cc:	90 91 fa 02 	lds	r25, 0x02FA	; 0x8002fa <__data_end>
     4d0:	91 34       	cpi	r25, 0x41	; 65
     4d2:	a1 f7       	brne	.-24     	; 0x4bc <main+0x9c>
		{
			Local_u8_Mode = USER_MODE;
     4d4:	05 e1       	ldi	r16, 0x15	; 21
     4d6:	03 c0       	rjmp	.+6      	; 0x4de <main+0xbe>
	
		

		if(Local_u8_Variable5 == 'A' || Local_u8_Variable5 == 'a')
		{
			Local_u8_Mode = ADMIN_MODE; 
     4d8:	04 e1       	ldi	r16, 0x14	; 20
     4da:	01 c0       	rjmp	.+2      	; 0x4de <main+0xbe>
     4dc:	04 e1       	ldi	r16, 0x14	; 20
	/***************************************************************REGISTER_ADMIN************************************************************/

														/*SUPPOSED TO WORK THE FIRST TIME ONLY*/
	
	
	Local_u8_EEPROM = EEPROMINT_ReadByte(FIRST_BYTE); // IF EMPTY --> THERE'S NO ADMIN JUST YET
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	0e 94 98 06 	call	0xd30	; 0xd30 <EEPROMINT_ReadByte>
     4e6:	f8 2e       	mov	r15, r24
	
	if(Local_u8_EEPROM == EMPTY)
     4e8:	bf ef       	ldi	r27, 0xFF	; 255
     4ea:	8b 13       	cpse	r24, r27
     4ec:	a0 c0       	rjmp	.+320    	; 0x62e <main+0x20e>
	{
		
																		/*ID*/
																		
		UART_TxString(" The First time you need to create an admin");
     4ee:	8c e4       	ldi	r24, 0x4C	; 76
     4f0:	91 e0       	ldi	r25, 0x01	; 1
     4f2:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
     4f6:	2f ef       	ldi	r18, 0xFF	; 255
     4f8:	8e e9       	ldi	r24, 0x9E	; 158
     4fa:	94 e2       	ldi	r25, 0x24	; 36
     4fc:	21 50       	subi	r18, 0x01	; 1
     4fe:	80 40       	sbci	r24, 0x00	; 0
     500:	90 40       	sbci	r25, 0x00	; 0
     502:	e1 f7       	brne	.-8      	; 0x4fc <main+0xdc>
     504:	00 c0       	rjmp	.+0      	; 0x506 <main+0xe6>
     506:	00 00       	nop
		_delay_ms(DISPLAY_TIME);
		UART_Tx(NEXTLINE);
     508:	8d e0       	ldi	r24, 0x0D	; 13
     50a:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
		UART_TxString(" Enter Name: ");
     50e:	88 e7       	ldi	r24, 0x78	; 120
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
		UART_Tx(NEXTLINE);
     516:	8d e0       	ldi	r24, 0x0D	; 13
     518:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
	H_KeyPad_Init();
    M_EXTI_CallBack(INT0,X_ISR);
	/*************************************************LOCAL_VARIABLES***********************************************/
	u8 Local_u8_ID = TAKE_ID;
	u8 Local_u8_AdminID = 0;
	u8 Local_u8_AdminCounter = 0;
     51c:	10 e0       	ldi	r17, 0x00	; 0
		UART_TxString(" The First time you need to create an admin");
		_delay_ms(DISPLAY_TIME);
		UART_Tx(NEXTLINE);
		UART_TxString(" Enter Name: ");
		UART_Tx(NEXTLINE);
		while(Local_u8_Admin == NO_ADMIN)
     51e:	2c c0       	rjmp	.+88     	; 0x578 <main+0x158>
		{
			Local_u8_Variable3 = HC05_Rx();
     520:	0e 94 ac 06 	call	0xd58	; 0xd58 <HC05_Rx>
			
			if((Local_u8_Variable3 == ENTER) && (Local_u8_Error == ERROR)) //IF ENTER IS PRESSED ON A BLANK SCREEN
     524:	8d 30       	cpi	r24, 0x0D	; 13
     526:	e1 f4       	brne	.+56     	; 0x560 <main+0x140>
     528:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <Local_u8_Error>
     52c:	91 11       	cpse	r25, r1
     52e:	18 c0       	rjmp	.+48     	; 0x560 <main+0x140>
			{
				UART_TxString(" Error please try again");
     530:	86 e8       	ldi	r24, 0x86	; 134
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
     538:	af ef       	ldi	r26, 0xFF	; 255
     53a:	be e9       	ldi	r27, 0x9E	; 158
     53c:	24 e2       	ldi	r18, 0x24	; 36
     53e:	a1 50       	subi	r26, 0x01	; 1
     540:	b0 40       	sbci	r27, 0x00	; 0
     542:	20 40       	sbci	r18, 0x00	; 0
     544:	e1 f7       	brne	.-8      	; 0x53e <main+0x11e>
     546:	00 c0       	rjmp	.+0      	; 0x548 <main+0x128>
     548:	00 00       	nop
				_delay_ms(DISPLAY_TIME);
				UART_Tx(NEXTLINE);
     54a:	8d e0       	ldi	r24, 0x0D	; 13
     54c:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
				UART_TxString(" Enter Name: ");
     550:	88 e7       	ldi	r24, 0x78	; 120
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
				UART_Tx(NEXTLINE);
     558:	8d e0       	ldi	r24, 0x0D	; 13
     55a:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
     55e:	0c c0       	rjmp	.+24     	; 0x578 <main+0x158>
			}
			else if (Local_u8_Variable3 == ENTER)
     560:	8d 30       	cpi	r24, 0x0D	; 13
     562:	71 f0       	breq	.+28     	; 0x580 <main+0x160>
			{
				break; //STOP TAKING ID
			}
			else if(Local_u8_Variable3 != ENTER)
     564:	49 f0       	breq	.+18     	; 0x578 <main+0x158>
			{
				Local_u8_Error = NO_ERROR; //THE SCREEN IS NOT BLANK ANYMORE
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <Local_u8_Error>
				Local_u8_AdminID = Local_u8_Variable3;
				//_delay_ms(10);
				EEPROMINT_WriteByte(Local_u8_AdminCounter,Local_u8_AdminID);
     56c:	68 2f       	mov	r22, r24
     56e:	81 2f       	mov	r24, r17
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	0e 94 7f 06 	call	0xcfe	; 0xcfe <EEPROMINT_WriteByte>
				Local_u8_AdminCounter++;
     576:	1f 5f       	subi	r17, 0xFF	; 255
		UART_TxString(" The First time you need to create an admin");
		_delay_ms(DISPLAY_TIME);
		UART_Tx(NEXTLINE);
		UART_TxString(" Enter Name: ");
		UART_Tx(NEXTLINE);
		while(Local_u8_Admin == NO_ADMIN)
     578:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <Local_u8_Admin>
     57c:	88 23       	and	r24, r24
     57e:	81 f2       	breq	.-96     	; 0x520 <main+0x100>
				//Do Nothing
			}
		}
		
		
		Local_u8_Error = ERROR; //SETTING IT BACK TO MAKE ANOTHER CHECK ON ANOTHER ITERATION
     580:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <Local_u8_Error>
		UART_Tx(NEXTLINE);
     584:	8d e0       	ldi	r24, 0x0D	; 13
     586:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
     58a:	8f ef       	ldi	r24, 0xFF	; 255
     58c:	9e e9       	ldi	r25, 0x9E	; 158
     58e:	a4 e2       	ldi	r26, 0x24	; 36
     590:	81 50       	subi	r24, 0x01	; 1
     592:	90 40       	sbci	r25, 0x00	; 0
     594:	a0 40       	sbci	r26, 0x00	; 0
     596:	e1 f7       	brne	.-8      	; 0x590 <main+0x170>
     598:	00 c0       	rjmp	.+0      	; 0x59a <main+0x17a>
     59a:	00 00       	nop
		_delay_ms(DISPLAY_TIME);

		
		
																	/*PASSWORD*/
		UART_TxString("Now Enter Password: ");
     59c:	8e e9       	ldi	r24, 0x9E	; 158
     59e:	91 e0       	ldi	r25, 0x01	; 1
     5a0:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
		UART_Tx(NEXTLINE);
     5a4:	8d e0       	ldi	r24, 0x0D	; 13
     5a6:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
		while(Local_u8_Admin == NO_ADMIN)
     5aa:	3c c0       	rjmp	.+120    	; 0x624 <main+0x204>
		{
			Local_u8_Variable4 = HC05_Rx();
     5ac:	0e 94 ac 06 	call	0xd58	; 0xd58 <HC05_Rx>

			if((Local_u8_Variable4 == ENTER) && (Local_u8_Error == ERROR))
     5b0:	8d 30       	cpi	r24, 0x0D	; 13
     5b2:	e1 f4       	brne	.+56     	; 0x5ec <main+0x1cc>
     5b4:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <Local_u8_Error>
     5b8:	91 11       	cpse	r25, r1
     5ba:	18 c0       	rjmp	.+48     	; 0x5ec <main+0x1cc>
			{
				UART_TxString("Error please try again");
     5bc:	87 e8       	ldi	r24, 0x87	; 135
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
     5c4:	bf ef       	ldi	r27, 0xFF	; 255
     5c6:	2e e9       	ldi	r18, 0x9E	; 158
     5c8:	84 e2       	ldi	r24, 0x24	; 36
     5ca:	b1 50       	subi	r27, 0x01	; 1
     5cc:	20 40       	sbci	r18, 0x00	; 0
     5ce:	80 40       	sbci	r24, 0x00	; 0
     5d0:	e1 f7       	brne	.-8      	; 0x5ca <main+0x1aa>
     5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <main+0x1b4>
     5d4:	00 00       	nop
				_delay_ms(DISPLAY_TIME);
				UART_Tx(NEXTLINE);
     5d6:	8d e0       	ldi	r24, 0x0D	; 13
     5d8:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
				UART_TxString("Password: ");
     5dc:	88 ea       	ldi	r24, 0xA8	; 168
     5de:	91 e0       	ldi	r25, 0x01	; 1
     5e0:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
				UART_Tx(NEXTLINE);
     5e4:	8d e0       	ldi	r24, 0x0D	; 13
     5e6:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
     5ea:	1c c0       	rjmp	.+56     	; 0x624 <main+0x204>
			}
			else if(Local_u8_Variable4 != ENTER)
     5ec:	8d 30       	cpi	r24, 0x0D	; 13
     5ee:	51 f0       	breq	.+20     	; 0x604 <main+0x1e4>
			{
				Local_u8_Error = NO_ERROR;
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <Local_u8_Error>
				Local_u8_AdminID = Local_u8_Variable4;
				EEPROMINT_WriteByte(Local_u8_AdminCounter,Local_u8_AdminID);
     5f6:	68 2f       	mov	r22, r24
     5f8:	81 2f       	mov	r24, r17
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	0e 94 7f 06 	call	0xcfe	; 0xcfe <EEPROMINT_WriteByte>
				Local_u8_AdminCounter++;
     600:	1f 5f       	subi	r17, 0xFF	; 255
     602:	10 c0       	rjmp	.+32     	; 0x624 <main+0x204>
			}
			else if(Local_u8_Variable4 == ENTER)
     604:	8d 30       	cpi	r24, 0x0D	; 13
     606:	71 f4       	brne	.+28     	; 0x624 <main+0x204>
			{
				EEPROMINT_WriteByte(Local_u8_AdminCounter,END_OF_CREDENTIALS);//END OF ID & PASS
     608:	64 e2       	ldi	r22, 0x24	; 36
     60a:	81 2f       	mov	r24, r17
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <EEPROMINT_WriteByte>
				Local_u8_AdminCounter++;
     612:	1f 5f       	subi	r17, 0xFF	; 255
				EEPROMINT_WriteByte(LAST_BYTE,Local_u8_AdminCounter);
     614:	61 2f       	mov	r22, r17
     616:	8f ef       	ldi	r24, 0xFF	; 255
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	0e 94 7f 06 	call	0xcfe	; 0xcfe <EEPROMINT_WriteByte>
				Local_u8_Admin = ADMIN_EXISTS;//EXIT WHILE
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <Local_u8_Admin>
		
		
																	/*PASSWORD*/
		UART_TxString("Now Enter Password: ");
		UART_Tx(NEXTLINE);
		while(Local_u8_Admin == NO_ADMIN)
     624:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <Local_u8_Admin>
     628:	88 23       	and	r24, r24
     62a:	09 f4       	brne	.+2      	; 0x62e <main+0x20e>
     62c:	bf cf       	rjmp	.-130    	; 0x5ac <main+0x18c>
				EEPROMINT_WriteByte(LAST_BYTE,Local_u8_AdminCounter);
				Local_u8_Admin = ADMIN_EXISTS;//EXIT WHILE
			}
		}
	}
	Local_u8_Error = NO_ERROR;	
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <Local_u8_Error>
	/***************************************************************LOGIN*******************************************************************/
	 while (STILL_LOGGING_IN)
	 {
		 if(Local_u8_Mode == ADMIN_MODE)
     634:	04 31       	cpi	r16, 0x14	; 20
     636:	09 f0       	breq	.+2      	; 0x63a <main+0x21a>
     638:	37 c2       	rjmp	.+1134   	; 0xaa8 <__stack+0x249>
		 {
			 UART_TxString(" Log In");
     63a:	83 eb       	ldi	r24, 0xB3	; 179
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
			 UART_Tx(NEXTLINE);
     642:	8d e0       	ldi	r24, 0x0D	; 13
     644:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
	u8 Local_u8_AdminID = 0;
	u8 Local_u8_AdminCounter = 0;
	u8 Local_u8_IDAndPass[40] = {0};
	u8 Local_u8_counter = 0;
	u8 Local_u8_ForLoopcounter = 0;
	u8 Local_u8_Trials = 3;
     648:	03 e0       	ldi	r16, 0x03	; 3
		 if(Local_u8_Mode == ADMIN_MODE)
		 {
			 UART_TxString(" Log In");
			 UART_Tx(NEXTLINE);
			 
			 while(Local_u8_EEPROM != END_OF_CREDENTIALS)
     64a:	b7 c0       	rjmp	.+366    	; 0x7ba <main+0x39a>
			 {
				 
																		/*ENTER ID*/
				 
				 UART_TxString("ID:");
     64c:	8c eb       	ldi	r24, 0xBC	; 188
     64e:	91 e0       	ldi	r25, 0x01	; 1
     650:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
				 while(Local_u8_ID == TAKE_ID)
     654:	10 e0       	ldi	r17, 0x00	; 0
     656:	ee 24       	eor	r14, r14
     658:	e3 94       	inc	r14
     65a:	27 c0       	rjmp	.+78     	; 0x6aa <main+0x28a>
				 {
					 Local_u8_Variable1 = HC05_Rx();
     65c:	0e 94 ac 06 	call	0xd58	; 0xd58 <HC05_Rx>
					 
					 if( (Local_u8_Variable1 == ENTER) && (Local_u8_Error == ERROR))
     660:	8d 30       	cpi	r24, 0x0D	; 13
     662:	81 f4       	brne	.+32     	; 0x684 <main+0x264>
     664:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <Local_u8_Error>
     668:	91 11       	cpse	r25, r1
     66a:	0c c0       	rjmp	.+24     	; 0x684 <main+0x264>
					 {
						 UART_TxString(" Error please try again");
     66c:	86 e8       	ldi	r24, 0x86	; 134
     66e:	91 e0       	ldi	r25, 0x01	; 1
     670:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
				         UART_Tx(NEXTLINE);
     674:	8d e0       	ldi	r24, 0x0D	; 13
     676:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
						 UART_TxString(" ID:");
     67a:	8b eb       	ldi	r24, 0xBB	; 187
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
     682:	13 c0       	rjmp	.+38     	; 0x6aa <main+0x28a>
					 }
					 else if(Local_u8_Variable1 == ENTER)
     684:	8d 30       	cpi	r24, 0x0D	; 13
     686:	21 f4       	brne	.+8      	; 0x690 <main+0x270>
					 {
						 Local_u8_Error = ERROR;
     688:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <Local_u8_Error>
						 Local_u8_ID = STOP_TAKING_ID;//STOP TAKING ID
     68c:	e1 2c       	mov	r14, r1
     68e:	0d c0       	rjmp	.+26     	; 0x6aa <main+0x28a>
					 }
					 else if(Local_u8_Variable1 != ENTER)
     690:	8d 30       	cpi	r24, 0x0D	; 13
     692:	59 f0       	breq	.+22     	; 0x6aa <main+0x28a>
					 {
						 Local_u8_Error = NO_ERROR;
     694:	91 e0       	ldi	r25, 0x01	; 1
     696:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <Local_u8_Error>
						 Local_u8_IDAndPass[Local_u8_counter] = Local_u8_Variable1;
     69a:	e1 e0       	ldi	r30, 0x01	; 1
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	ec 0f       	add	r30, r28
     6a0:	fd 1f       	adc	r31, r29
     6a2:	e1 0f       	add	r30, r17
     6a4:	f1 1d       	adc	r31, r1
     6a6:	80 83       	st	Z, r24
						 Local_u8_counter++;
     6a8:	1f 5f       	subi	r17, 0xFF	; 255
			 {
				 
																		/*ENTER ID*/
				 
				 UART_TxString("ID:");
				 while(Local_u8_ID == TAKE_ID)
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	e9 16       	cp	r14, r25
     6ae:	b1 f2       	breq	.-84     	; 0x65c <main+0x23c>
					 }
				 }
				 
																		 /*ENTER PASSWORD*/
																		 
		         UART_Tx(NEXTLINE);
     6b0:	8d e0       	ldi	r24, 0x0D	; 13
     6b2:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
				 UART_TxString(" PASSWORD: ");
     6b6:	80 ec       	ldi	r24, 0xC0	; 192
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
		         UART_Tx(NEXTLINE);
     6be:	8d e0       	ldi	r24, 0x0D	; 13
     6c0:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
				 
				 while(Local_u8_ID == START_TAKING_PASS)
     6c4:	2b c0       	rjmp	.+86     	; 0x71c <main+0x2fc>
				 {
					 Local_u8_Variable2 = HC05_Rx();
     6c6:	0e 94 ac 06 	call	0xd58	; 0xd58 <HC05_Rx>
					 
					 if((Local_u8_Variable2 == ENTER) && (Local_u8_Error == ERROR))
     6ca:	8d 30       	cpi	r24, 0x0D	; 13
     6cc:	99 f4       	brne	.+38     	; 0x6f4 <main+0x2d4>
     6ce:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <Local_u8_Error>
     6d2:	91 11       	cpse	r25, r1
     6d4:	0f c0       	rjmp	.+30     	; 0x6f4 <main+0x2d4>
					 {
						 UART_TxString(" Error please try again");
     6d6:	86 e8       	ldi	r24, 0x86	; 134
     6d8:	91 e0       	ldi	r25, 0x01	; 1
     6da:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
		                 UART_Tx(NEXTLINE);
     6de:	8d e0       	ldi	r24, 0x0D	; 13
     6e0:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
						 UART_TxString(" PASSWORD: ");
     6e4:	80 ec       	ldi	r24, 0xC0	; 192
     6e6:	91 e0       	ldi	r25, 0x01	; 1
     6e8:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
		                 UART_Tx(NEXTLINE);
     6ec:	8d e0       	ldi	r24, 0x0D	; 13
     6ee:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
     6f2:	14 c0       	rjmp	.+40     	; 0x71c <main+0x2fc>
					 }
					 else if(Local_u8_Variable2 == ENTER)
     6f4:	8d 30       	cpi	r24, 0x0D	; 13
     6f6:	29 f4       	brne	.+10     	; 0x702 <main+0x2e2>
					 {
						 Local_u8_Error = ERROR;
     6f8:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <Local_u8_Error>
						 Local_u8_ID = STOP_TAKING_PASS; //Breaks
     6fc:	ee 24       	eor	r14, r14
     6fe:	e3 94       	inc	r14
     700:	0d c0       	rjmp	.+26     	; 0x71c <main+0x2fc>
					 }
					 
					 /*Enter the password you want untill 'ENTER'*/
					 else if(Local_u8_Variable2 != ENTER)
     702:	8d 30       	cpi	r24, 0x0D	; 13
     704:	59 f0       	breq	.+22     	; 0x71c <main+0x2fc>
					 {
						 Local_u8_Error = NO_ERROR;
     706:	91 e0       	ldi	r25, 0x01	; 1
     708:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <Local_u8_Error>
						 Local_u8_IDAndPass[Local_u8_counter] = Local_u8_Variable2;
     70c:	e1 e0       	ldi	r30, 0x01	; 1
     70e:	f0 e0       	ldi	r31, 0x00	; 0
     710:	ec 0f       	add	r30, r28
     712:	fd 1f       	adc	r31, r29
     714:	e1 0f       	add	r30, r17
     716:	f1 1d       	adc	r31, r1
     718:	80 83       	st	Z, r24
						 Local_u8_counter++;
     71a:	1f 5f       	subi	r17, 0xFF	; 255
																		 
		         UART_Tx(NEXTLINE);
				 UART_TxString(" PASSWORD: ");
		         UART_Tx(NEXTLINE);
				 
				 while(Local_u8_ID == START_TAKING_PASS)
     71c:	ee 20       	and	r14, r14
     71e:	99 f2       	breq	.-90     	; 0x6c6 <main+0x2a6>
     720:	e1 2c       	mov	r14, r1
     722:	10 e0       	ldi	r17, 0x00	; 0
     724:	46 c0       	rjmp	.+140    	; 0x7b2 <main+0x392>
				 {
					 Local_u8_ForLoopcounter = 0;
					 Local_u8_EEPROMCount = FIRST_EEPROM_PLACE; // --> PLACE NOT VALUE!
					 for(Local_u8_ForLoopcounter; Local_u8_ForLoopcounter < sizeof(Local_u8_IDAndPass) ; Local_u8_ForLoopcounter++)
					 {
						 Local_u8_EEPROM = EEPROMINT_ReadByte(Local_u8_EEPROMCount); //Reading EEPROM consecutively
     726:	8e 2d       	mov	r24, r14
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	0e 94 98 06 	call	0xd30	; 0xd30 <EEPROMINT_ReadByte>
     72e:	f8 2e       	mov	r15, r24
						 Local_u8_EEPROMCount++;
     730:	e3 94       	inc	r14
						 if(Local_u8_EEPROM == END_OF_CREDENTIALS)// while can't break before the for in it
     732:	a4 e2       	ldi	r26, 0x24	; 36
     734:	8a 17       	cp	r24, r26
     736:	09 f4       	brne	.+2      	; 0x73a <main+0x31a>
     738:	3f c0       	rjmp	.+126    	; 0x7b8 <main+0x398>
						 {
							 break;
						 }
						 else if(Local_u8_IDAndPass[Local_u8_ForLoopcounter] != Local_u8_EEPROM && Local_u8_Wrong == 10 )
     73a:	e1 e0       	ldi	r30, 0x01	; 1
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	ec 0f       	add	r30, r28
     740:	fd 1f       	adc	r31, r29
     742:	e1 0f       	add	r30, r17
     744:	f1 1d       	adc	r31, r1
     746:	80 81       	ld	r24, Z
     748:	f8 16       	cp	r15, r24
     74a:	91 f1       	breq	.+100    	; 0x7b0 <main+0x390>
						 {
		                     UART_Tx(NEXTLINE);
     74c:	8d e0       	ldi	r24, 0x0D	; 13
     74e:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
							 UART_TxString(" Wrong ID/PASS");
     752:	8c ec       	ldi	r24, 0xCC	; 204
     754:	91 e0       	ldi	r25, 0x01	; 1
     756:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
		                     UART_Tx(NEXTLINE);
     75a:	8d e0       	ldi	r24, 0x0D	; 13
     75c:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
							 switch(Local_u8_Trials)
     760:	02 30       	cpi	r16, 0x02	; 2
     762:	69 f0       	breq	.+26     	; 0x77e <main+0x35e>
     764:	03 30       	cpi	r16, 0x03	; 3
     766:	19 f0       	breq	.+6      	; 0x76e <main+0x34e>
     768:	01 30       	cpi	r16, 0x01	; 1
     76a:	31 f5       	brne	.+76     	; 0x7b8 <main+0x398>
     76c:	10 c0       	rjmp	.+32     	; 0x78e <main+0x36e>
							 {
								 case TWO_TRIALS:
								 UART_TxString(" 2 trials left ");
     76e:	8b ed       	ldi	r24, 0xDB	; 219
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
		                         UART_Tx(NEXTLINE);
     776:	8d e0       	ldi	r24, 0x0D	; 13
     778:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
								 break;
     77c:	1d c0       	rjmp	.+58     	; 0x7b8 <main+0x398>
								 case ONE_TRIAL:
								 UART_TxString(" 1 trial left ");
     77e:	8b ee       	ldi	r24, 0xEB	; 235
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
		                         UART_Tx(NEXTLINE);
     786:	8d e0       	ldi	r24, 0x0D	; 13
     788:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
								 break;
     78c:	15 c0       	rjmp	.+42     	; 0x7b8 <main+0x398>
								 case ZERO_TRIALS:
		                         UART_Tx(NEXTLINE);
     78e:	8d e0       	ldi	r24, 0x0D	; 13
     790:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
								 UART_TxString(" EMERGENCY");
     794:	8a ef       	ldi	r24, 0xFA	; 250
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
		                         UART_Tx(NEXTLINE);
     79c:	8d e0       	ldi	r24, 0x0D	; 13
     79e:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
								 UART_TxString(" CALLING 911");
     7a2:	85 e0       	ldi	r24, 0x05	; 5
     7a4:	92 e0       	ldi	r25, 0x02	; 2
     7a6:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
								 while (EMERGENCY)
								 {
									 H_Buzzer_On();
     7aa:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <H_Buzzer_On>
     7ae:	fd cf       	rjmp	.-6      	; 0x7aa <main+0x38a>
															
				 for(Local_u8_Trials ; Local_u8_Trials >= NO_TRIALS ; --Local_u8_Trials)
				 {
					 Local_u8_ForLoopcounter = 0;
					 Local_u8_EEPROMCount = FIRST_EEPROM_PLACE; // --> PLACE NOT VALUE!
					 for(Local_u8_ForLoopcounter; Local_u8_ForLoopcounter < sizeof(Local_u8_IDAndPass) ; Local_u8_ForLoopcounter++)
     7b0:	1f 5f       	subi	r17, 0xFF	; 255
     7b2:	18 32       	cpi	r17, 0x28	; 40
     7b4:	08 f4       	brcc	.+2      	; 0x7b8 <main+0x398>
     7b6:	b7 cf       	rjmp	.-146    	; 0x726 <main+0x306>
							 break; // don't keep searching in the wrong user and pass
						 }
					 }
					 Local_u8_counter = RESET;
					 Local_u8_ID = TAKE_ID; //RESETTING IT TO DEFAULT --> PREPARING TO LOOP AGAIN
					 --Local_u8_Trials;
     7b8:	01 50       	subi	r16, 0x01	; 1
		 if(Local_u8_Mode == ADMIN_MODE)
		 {
			 UART_TxString(" Log In");
			 UART_Tx(NEXTLINE);
			 
			 while(Local_u8_EEPROM != END_OF_CREDENTIALS)
     7ba:	b4 e2       	ldi	r27, 0x24	; 36
     7bc:	fb 12       	cpse	r15, r27
     7be:	46 cf       	rjmp	.-372    	; 0x64c <main+0x22c>
					 --Local_u8_Trials;
					 break; //GO DO THE 'while(Local_u8_EEPROM != END_OF_CREDENTIALS)' AGAIN (BREAK FROM THE OUTTER FOR LOOP)
				 }	 
			 }
	/***************************************************************END_OF_LOGIN*******************************************************************/
		     UART_Tx(NEXTLINE);
     7c0:	8d e0       	ldi	r24, 0x0D	; 13
     7c2:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
			 UART_TxString(" Successful LOGIN");
     7c6:	82 e1       	ldi	r24, 0x12	; 18
     7c8:	92 e0       	ldi	r25, 0x02	; 2
     7ca:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
		     UART_Tx(NEXTLINE);
     7ce:	8d e0       	ldi	r24, 0x0D	; 13
     7d0:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
	
	/***************************************************************MAIN_MENU*******************************************************************/
			 while(WAITING_FOR_CHOICE)
			 {
				 UART_TxString(" 1-ADD USER");
     7d4:	84 e2       	ldi	r24, 0x24	; 36
     7d6:	92 e0       	ldi	r25, 0x02	; 2
     7d8:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
			     UART_Tx(NEXTLINE);
     7dc:	8d e0       	ldi	r24, 0x0D	; 13
     7de:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
				 UART_TxString(" 2-REMOVE USER");
     7e2:	80 e3       	ldi	r24, 0x30	; 48
     7e4:	92 e0       	ldi	r25, 0x02	; 2
     7e6:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
		         UART_Tx(NEXTLINE);
     7ea:	8d e0       	ldi	r24, 0x0D	; 13
     7ec:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
				 UART_TxString(" 3-MENU");
     7f0:	8f e3       	ldi	r24, 0x3F	; 63
     7f2:	92 e0       	ldi	r25, 0x02	; 2
     7f4:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
				 
				 
				 Local_u8_AdminCounter = EEPROMINT_ReadByte(LAST_BYTE);//UPDATE THE COUNTER
     7f8:	8f ef       	ldi	r24, 0xFF	; 255
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	0e 94 98 06 	call	0xd30	; 0xd30 <EEPROMINT_ReadByte>
     800:	18 2f       	mov	r17, r24
				 Local_u8_Variable7 = HC05_Rx();
     802:	0e 94 ac 06 	call	0xd58	; 0xd58 <HC05_Rx>
				 switch (Local_u8_Variable7)
     806:	82 33       	cpi	r24, 0x32	; 50
     808:	09 f4       	brne	.+2      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     80a:	82 c0       	rjmp	.+260    	; 0x910 <__stack+0xb1>
     80c:	83 33       	cpi	r24, 0x33	; 51
     80e:	09 f4       	brne	.+2      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     810:	f8 c0       	rjmp	.+496    	; 0xa02 <__stack+0x1a3>
     812:	81 33       	cpi	r24, 0x31	; 49
     814:	f9 f6       	brne	.-66     	; 0x7d4 <main+0x3b4>
				 {
					 case ADD_USER:
		             UART_Tx(NEXTLINE);
     816:	8d e0       	ldi	r24, 0x0D	; 13
     818:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
					 UART_TxString(" ID: ");
     81c:	87 e4       	ldi	r24, 0x47	; 71
     81e:	92 e0       	ldi	r25, 0x02	; 2
     820:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
					 while(ADDING_ID)
					 {
						 Local_u8_Variable8 = HC05_Rx();
     824:	0e 94 ac 06 	call	0xd58	; 0xd58 <HC05_Rx>
						 
						 if( (Local_u8_Variable8 == ENTER) && (Local_u8_Error == ERROR))
     828:	8d 30       	cpi	r24, 0x0D	; 13
     82a:	99 f4       	brne	.+38     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
     82c:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <Local_u8_Error>
     830:	91 11       	cpse	r25, r1
     832:	0f c0       	rjmp	.+30     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
						 {
							 UART_TxString(" Error please try again");
     834:	86 e8       	ldi	r24, 0x86	; 134
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
		                     UART_Tx(NEXTLINE);
     83c:	8d e0       	ldi	r24, 0x0D	; 13
     83e:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
							 UART_TxString(" ID: ");
     842:	87 e4       	ldi	r24, 0x47	; 71
     844:	92 e0       	ldi	r25, 0x02	; 2
     846:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
		                     UART_Tx(NEXTLINE);
     84a:	8d e0       	ldi	r24, 0x0D	; 13
     84c:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
     850:	e9 cf       	rjmp	.-46     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
						 }
						 
						 else if(Local_u8_Variable8 == ENTER)
     852:	8d 30       	cpi	r24, 0x0D	; 13
     854:	a1 f4       	brne	.+40     	; 0x87e <__stack+0x1f>
						 {
							 Local_u8_Error = ERROR;
     856:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <Local_u8_Error>
							 EEPROMINT_WriteByte(LAST_BYTE,Local_u8_AdminCounter);//can be removed as counter is saved after password Right?!!
     85a:	61 2f       	mov	r22, r17
     85c:	8f ef       	ldi	r24, 0xFF	; 255
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	0e 94 7f 06 	call	0xcfe	; 0xcfe <EEPROMINT_WriteByte>
							 EEPROMINT_WriteByte(Local_u8_AdminCounter,Local_u8_AdminID);
							 Local_u8_AdminCounter++;
						 }
					 }
					 
		             UART_Tx(NEXTLINE);
     864:	8d e0       	ldi	r24, 0x0D	; 13
     866:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
					 UART_TxString(" PASSWORD:");
     86a:	8d e4       	ldi	r24, 0x4D	; 77
     86c:	92 e0       	ldi	r25, 0x02	; 2
     86e:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
					 Local_u8_AdminCounter = EEPROMINT_ReadByte(LAST_BYTE);//UPDATE THE COUNTER
     872:	8f ef       	ldi	r24, 0xFF	; 255
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	0e 94 98 06 	call	0xd30	; 0xd30 <EEPROMINT_ReadByte>
     87a:	18 2f       	mov	r17, r24
     87c:	0c c0       	rjmp	.+24     	; 0x896 <__stack+0x37>
						 {
							 Local_u8_Error = ERROR;
							 EEPROMINT_WriteByte(LAST_BYTE,Local_u8_AdminCounter);//can be removed as counter is saved after password Right?!!
							 break;//END OF TAKING ID
						 }
						 else if(Local_u8_Variable8 != ENTER)
     87e:	8d 30       	cpi	r24, 0x0D	; 13
     880:	89 f2       	breq	.-94     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
						 {
							 Local_u8_Error = NO_ERROR;
     882:	91 e0       	ldi	r25, 0x01	; 1
     884:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <Local_u8_Error>
							 Local_u8_AdminID = Local_u8_Variable8;
							 //_delay_ms(10);
							 EEPROMINT_WriteByte(Local_u8_AdminCounter,Local_u8_AdminID);
     888:	68 2f       	mov	r22, r24
     88a:	81 2f       	mov	r24, r17
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <EEPROMINT_WriteByte>
							 Local_u8_AdminCounter++;
     892:	1f 5f       	subi	r17, 0xFF	; 255
     894:	c7 cf       	rjmp	.-114    	; 0x824 <__DATA_REGION_LENGTH__+0x24>
					 UART_TxString(" PASSWORD:");
					 Local_u8_AdminCounter = EEPROMINT_ReadByte(LAST_BYTE);//UPDATE THE COUNTER
					 
					 while(ADDING_PASS)
					 {
						 Local_u8_Variable9 = HC05_Rx();
     896:	0e 94 ac 06 	call	0xd58	; 0xd58 <HC05_Rx>
			
						 if( (Local_u8_Variable9 == ENTER) && (Local_u8_Error == ERROR))
     89a:	8d 30       	cpi	r24, 0x0D	; 13
     89c:	99 f4       	brne	.+38     	; 0x8c4 <__stack+0x65>
     89e:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <Local_u8_Error>
     8a2:	91 11       	cpse	r25, r1
     8a4:	0f c0       	rjmp	.+30     	; 0x8c4 <__stack+0x65>
						 {
							 UART_TxString(" Error please try again");
     8a6:	86 e8       	ldi	r24, 0x86	; 134
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
		                     UART_Tx(NEXTLINE);
     8ae:	8d e0       	ldi	r24, 0x0D	; 13
     8b0:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
							 UART_TxString(" PASSWORD:");
     8b4:	8d e4       	ldi	r24, 0x4D	; 77
     8b6:	92 e0       	ldi	r25, 0x02	; 2
     8b8:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
		                     UART_Tx(NEXTLINE);
     8bc:	8d e0       	ldi	r24, 0x0D	; 13
     8be:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
     8c2:	e9 cf       	rjmp	.-46     	; 0x896 <__stack+0x37>
						 }
						 else if(Local_u8_Variable9 != ENTER)
     8c4:	8d 30       	cpi	r24, 0x0D	; 13
     8c6:	51 f0       	breq	.+20     	; 0x8dc <__stack+0x7d>
						 {
							 Local_u8_Error = NO_ERROR;
     8c8:	91 e0       	ldi	r25, 0x01	; 1
     8ca:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <Local_u8_Error>
							 Local_u8_AdminID = Local_u8_Variable9;
						//	 H_Lcd_WriteCharacter(Local_u8_AdminID);
							 EEPROMINT_WriteByte(Local_u8_AdminCounter,Local_u8_AdminID);
     8ce:	68 2f       	mov	r22, r24
     8d0:	81 2f       	mov	r24, r17
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	0e 94 7f 06 	call	0xcfe	; 0xcfe <EEPROMINT_WriteByte>
							 Local_u8_AdminCounter++;
     8d8:	1f 5f       	subi	r17, 0xFF	; 255
     8da:	dd cf       	rjmp	.-70     	; 0x896 <__stack+0x37>
						 }
						 else if(Local_u8_Variable9 == ENTER)
     8dc:	8d 30       	cpi	r24, 0x0D	; 13
     8de:	d9 f6       	brne	.-74     	; 0x896 <__stack+0x37>
						 {
							 EEPROMINT_WriteByte(Local_u8_AdminCounter,END_OF_CREDENTIALS);
     8e0:	64 e2       	ldi	r22, 0x24	; 36
     8e2:	81 2f       	mov	r24, r17
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	0e 94 7f 06 	call	0xcfe	; 0xcfe <EEPROMINT_WriteByte>
							 Local_u8_Error = ERROR;
     8ea:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <Local_u8_Error>
							 Local_u8_AdminCounter++;
     8ee:	61 e0       	ldi	r22, 0x01	; 1
     8f0:	61 0f       	add	r22, r17
							 EEPROMINT_WriteByte(LAST_BYTE,Local_u8_AdminCounter);//UPDATE THE COUNTER (IN EEPROM)
     8f2:	8f ef       	ldi	r24, 0xFF	; 255
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	0e 94 7f 06 	call	0xcfe	; 0xcfe <EEPROMINT_WriteByte>
		                     UART_Tx(NEXTLINE);
     8fa:	8d e0       	ldi	r24, 0x0D	; 13
     8fc:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
							 UART_TxString(" USER ADDED");
     900:	88 e5       	ldi	r24, 0x58	; 88
     902:	92 e0       	ldi	r25, 0x02	; 2
     904:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
		                     UART_Tx(NEXTLINE);
     908:	8d e0       	ldi	r24, 0x0D	; 13
     90a:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
						 {
							 //Do Nothing
						 }
					 }
					 
					 break;
     90e:	62 cf       	rjmp	.-316    	; 0x7d4 <main+0x3b4>
					 case REMOVE_USER:
		             UART_Tx(NEXTLINE);
     910:	8d e0       	ldi	r24, 0x0D	; 13
     912:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
					 UART_TxString(" Enter ID&PASS");
     916:	84 e6       	ldi	r24, 0x64	; 100
     918:	92 e0       	ldi	r25, 0x02	; 2
     91a:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
					 UART_TxString(" Combined");
     91e:	83 e7       	ldi	r24, 0x73	; 115
     920:	92 e0       	ldi	r25, 0x02	; 2
     922:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
		             UART_Tx(NEXTLINE);
     926:	8d e0       	ldi	r24, 0x0D	; 13
     928:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
					 Local_u8_counter = RESET;
					 Local_u8_EEPROMCount = RESET;
     92c:	00 e0       	ldi	r16, 0x00	; 0
					 case REMOVE_USER:
		             UART_Tx(NEXTLINE);
					 UART_TxString(" Enter ID&PASS");
					 UART_TxString(" Combined");
		             UART_Tx(NEXTLINE);
					 Local_u8_counter = RESET;
     92e:	10 e0       	ldi	r17, 0x00	; 0
					 Local_u8_EEPROMCount = RESET;
					 u8 Local_u8_EEPROMTEMP = NONE;
					 u8 Local_u8_EEPROMVALUE = NONE;
					 while(TAKING_ID_PASS)
					 {
						 Local_u8_Variable10 = HC05_Rx();
     930:	0e 94 ac 06 	call	0xd58	; 0xd58 <HC05_Rx>
						 
						 if(Local_u8_Variable10 == ENTER)
     934:	8d 30       	cpi	r24, 0x0D	; 13
     936:	89 f0       	breq	.+34     	; 0x95a <__stack+0xfb>
						 {
							 break;
						 }
						 else if(Local_u8_Variable10 != ENTER)
     938:	d9 f3       	breq	.-10     	; 0x930 <__stack+0xd1>
						 {
							 Local_u8_IDAndPass[Local_u8_counter] = Local_u8_Variable10;
     93a:	e1 e0       	ldi	r30, 0x01	; 1
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	ec 0f       	add	r30, r28
     940:	fd 1f       	adc	r31, r29
     942:	e1 0f       	add	r30, r17
     944:	f1 1d       	adc	r31, r1
     946:	80 83       	st	Z, r24
							// H_Lcd_WriteCharacter(Local_u8_Variable10);
							 Local_u8_counter++;
     948:	1f 5f       	subi	r17, 0xFF	; 255
							 Local_u8_EEPROMVALUE = EEPROMINT_ReadByte(Local_u8_EEPROMCount) ;
     94a:	80 2f       	mov	r24, r16
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	0e 94 98 06 	call	0xd30	; 0xd30 <EEPROMINT_ReadByte>
							 if(Local_u8_EEPROMVALUE == END_OF_CREDENTIALS)
     952:	84 32       	cpi	r24, 0x24	; 36
     954:	69 f3       	breq	.-38     	; 0x930 <__stack+0xd1>
							 {
								 //Do Nothing
							 }
							 else
							 {
								 Local_u8_EEPROMCount++;
     956:	0f 5f       	subi	r16, 0xFF	; 255
     958:	eb cf       	rjmp	.-42     	; 0x930 <__stack+0xd1>
					 }
					 
					 while(REMOVING_USER)
					 {
						 u8 Local_u8_BREAK = NO;//END 'while(REMOVING_USER)' LOOP
						 if(Local_u8_EEPROMCount == LAST_PLACE)
     95a:	0f 3f       	cpi	r16, 0xFF	; 255
     95c:	79 f4       	brne	.+30     	; 0x97c <__stack+0x11d>
						 {
		                     UART_Tx(13);
     95e:	8d e0       	ldi	r24, 0x0D	; 13
     960:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
							 UART_TxString(" USER DOESN'T");
     964:	8d e7       	ldi	r24, 0x7D	; 125
     966:	92 e0       	ldi	r25, 0x02	; 2
     968:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
		                     UART_Tx(13);
     96c:	8d e0       	ldi	r24, 0x0D	; 13
     96e:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
							 UART_TxString(" EXIST");
     972:	8b e8       	ldi	r24, 0x8B	; 139
     974:	92 e0       	ldi	r25, 0x02	; 2
     976:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
							 break; //END 'while(REMOVING_USER)' LOOP
     97a:	2c cf       	rjmp	.-424    	; 0x7d4 <main+0x3b4>
						 }
						 else
						 {
							 Local_u8_counter = RESET;
							 Local_u8_EEPROMCount++;
     97c:	0f 5f       	subi	r16, 0xFF	; 255
							 Local_u8_EEPROMTEMP = Local_u8_EEPROMCount;
     97e:	10 2f       	mov	r17, r16
							 UART_TxString(" EXIST");
							 break; //END 'while(REMOVING_USER)' LOOP
						 }
						 else
						 {
							 Local_u8_counter = RESET;
     980:	e1 2c       	mov	r14, r1
							 Local_u8_EEPROMCount++;
							 Local_u8_EEPROMTEMP = Local_u8_EEPROMCount;
							 while(CHECKING)
							 {
								 if(Local_u8_IDAndPass[Local_u8_counter] == EEPROMINT_ReadByte(Local_u8_EEPROMTEMP))
     982:	e1 e0       	ldi	r30, 0x01	; 1
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	ec 0f       	add	r30, r28
     988:	fd 1f       	adc	r31, r29
     98a:	ee 0d       	add	r30, r14
     98c:	f1 1d       	adc	r31, r1
     98e:	f0 80       	ld	r15, Z
     990:	81 2f       	mov	r24, r17
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	0e 94 98 06 	call	0xd30	; 0xd30 <EEPROMINT_ReadByte>
     998:	f8 12       	cpse	r15, r24
     99a:	2a c0       	rjmp	.+84     	; 0x9f0 <__stack+0x191>
								 {
									 Local_u8_EEPROMCount++;
     99c:	0f 5f       	subi	r16, 0xFF	; 255
									 UART_Tx(NEXTLINE);
     99e:	8d e0       	ldi	r24, 0x0D	; 13
     9a0:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
									 UART_TxString(" CHECKING...");
     9a4:	82 e9       	ldi	r24, 0x92	; 146
     9a6:	92 e0       	ldi	r25, 0x02	; 2
     9a8:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
									 
									 if(EEPROMINT_ReadByte(Local_u8_EEPROMCount) == END_OF_CREDENTIALS)
     9ac:	80 2f       	mov	r24, r16
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	0e 94 98 06 	call	0xd30	; 0xd30 <EEPROMINT_ReadByte>
     9b4:	84 32       	cpi	r24, 0x24	; 36
     9b6:	c9 f4       	brne	.+50     	; 0x9ea <__stack+0x18b>
     9b8:	05 c0       	rjmp	.+10     	; 0x9c4 <__stack+0x165>
									 {
										 while(EEPROMINT_ReadByte(Local_u8_EEPROMTEMP) != END_OF_CREDENTIALS)
										 {
											 EEPROMINT_WriteByte(Local_u8_EEPROMTEMP,EMPTY);
     9ba:	6f ef       	ldi	r22, 0xFF	; 255
     9bc:	c7 01       	movw	r24, r14
     9be:	0e 94 7f 06 	call	0xcfe	; 0xcfe <EEPROMINT_WriteByte>
											 --Local_u8_EEPROMTEMP;
     9c2:	11 50       	subi	r17, 0x01	; 1
									 UART_Tx(NEXTLINE);
									 UART_TxString(" CHECKING...");
									 
									 if(EEPROMINT_ReadByte(Local_u8_EEPROMCount) == END_OF_CREDENTIALS)
									 {
										 while(EEPROMINT_ReadByte(Local_u8_EEPROMTEMP) != END_OF_CREDENTIALS)
     9c4:	e1 2e       	mov	r14, r17
     9c6:	f1 2c       	mov	r15, r1
     9c8:	c7 01       	movw	r24, r14
     9ca:	0e 94 98 06 	call	0xd30	; 0xd30 <EEPROMINT_ReadByte>
     9ce:	84 32       	cpi	r24, 0x24	; 36
     9d0:	a1 f7       	brne	.-24     	; 0x9ba <__stack+0x15b>
										 {
											 EEPROMINT_WriteByte(Local_u8_EEPROMTEMP,EMPTY);
											 --Local_u8_EEPROMTEMP;
										 }
										 UART_Tx(NEXTLINE);
     9d2:	8d e0       	ldi	r24, 0x0D	; 13
     9d4:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
										 UART_TxString(" USER DELETED");
     9d8:	8f e9       	ldi	r24, 0x9F	; 159
     9da:	92 e0       	ldi	r25, 0x02	; 2
     9dc:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
										 UART_Tx(NEXTLINE);
     9e0:	8d e0       	ldi	r24, 0x0D	; 13
     9e2:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
										 Local_u8_BREAK = YES;
     9e6:	81 e0       	ldi	r24, 0x01	; 1
										 break;//END 'while(CHECKING)' LOOP
     9e8:	08 c0       	rjmp	.+16     	; 0x9fa <__stack+0x19b>
									 }
									 Local_u8_EEPROMTEMP++;
     9ea:	1f 5f       	subi	r17, 0xFF	; 255
									 Local_u8_counter++;
     9ec:	e3 94       	inc	r14
     9ee:	c9 cf       	rjmp	.-110    	; 0x982 <__stack+0x123>
								 }
								 else
								 {
									 Local_u8_EEPROMTEMP++;
     9f0:	1f 5f       	subi	r17, 0xFF	; 255
									 Local_u8_EEPROMCount++;
     9f2:	0f 5f       	subi	r16, 0xFF	; 255
									 
									 if(Local_u8_EEPROMCount == LAST_PLACE)
     9f4:	0f 3f       	cpi	r16, 0xFF	; 255
     9f6:	29 f6       	brne	.-118    	; 0x982 <__stack+0x123>
						 }
					 }
					 
					 while(REMOVING_USER)
					 {
						 u8 Local_u8_BREAK = NO;//END 'while(REMOVING_USER)' LOOP
     9f8:	80 e0       	ldi	r24, 0x00	; 0
									 {
										 break;//END 'while(CHECKING)' LOOP
									 }
								 }
							 }
							 if(Local_u8_BREAK == YES)
     9fa:	81 30       	cpi	r24, 0x01	; 1
     9fc:	09 f0       	breq	.+2      	; 0xa00 <__stack+0x1a1>
     9fe:	ad cf       	rjmp	.-166    	; 0x95a <__stack+0xfb>
     a00:	e9 ce       	rjmp	.-558    	; 0x7d4 <main+0x3b4>
							 }
						 }
					 }
					 break;
					 case MENU:
					 UART_Tx(NEXTLINE);
     a02:	8d e0       	ldi	r24, 0x0D	; 13
     a04:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
					 UART_TxString(" Welcome sir");
     a08:	8d ea       	ldi	r24, 0xAD	; 173
     a0a:	92 e0       	ldi	r25, 0x02	; 2
     a0c:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
					 UART_Tx(NEXTLINE);
     a10:	8d e0       	ldi	r24, 0x0D	; 13
     a12:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
					 while (WAITING_FOR_CHOICE)
					 {
						  u8 Local_u8_FlagToMenu = 0;
						 UART_TxString(" 1-Door  2-Light");
     a16:	8a eb       	ldi	r24, 0xBA	; 186
     a18:	92 e0       	ldi	r25, 0x02	; 2
     a1a:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
						 UART_Tx(NEXTLINE);
     a1e:	8d e0       	ldi	r24, 0x0D	; 13
     a20:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
						 UART_TxString(" 3-Dim_Light 4-AC");
     a24:	8b ec       	ldi	r24, 0xCB	; 203
     a26:	92 e0       	ldi	r25, 0x02	; 2
     a28:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
						 UART_Tx(NEXTLINE);
     a2c:	8d e0       	ldi	r24, 0x0D	; 13
     a2e:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
						 UART_TxString(" 5-Back To Main Menu");
     a32:	8d ed       	ldi	r24, 0xDD	; 221
     a34:	92 e0       	ldi	r25, 0x02	; 2
     a36:	0e 94 9f 0c 	call	0x193e	; 0x193e <UART_TxString>
						 UART_Tx(NEXTLINE);
     a3a:	8d e0       	ldi	r24, 0x0D	; 13
     a3c:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>

						 Local_u8_Menu =	HC05_Rx() ;
     a40:	0e 94 ac 06 	call	0xd58	; 0xd58 <HC05_Rx>
						 if (Local_u8_Menu != 0)
     a44:	88 23       	and	r24, r24
     a46:	49 f1       	breq	.+82     	; 0xa9a <__stack+0x23b>
						 {
							 
							 switch(Local_u8_Menu)
     a48:	83 33       	cpi	r24, 0x33	; 51
     a4a:	b9 f0       	breq	.+46     	; 0xa7a <__stack+0x21b>
     a4c:	28 f4       	brcc	.+10     	; 0xa58 <__stack+0x1f9>
     a4e:	81 33       	cpi	r24, 0x31	; 49
     a50:	41 f0       	breq	.+16     	; 0xa62 <__stack+0x203>
     a52:	82 33       	cpi	r24, 0x32	; 50
     a54:	61 f0       	breq	.+24     	; 0xa6e <__stack+0x20f>
     a56:	23 c0       	rjmp	.+70     	; 0xa9e <__stack+0x23f>
     a58:	84 33       	cpi	r24, 0x34	; 52
     a5a:	a9 f0       	breq	.+42     	; 0xa86 <__stack+0x227>
     a5c:	85 33       	cpi	r24, 0x35	; 53
     a5e:	c9 f0       	breq	.+50     	; 0xa92 <__stack+0x233>
     a60:	1e c0       	rjmp	.+60     	; 0xa9e <__stack+0x23f>
							 {
								 case 49:H_Lcd_Clr();  Door_Control();                break;
     a62:	0e 94 51 08 	call	0x10a2	; 0x10a2 <H_Lcd_Clr>
     a66:	0e 94 ca 00 	call	0x194	; 0x194 <Door_Control>
					 UART_Tx(NEXTLINE);
					 UART_TxString(" Welcome sir");
					 UART_Tx(NEXTLINE);
					 while (WAITING_FOR_CHOICE)
					 {
						  u8 Local_u8_FlagToMenu = 0;
     a6a:	80 e0       	ldi	r24, 0x00	; 0
						 if (Local_u8_Menu != 0)
						 {
							 
							 switch(Local_u8_Menu)
							 {
								 case 49:H_Lcd_Clr();  Door_Control();                break;
     a6c:	19 c0       	rjmp	.+50     	; 0xaa0 <__stack+0x241>
								 case 50:H_Lcd_Clr();  Light_Control();			      break;
     a6e:	0e 94 51 08 	call	0x10a2	; 0x10a2 <H_Lcd_Clr>
     a72:	0e 94 11 01 	call	0x222	; 0x222 <Light_Control>
					 UART_Tx(NEXTLINE);
					 UART_TxString(" Welcome sir");
					 UART_Tx(NEXTLINE);
					 while (WAITING_FOR_CHOICE)
					 {
						  u8 Local_u8_FlagToMenu = 0;
     a76:	80 e0       	ldi	r24, 0x00	; 0
						 {
							 
							 switch(Local_u8_Menu)
							 {
								 case 49:H_Lcd_Clr();  Door_Control();                break;
								 case 50:H_Lcd_Clr();  Light_Control();			      break;
     a78:	13 c0       	rjmp	.+38     	; 0xaa0 <__stack+0x241>
								 case 51:H_Lcd_Clr();  Dim_Light_Control();		      break;
     a7a:	0e 94 51 08 	call	0x10a2	; 0x10a2 <H_Lcd_Clr>
     a7e:	0e 94 48 01 	call	0x290	; 0x290 <Dim_Light_Control>
					 UART_Tx(NEXTLINE);
					 UART_TxString(" Welcome sir");
					 UART_Tx(NEXTLINE);
					 while (WAITING_FOR_CHOICE)
					 {
						  u8 Local_u8_FlagToMenu = 0;
     a82:	80 e0       	ldi	r24, 0x00	; 0
							 
							 switch(Local_u8_Menu)
							 {
								 case 49:H_Lcd_Clr();  Door_Control();                break;
								 case 50:H_Lcd_Clr();  Light_Control();			      break;
								 case 51:H_Lcd_Clr();  Dim_Light_Control();		      break;
     a84:	0d c0       	rjmp	.+26     	; 0xaa0 <__stack+0x241>
								 case 52:H_Lcd_Clr();  AirCond_EN();                  break;
     a86:	0e 94 51 08 	call	0x10a2	; 0x10a2 <H_Lcd_Clr>
     a8a:	0e 94 a5 01 	call	0x34a	; 0x34a <AirCond_EN>
					 UART_Tx(NEXTLINE);
					 UART_TxString(" Welcome sir");
					 UART_Tx(NEXTLINE);
					 while (WAITING_FOR_CHOICE)
					 {
						  u8 Local_u8_FlagToMenu = 0;
     a8e:	80 e0       	ldi	r24, 0x00	; 0
							 switch(Local_u8_Menu)
							 {
								 case 49:H_Lcd_Clr();  Door_Control();                break;
								 case 50:H_Lcd_Clr();  Light_Control();			      break;
								 case 51:H_Lcd_Clr();  Dim_Light_Control();		      break;
								 case 52:H_Lcd_Clr();  AirCond_EN();                  break;
     a90:	07 c0       	rjmp	.+14     	; 0xaa0 <__stack+0x241>
								 case 53:H_Lcd_Clr();  Local_u8_FlagToMenu = 1;       break;								 
     a92:	0e 94 51 08 	call	0x10a2	; 0x10a2 <H_Lcd_Clr>
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	03 c0       	rjmp	.+6      	; 0xaa0 <__stack+0x241>
					 UART_Tx(NEXTLINE);
					 UART_TxString(" Welcome sir");
					 UART_Tx(NEXTLINE);
					 while (WAITING_FOR_CHOICE)
					 {
						  u8 Local_u8_FlagToMenu = 0;
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	01 c0       	rjmp	.+2      	; 0xaa0 <__stack+0x241>
     a9e:	80 e0       	ldi	r24, 0x00	; 0
								 case 52:H_Lcd_Clr();  AirCond_EN();                  break;
								 case 53:H_Lcd_Clr();  Local_u8_FlagToMenu = 1;       break;								 
								 default:							                  break;
							 }
						 }
						  if(Local_u8_FlagToMenu == 1)
     aa0:	81 30       	cpi	r24, 0x01	; 1
     aa2:	09 f0       	breq	.+2      	; 0xaa6 <__stack+0x247>
     aa4:	b8 cf       	rjmp	.-144    	; 0xa16 <__stack+0x1b7>
     aa6:	96 ce       	rjmp	.-724    	; 0x7d4 <main+0x3b4>
					 }

				 }
			 }
/************************************************** USER_MODE***************************************************************************************/
else if (Local_u8_Mode == USER_MODE)
     aa8:	05 31       	cpi	r16, 0x15	; 21
     aaa:	09 f0       	breq	.+2      	; 0xaae <__stack+0x24f>
     aac:	c3 cd       	rjmp	.-1146   	; 0x634 <main+0x214>
{     
	H_Lcd_WriteString("Welcome");
     aae:	82 ef       	ldi	r24, 0xF2	; 242
     ab0:	92 e0       	ldi	r25, 0x02	; 2
     ab2:	0e 94 3e 08 	call	0x107c	; 0x107c <H_Lcd_WriteString>
     ab6:	2f ef       	ldi	r18, 0xFF	; 255
     ab8:	8e e9       	ldi	r24, 0x9E	; 158
     aba:	94 e2       	ldi	r25, 0x24	; 36
     abc:	21 50       	subi	r18, 0x01	; 1
     abe:	80 40       	sbci	r24, 0x00	; 0
     ac0:	90 40       	sbci	r25, 0x00	; 0
     ac2:	e1 f7       	brne	.-8      	; 0xabc <__stack+0x25d>
     ac4:	00 c0       	rjmp	.+0      	; 0xac6 <__stack+0x267>
     ac6:	00 00       	nop
	_delay_ms(DISPLAY_TIME);
	H_Lcd_Clr();
     ac8:	0e 94 51 08 	call	0x10a2	; 0x10a2 <H_Lcd_Clr>
	Local_u8_EEPROM = 0;
	Local_u8_counter = 0;
	Local_u8_ID = 1;
	Local_u8_Wrong == 10;
	Local_u8_Trials = 3;
     acc:	03 e0       	ldi	r16, 0x03	; 3
		{
			break;
		}
		
		/*Taking the ID*/
		H_Lcd_WriteString("ID:");
     ace:	8c eb       	ldi	r24, 0xBC	; 188
     ad0:	91 e0       	ldi	r25, 0x01	; 1
     ad2:	0e 94 3e 08 	call	0x107c	; 0x107c <H_Lcd_WriteString>
		H_Lcd_GoTo(1,0);
     ad6:	60 e0       	ldi	r22, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	0e 94 55 08 	call	0x10aa	; 0x10aa <H_Lcd_GoTo>
		while(Local_u8_ID)
     ade:	10 e0       	ldi	r17, 0x00	; 0
     ae0:	ff 24       	eor	r15, r15
     ae2:	f3 94       	inc	r15
     ae4:	39 c0       	rjmp	.+114    	; 0xb58 <__stack+0x2f9>
		{
			Local_u8_Variable11 = H_KeyPad_Read();
     ae6:	0e 94 23 07 	call	0xe46	; 0xe46 <H_KeyPad_Read>
			if((Local_u8_Variable11 == '=') && (Local_u8_Error == ERROR))
     aea:	8d 33       	cpi	r24, 0x3D	; 61
     aec:	e1 f4       	brne	.+56     	; 0xb26 <__stack+0x2c7>
     aee:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <Local_u8_Error>
     af2:	91 11       	cpse	r25, r1
     af4:	18 c0       	rjmp	.+48     	; 0xb26 <__stack+0x2c7>
			{
				H_Lcd_WriteString("Error please try again");
     af6:	87 e8       	ldi	r24, 0x87	; 135
     af8:	91 e0       	ldi	r25, 0x01	; 1
     afa:	0e 94 3e 08 	call	0x107c	; 0x107c <H_Lcd_WriteString>
     afe:	af ef       	ldi	r26, 0xFF	; 255
     b00:	be e9       	ldi	r27, 0x9E	; 158
     b02:	24 e2       	ldi	r18, 0x24	; 36
     b04:	a1 50       	subi	r26, 0x01	; 1
     b06:	b0 40       	sbci	r27, 0x00	; 0
     b08:	20 40       	sbci	r18, 0x00	; 0
     b0a:	e1 f7       	brne	.-8      	; 0xb04 <__stack+0x2a5>
     b0c:	00 c0       	rjmp	.+0      	; 0xb0e <__stack+0x2af>
     b0e:	00 00       	nop
				_delay_ms(750);
				H_Lcd_Clr();
     b10:	0e 94 51 08 	call	0x10a2	; 0x10a2 <H_Lcd_Clr>
				H_Lcd_WriteString("ID:");
     b14:	8c eb       	ldi	r24, 0xBC	; 188
     b16:	91 e0       	ldi	r25, 0x01	; 1
     b18:	0e 94 3e 08 	call	0x107c	; 0x107c <H_Lcd_WriteString>
				H_Lcd_GoTo(1,0);
     b1c:	60 e0       	ldi	r22, 0x00	; 0
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	0e 94 55 08 	call	0x10aa	; 0x10aa <H_Lcd_GoTo>
     b24:	19 c0       	rjmp	.+50     	; 0xb58 <__stack+0x2f9>
			}
			else if(Local_u8_Variable11 == '=')
     b26:	8d 33       	cpi	r24, 0x3D	; 61
     b28:	21 f4       	brne	.+8      	; 0xb32 <__stack+0x2d3>
			{
				/*The end of taking the ID*/
				Local_u8_Error = ERROR;
     b2a:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <Local_u8_Error>
				Local_u8_ID = 0;
     b2e:	f1 2c       	mov	r15, r1
     b30:	13 c0       	rjmp	.+38     	; 0xb58 <__stack+0x2f9>
			}
			else if(Local_u8_Variable1 != '=')
			{
				Local_u8_Error = NO_ERROR;
     b32:	91 e0       	ldi	r25, 0x01	; 1
     b34:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <Local_u8_Error>
				Local_u8_IDAndPass[Local_u8_counter] = Local_u8_Variable11;
     b38:	e1 e0       	ldi	r30, 0x01	; 1
     b3a:	f0 e0       	ldi	r31, 0x00	; 0
     b3c:	ec 0f       	add	r30, r28
     b3e:	fd 1f       	adc	r31, r29
     b40:	e1 0f       	add	r30, r17
     b42:	f1 1d       	adc	r31, r1
     b44:	80 83       	st	Z, r24
				H_Lcd_WriteCharacter(Local_u8_IDAndPass[Local_u8_counter]);
     b46:	0e 94 86 07 	call	0xf0c	; 0xf0c <H_Lcd_WriteCharacter>
				Local_u8_counter++;
     b4a:	1f 5f       	subi	r17, 0xFF	; 255
     b4c:	8f e3       	ldi	r24, 0x3F	; 63
     b4e:	9c e9       	ldi	r25, 0x9C	; 156
     b50:	01 97       	sbiw	r24, 0x01	; 1
     b52:	f1 f7       	brne	.-4      	; 0xb50 <__stack+0x2f1>
     b54:	00 c0       	rjmp	.+0      	; 0xb56 <__stack+0x2f7>
     b56:	00 00       	nop
		}
		
		/*Taking the ID*/
		H_Lcd_WriteString("ID:");
		H_Lcd_GoTo(1,0);
		while(Local_u8_ID)
     b58:	f1 10       	cpse	r15, r1
     b5a:	c5 cf       	rjmp	.-118    	; 0xae6 <__stack+0x287>
				_delay_ms(10);
			}
		}
		
		/*Taking the PASSWORD*/
		H_Lcd_Clr();
     b5c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <H_Lcd_Clr>
		H_Lcd_WriteString("PASSWORD: ");
     b60:	81 ec       	ldi	r24, 0xC1	; 193
     b62:	91 e0       	ldi	r25, 0x01	; 1
     b64:	0e 94 3e 08 	call	0x107c	; 0x107c <H_Lcd_WriteString>
     b68:	9f ef       	ldi	r25, 0xFF	; 255
     b6a:	ae e9       	ldi	r26, 0x9E	; 158
     b6c:	b4 e2       	ldi	r27, 0x24	; 36
     b6e:	91 50       	subi	r25, 0x01	; 1
     b70:	a0 40       	sbci	r26, 0x00	; 0
     b72:	b0 40       	sbci	r27, 0x00	; 0
     b74:	e1 f7       	brne	.-8      	; 0xb6e <__stack+0x30f>
     b76:	00 c0       	rjmp	.+0      	; 0xb78 <__stack+0x319>
     b78:	00 00       	nop
		_delay_ms(DISPLAY_TIME);
		H_Lcd_GoTo(1,0);
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	0e 94 55 08 	call	0x10aa	; 0x10aa <H_Lcd_GoTo>
		
		while(!Local_u8_ID)
     b82:	3c c0       	rjmp	.+120    	; 0xbfc <__stack+0x39d>
		{
			Local_u8_Variable12 = H_KeyPad_Read();
     b84:	0e 94 23 07 	call	0xe46	; 0xe46 <H_KeyPad_Read>
			if((Local_u8_Variable12 == '=') && (Local_u8_Error == ERROR))
     b88:	8d 33       	cpi	r24, 0x3D	; 61
     b8a:	e1 f4       	brne	.+56     	; 0xbc4 <__stack+0x365>
     b8c:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <Local_u8_Error>
     b90:	91 11       	cpse	r25, r1
     b92:	18 c0       	rjmp	.+48     	; 0xbc4 <__stack+0x365>
			{
				H_Lcd_WriteString("Error please try again");
     b94:	87 e8       	ldi	r24, 0x87	; 135
     b96:	91 e0       	ldi	r25, 0x01	; 1
     b98:	0e 94 3e 08 	call	0x107c	; 0x107c <H_Lcd_WriteString>
     b9c:	2f ef       	ldi	r18, 0xFF	; 255
     b9e:	8e e9       	ldi	r24, 0x9E	; 158
     ba0:	94 e2       	ldi	r25, 0x24	; 36
     ba2:	21 50       	subi	r18, 0x01	; 1
     ba4:	80 40       	sbci	r24, 0x00	; 0
     ba6:	90 40       	sbci	r25, 0x00	; 0
     ba8:	e1 f7       	brne	.-8      	; 0xba2 <__stack+0x343>
     baa:	00 c0       	rjmp	.+0      	; 0xbac <__stack+0x34d>
     bac:	00 00       	nop
				_delay_ms(DISPLAY_TIME);
				H_Lcd_Clr();
     bae:	0e 94 51 08 	call	0x10a2	; 0x10a2 <H_Lcd_Clr>
				H_Lcd_WriteString("PASSWORD: ");
     bb2:	81 ec       	ldi	r24, 0xC1	; 193
     bb4:	91 e0       	ldi	r25, 0x01	; 1
     bb6:	0e 94 3e 08 	call	0x107c	; 0x107c <H_Lcd_WriteString>
				H_Lcd_GoTo(1,0);
     bba:	60 e0       	ldi	r22, 0x00	; 0
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	0e 94 55 08 	call	0x10aa	; 0x10aa <H_Lcd_GoTo>
     bc2:	1c c0       	rjmp	.+56     	; 0xbfc <__stack+0x39d>
			}
			else if(Local_u8_Variable12 == '=')
     bc4:	8d 33       	cpi	r24, 0x3D	; 61
     bc6:	29 f4       	brne	.+10     	; 0xbd2 <__stack+0x373>
			{
				/*The end of taking the ID*/
				Local_u8_Error = ERROR;
     bc8:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <Local_u8_Error>
				Local_u8_ID = 1;
     bcc:	ff 24       	eor	r15, r15
     bce:	f3 94       	inc	r15
     bd0:	15 c0       	rjmp	.+42     	; 0xbfc <__stack+0x39d>
			}
			
			/*Enter the password you want untill 'ENTER'*/
			else if(Local_u8_Variable12 != '=')
     bd2:	8d 33       	cpi	r24, 0x3D	; 61
     bd4:	99 f0       	breq	.+38     	; 0xbfc <__stack+0x39d>
			{
				Local_u8_Error = NO_ERROR;
     bd6:	91 e0       	ldi	r25, 0x01	; 1
     bd8:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <Local_u8_Error>
				Local_u8_IDAndPass[Local_u8_counter] = Local_u8_Variable12;
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	ec 0f       	add	r30, r28
     be2:	fd 1f       	adc	r31, r29
     be4:	e1 0f       	add	r30, r17
     be6:	f1 1d       	adc	r31, r1
     be8:	80 83       	st	Z, r24
				H_Lcd_WriteCharacter(Local_u8_IDAndPass[Local_u8_counter]);
     bea:	0e 94 86 07 	call	0xf0c	; 0xf0c <H_Lcd_WriteCharacter>
				Local_u8_counter++;
     bee:	1f 5f       	subi	r17, 0xFF	; 255
     bf0:	af e3       	ldi	r26, 0x3F	; 63
     bf2:	bc e9       	ldi	r27, 0x9C	; 156
     bf4:	11 97       	sbiw	r26, 0x01	; 1
     bf6:	f1 f7       	brne	.-4      	; 0xbf4 <__stack+0x395>
     bf8:	00 c0       	rjmp	.+0      	; 0xbfa <__stack+0x39b>
     bfa:	00 00       	nop
		H_Lcd_Clr();
		H_Lcd_WriteString("PASSWORD: ");
		_delay_ms(DISPLAY_TIME);
		H_Lcd_GoTo(1,0);
		
		while(!Local_u8_ID)
     bfc:	ff 20       	and	r15, r15
     bfe:	11 f2       	breq	.-124    	; 0xb84 <__stack+0x325>
     c00:	f1 2c       	mov	r15, r1
     c02:	10 e0       	ldi	r17, 0x00	; 0
     c04:	6d c0       	rjmp	.+218    	; 0xce0 <__stack+0x481>
		{
			Local_u8_ForLoopcounter = 0;
			Local_u8_EEPROMCount = 0;
			for(Local_u8_ForLoopcounter; Local_u8_ForLoopcounter < 255 ; Local_u8_ForLoopcounter++)
			{
				Local_u8_EEPROM = EEPROMINT_ReadByte(Local_u8_EEPROMCount); //Reading EEPROM consecutively
     c06:	8f 2d       	mov	r24, r15
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 98 06 	call	0xd30	; 0xd30 <EEPROMINT_ReadByte>
				Local_u8_EEPROMCount++;
     c0e:	f3 94       	inc	r15
				if(Local_u8_IDAndPass[Local_u8_ForLoopcounter] == Local_u8_EEPROM)
     c10:	e1 e0       	ldi	r30, 0x01	; 1
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	ec 0f       	add	r30, r28
     c16:	fd 1f       	adc	r31, r29
     c18:	e1 0f       	add	r30, r17
     c1a:	f1 1d       	adc	r31, r1
     c1c:	90 81       	ld	r25, Z
     c1e:	89 13       	cpse	r24, r25
     c20:	0e c0       	rjmp	.+28     	; 0xc3e <__stack+0x3df>
				{
					H_Lcd_Clr();
     c22:	0e 94 51 08 	call	0x10a2	; 0x10a2 <H_Lcd_Clr>
					H_Lcd_WriteString("CHECKING...");
     c26:	83 e9       	ldi	r24, 0x93	; 147
     c28:	92 e0       	ldi	r25, 0x02	; 2
     c2a:	0e 94 3e 08 	call	0x107c	; 0x107c <H_Lcd_WriteString>
					if(EEPROMINT_ReadByte(Local_u8_EEPROMCount) == '$')
     c2e:	8f 2d       	mov	r24, r15
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	0e 94 98 06 	call	0xd30	; 0xd30 <EEPROMINT_ReadByte>
     c36:	84 32       	cpi	r24, 0x24	; 36
     c38:	09 f0       	breq	.+2      	; 0xc3c <__stack+0x3dd>
     c3a:	51 c0       	rjmp	.+162    	; 0xcde <__stack+0x47f>
     c3c:	54 c0       	rjmp	.+168    	; 0xce6 <__stack+0x487>
						break;
						Local_u8_Wrong == 11;
					}
					
				}
				else if(Local_u8_IDAndPass[Local_u8_ForLoopcounter] != Local_u8_EEPROM && Local_u8_Wrong == 10 )
     c3e:	89 17       	cp	r24, r25
     c40:	09 f4       	brne	.+2      	; 0xc44 <__stack+0x3e5>
     c42:	4d c0       	rjmp	.+154    	; 0xcde <__stack+0x47f>
				{
					H_Lcd_Clr();
     c44:	0e 94 51 08 	call	0x10a2	; 0x10a2 <H_Lcd_Clr>
					H_Lcd_WriteString("Wrong ID/PASS");
     c48:	8d ec       	ldi	r24, 0xCD	; 205
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	0e 94 3e 08 	call	0x107c	; 0x107c <H_Lcd_WriteString>
     c50:	bf ef       	ldi	r27, 0xFF	; 255
     c52:	29 e6       	ldi	r18, 0x69	; 105
     c54:	88 e1       	ldi	r24, 0x18	; 24
     c56:	b1 50       	subi	r27, 0x01	; 1
     c58:	20 40       	sbci	r18, 0x00	; 0
     c5a:	80 40       	sbci	r24, 0x00	; 0
     c5c:	e1 f7       	brne	.-8      	; 0xc56 <__stack+0x3f7>
     c5e:	00 c0       	rjmp	.+0      	; 0xc60 <__stack+0x401>
     c60:	00 00       	nop
					_delay_ms(500);
					H_Lcd_GoTo(1,0);
     c62:	60 e0       	ldi	r22, 0x00	; 0
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	0e 94 55 08 	call	0x10aa	; 0x10aa <H_Lcd_GoTo>
					switch(Local_u8_Trials)
     c6a:	02 30       	cpi	r16, 0x02	; 2
     c6c:	a9 f0       	breq	.+42     	; 0xc98 <__stack+0x439>
     c6e:	03 30       	cpi	r16, 0x03	; 3
     c70:	19 f0       	breq	.+6      	; 0xc78 <__stack+0x419>
     c72:	01 30       	cpi	r16, 0x01	; 1
     c74:	c1 f5       	brne	.+112    	; 0xce6 <__stack+0x487>
     c76:	20 c0       	rjmp	.+64     	; 0xcb8 <__stack+0x459>
					{
						case 3:
						H_Lcd_WriteString("2 trials left ");
     c78:	8c ed       	ldi	r24, 0xDC	; 220
     c7a:	91 e0       	ldi	r25, 0x01	; 1
     c7c:	0e 94 3e 08 	call	0x107c	; 0x107c <H_Lcd_WriteString>
     c80:	9f ef       	ldi	r25, 0xFF	; 255
     c82:	a9 e6       	ldi	r26, 0x69	; 105
     c84:	b8 e1       	ldi	r27, 0x18	; 24
     c86:	91 50       	subi	r25, 0x01	; 1
     c88:	a0 40       	sbci	r26, 0x00	; 0
     c8a:	b0 40       	sbci	r27, 0x00	; 0
     c8c:	e1 f7       	brne	.-8      	; 0xc86 <__stack+0x427>
     c8e:	00 c0       	rjmp	.+0      	; 0xc90 <__stack+0x431>
     c90:	00 00       	nop
						_delay_ms(500);
						H_Lcd_Clr();
     c92:	0e 94 51 08 	call	0x10a2	; 0x10a2 <H_Lcd_Clr>
						break;
     c96:	27 c0       	rjmp	.+78     	; 0xce6 <__stack+0x487>
						case 2:
						H_Lcd_WriteString("1 trial left ");
     c98:	8c ee       	ldi	r24, 0xEC	; 236
     c9a:	91 e0       	ldi	r25, 0x01	; 1
     c9c:	0e 94 3e 08 	call	0x107c	; 0x107c <H_Lcd_WriteString>
     ca0:	2f ef       	ldi	r18, 0xFF	; 255
     ca2:	89 e6       	ldi	r24, 0x69	; 105
     ca4:	98 e1       	ldi	r25, 0x18	; 24
     ca6:	21 50       	subi	r18, 0x01	; 1
     ca8:	80 40       	sbci	r24, 0x00	; 0
     caa:	90 40       	sbci	r25, 0x00	; 0
     cac:	e1 f7       	brne	.-8      	; 0xca6 <__stack+0x447>
     cae:	00 c0       	rjmp	.+0      	; 0xcb0 <__stack+0x451>
     cb0:	00 00       	nop
						_delay_ms(500);
						H_Lcd_Clr();
     cb2:	0e 94 51 08 	call	0x10a2	; 0x10a2 <H_Lcd_Clr>
						break;
     cb6:	17 c0       	rjmp	.+46     	; 0xce6 <__stack+0x487>
						case 1:
						H_Lcd_Clr();
     cb8:	0e 94 51 08 	call	0x10a2	; 0x10a2 <H_Lcd_Clr>
						H_Lcd_GoTo(0,4);
     cbc:	64 e0       	ldi	r22, 0x04	; 4
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	0e 94 55 08 	call	0x10aa	; 0x10aa <H_Lcd_GoTo>
						H_Lcd_WriteString("EMERGENCY");
     cc4:	8b ef       	ldi	r24, 0xFB	; 251
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	0e 94 3e 08 	call	0x107c	; 0x107c <H_Lcd_WriteString>
						H_Lcd_GoTo(1,0);
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	0e 94 55 08 	call	0x10aa	; 0x10aa <H_Lcd_GoTo>
						H_Lcd_WriteString("CALLING 911");
     cd4:	86 e0       	ldi	r24, 0x06	; 6
     cd6:	92 e0       	ldi	r25, 0x02	; 2
     cd8:	0e 94 3e 08 	call	0x107c	; 0x107c <H_Lcd_WriteString>
     cdc:	ff cf       	rjmp	.-2      	; 0xcdc <__stack+0x47d>
		
		for(Local_u8_Trials ; Local_u8_Trials >=0 ; --Local_u8_Trials)
		{
			Local_u8_ForLoopcounter = 0;
			Local_u8_EEPROMCount = 0;
			for(Local_u8_ForLoopcounter; Local_u8_ForLoopcounter < 255 ; Local_u8_ForLoopcounter++)
     cde:	1f 5f       	subi	r17, 0xFF	; 255
     ce0:	1f 3f       	cpi	r17, 0xFF	; 255
     ce2:	09 f0       	breq	.+2      	; 0xce6 <__stack+0x487>
     ce4:	90 cf       	rjmp	.-224    	; 0xc06 <__stack+0x3a7>
					break;
				}
			}
			Local_u8_counter = 0;
			Local_u8_ID = 1;
			--Local_u8_Trials;
     ce6:	01 50       	subi	r16, 0x01	; 1
			break;
		}
	}
     ce8:	f2 ce       	rjmp	.-540    	; 0xace <__stack+0x26f>

00000cea <H_Buzzer_Init>:
     cea:	61 e0       	ldi	r22, 0x01	; 1
     cec:	8d e0       	ldi	r24, 0x0D	; 13
     cee:	0e 94 51 09 	call	0x12a2	; 0x12a2 <M_Dio_PinMode>
     cf2:	08 95       	ret

00000cf4 <H_Buzzer_On>:
     cf4:	61 e0       	ldi	r22, 0x01	; 1
     cf6:	8d e0       	ldi	r24, 0x0D	; 13
     cf8:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
     cfc:	08 95       	ret

00000cfe <EEPROMINT_WriteByte>:
     cfe:	e1 99       	sbic	0x1c, 1	; 28
     d00:	fe cf       	rjmp	.-4      	; 0xcfe <EEPROMINT_WriteByte>
     d02:	07 b6       	in	r0, 0x37	; 55
     d04:	00 fc       	sbrc	r0, 0
     d06:	fd cf       	rjmp	.-6      	; 0xd02 <EEPROMINT_WriteByte+0x4>
     d08:	8f 3f       	cpi	r24, 0xFF	; 255
     d0a:	91 05       	cpc	r25, r1
     d0c:	09 f0       	breq	.+2      	; 0xd10 <EEPROMINT_WriteByte+0x12>
     d0e:	10 f4       	brcc	.+4      	; 0xd14 <EEPROMINT_WriteByte+0x16>
     d10:	8e bb       	out	0x1e, r24	; 30
     d12:	04 c0       	rjmp	.+8      	; 0xd1c <EEPROMINT_WriteByte+0x1e>
     d14:	8e bb       	out	0x1e, r24	; 30
     d16:	89 2f       	mov	r24, r25
     d18:	83 70       	andi	r24, 0x03	; 3
     d1a:	8f bb       	out	0x1f, r24	; 31
     d1c:	6d bb       	out	0x1d, r22	; 29
     d1e:	8c b3       	in	r24, 0x1c	; 28
     d20:	84 60       	ori	r24, 0x04	; 4
     d22:	8c bb       	out	0x1c, r24	; 28
     d24:	8c b3       	in	r24, 0x1c	; 28
     d26:	82 60       	ori	r24, 0x02	; 2
     d28:	8c bb       	out	0x1c, r24	; 28
     d2a:	e1 99       	sbic	0x1c, 1	; 28
     d2c:	fe cf       	rjmp	.-4      	; 0xd2a <EEPROMINT_WriteByte+0x2c>
     d2e:	08 95       	ret

00000d30 <EEPROMINT_ReadByte>:
     d30:	e1 99       	sbic	0x1c, 1	; 28
     d32:	fe cf       	rjmp	.-4      	; 0xd30 <EEPROMINT_ReadByte>
     d34:	8f 3f       	cpi	r24, 0xFF	; 255
     d36:	91 05       	cpc	r25, r1
     d38:	09 f0       	breq	.+2      	; 0xd3c <EEPROMINT_ReadByte+0xc>
     d3a:	10 f4       	brcc	.+4      	; 0xd40 <EEPROMINT_ReadByte+0x10>
     d3c:	8e bb       	out	0x1e, r24	; 30
     d3e:	04 c0       	rjmp	.+8      	; 0xd48 <EEPROMINT_ReadByte+0x18>
     d40:	8e bb       	out	0x1e, r24	; 30
     d42:	89 2f       	mov	r24, r25
     d44:	83 70       	andi	r24, 0x03	; 3
     d46:	8f bb       	out	0x1f, r24	; 31
     d48:	8c b3       	in	r24, 0x1c	; 28
     d4a:	81 60       	ori	r24, 0x01	; 1
     d4c:	8c bb       	out	0x1c, r24	; 28
     d4e:	8d b3       	in	r24, 0x1d	; 29
     d50:	08 95       	ret

00000d52 <HC05_Init>:
     d52:	0e 94 80 0c 	call	0x1900	; 0x1900 <UART_Init>
     d56:	08 95       	ret

00000d58 <HC05_Rx>:
     d58:	0e 94 96 0c 	call	0x192c	; 0x192c <UART_Rx>
     d5c:	08 95       	ret

00000d5e <H_H_Bridge_Init>:
     d5e:	61 e0       	ldi	r22, 0x01	; 1
     d60:	8c e2       	ldi	r24, 0x2C	; 44
     d62:	0e 94 51 09 	call	0x12a2	; 0x12a2 <M_Dio_PinMode>
     d66:	61 e0       	ldi	r22, 0x01	; 1
     d68:	8d e2       	ldi	r24, 0x2D	; 45
     d6a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <M_Dio_PinMode>
     d6e:	61 e0       	ldi	r22, 0x01	; 1
     d70:	83 e2       	ldi	r24, 0x23	; 35
     d72:	0e 94 51 09 	call	0x12a2	; 0x12a2 <M_Dio_PinMode>
     d76:	61 e0       	ldi	r22, 0x01	; 1
     d78:	82 e2       	ldi	r24, 0x22	; 34
     d7a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <M_Dio_PinMode>
     d7e:	61 e0       	ldi	r22, 0x01	; 1
     d80:	81 e2       	ldi	r24, 0x21	; 33
     d82:	0e 94 51 09 	call	0x12a2	; 0x12a2 <M_Dio_PinMode>
     d86:	61 e0       	ldi	r22, 0x01	; 1
     d88:	84 e2       	ldi	r24, 0x24	; 36
     d8a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <M_Dio_PinMode>
     d8e:	08 95       	ret

00000d90 <H_H_Bridge_CH1_EN>:
     d90:	61 e0       	ldi	r22, 0x01	; 1
     d92:	8c e2       	ldi	r24, 0x2C	; 44
     d94:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
     d98:	61 e0       	ldi	r22, 0x01	; 1
     d9a:	83 e2       	ldi	r24, 0x23	; 35
     d9c:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
     da0:	62 e0       	ldi	r22, 0x02	; 2
     da2:	82 e2       	ldi	r24, 0x22	; 34
     da4:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
     da8:	08 95       	ret

00000daa <H_H_Bridge_CH1_Break>:
     daa:	62 e0       	ldi	r22, 0x02	; 2
     dac:	8c e2       	ldi	r24, 0x2C	; 44
     dae:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
     db2:	62 e0       	ldi	r22, 0x02	; 2
     db4:	83 e2       	ldi	r24, 0x23	; 35
     db6:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
     dba:	62 e0       	ldi	r22, 0x02	; 2
     dbc:	82 e2       	ldi	r24, 0x22	; 34
     dbe:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
     dc2:	08 95       	ret

00000dc4 <H_KeyPad_Init>:
 */ 
#include "KeyPad.h"

void H_KeyPad_Init(void)
{
	M_Dio_PinMode(KEYPAD_R0_PIN,OUTPUT);
     dc4:	61 e0       	ldi	r22, 0x01	; 1
     dc6:	88 e1       	ldi	r24, 0x18	; 24
     dc8:	0e 94 51 09 	call	0x12a2	; 0x12a2 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R1_PIN,OUTPUT);
     dcc:	61 e0       	ldi	r22, 0x01	; 1
     dce:	89 e1       	ldi	r24, 0x19	; 25
     dd0:	0e 94 51 09 	call	0x12a2	; 0x12a2 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R2_PIN,OUTPUT);
     dd4:	61 e0       	ldi	r22, 0x01	; 1
     dd6:	8a e1       	ldi	r24, 0x1A	; 26
     dd8:	0e 94 51 09 	call	0x12a2	; 0x12a2 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R3_PIN,OUTPUT);
     ddc:	61 e0       	ldi	r22, 0x01	; 1
     dde:	8b e1       	ldi	r24, 0x1B	; 27
     de0:	0e 94 51 09 	call	0x12a2	; 0x12a2 <M_Dio_PinMode>
	
	M_Dio_PinMode(KEYPAD_C0_PIN,INPUT);
     de4:	62 e0       	ldi	r22, 0x02	; 2
     de6:	8e e1       	ldi	r24, 0x1E	; 30
     de8:	0e 94 51 09 	call	0x12a2	; 0x12a2 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C1_PIN,INPUT);
     dec:	62 e0       	ldi	r22, 0x02	; 2
     dee:	8f e1       	ldi	r24, 0x1F	; 31
     df0:	0e 94 51 09 	call	0x12a2	; 0x12a2 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C2_PIN,INPUT);
     df4:	62 e0       	ldi	r22, 0x02	; 2
     df6:	80 e2       	ldi	r24, 0x20	; 32
     df8:	0e 94 51 09 	call	0x12a2	; 0x12a2 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C3_PIN,INPUT);
     dfc:	62 e0       	ldi	r22, 0x02	; 2
     dfe:	81 e2       	ldi	r24, 0x21	; 33
     e00:	0e 94 51 09 	call	0x12a2	; 0x12a2 <M_Dio_PinMode>
	
	M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH);
     e04:	61 e0       	ldi	r22, 0x01	; 1
     e06:	88 e1       	ldi	r24, 0x18	; 24
     e08:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH);
     e0c:	61 e0       	ldi	r22, 0x01	; 1
     e0e:	89 e1       	ldi	r24, 0x19	; 25
     e10:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH);
     e14:	61 e0       	ldi	r22, 0x01	; 1
     e16:	8a e1       	ldi	r24, 0x1A	; 26
     e18:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH);
     e1c:	61 e0       	ldi	r22, 0x01	; 1
     e1e:	8b e1       	ldi	r24, 0x1B	; 27
     e20:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
	
	M_Dio_PinPullRes(KEYPAD_C0_PIN,ENABLE);
     e24:	61 e0       	ldi	r22, 0x01	; 1
     e26:	8e e1       	ldi	r24, 0x1E	; 30
     e28:	0e 94 da 09 	call	0x13b4	; 0x13b4 <M_Dio_PinPullRes>
	M_Dio_PinPullRes(KEYPAD_C1_PIN,ENABLE);
     e2c:	61 e0       	ldi	r22, 0x01	; 1
     e2e:	8f e1       	ldi	r24, 0x1F	; 31
     e30:	0e 94 da 09 	call	0x13b4	; 0x13b4 <M_Dio_PinPullRes>
	M_Dio_PinPullRes(KEYPAD_C2_PIN,ENABLE);
     e34:	61 e0       	ldi	r22, 0x01	; 1
     e36:	80 e2       	ldi	r24, 0x20	; 32
     e38:	0e 94 da 09 	call	0x13b4	; 0x13b4 <M_Dio_PinPullRes>
	M_Dio_PinPullRes(KEYPAD_C3_PIN,ENABLE);
     e3c:	61 e0       	ldi	r22, 0x01	; 1
     e3e:	81 e2       	ldi	r24, 0x21	; 33
     e40:	0e 94 da 09 	call	0x13b4	; 0x13b4 <M_Dio_PinPullRes>
     e44:	08 95       	ret

00000e46 <H_KeyPad_Read>:


}
u8 H_KeyPad_Read(void)
{
     e46:	ff 92       	push	r15
     e48:	0f 93       	push	r16
     e4a:	1f 93       	push	r17
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	60 97       	sbiw	r28, 0x10	; 16
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	de bf       	out	0x3e, r29	; 62
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8_Arr[4][4]={{'1','2','3','A'},
     e60:	80 e1       	ldi	r24, 0x10	; 16
     e62:	e0 e6       	ldi	r30, 0x60	; 96
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	de 01       	movw	r26, r28
     e68:	11 96       	adiw	r26, 0x01	; 1
     e6a:	01 90       	ld	r0, Z+
     e6c:	0d 92       	st	X+, r0
     e6e:	8a 95       	dec	r24
     e70:	e1 f7       	brne	.-8      	; 0xe6a <H_KeyPad_Read+0x24>
		                   {'*','0','=','D'}};
	u8 Local_u8_Reading = KEYPAD_RELEASED ;
	u8 Local_u8_Value = 0 ;
	u8 Local_u8_Row = 0 ;
	u8 Local_u8_Col = 0 ;
	for(Local_u8_Row=KEYPAD_R0_PIN;Local_u8_Row<=KEYPAD_R3_PIN;Local_u8_Row++)
     e72:	08 e1       	ldi	r16, 0x18	; 24
	u8 Local_u8_Arr[4][4]={{'1','2','3','A'},
		                   {'4','5','6','B'},
		                   {'7','8','9','C'},
		                   {'*','0','=','D'}};
	u8 Local_u8_Reading = KEYPAD_RELEASED ;
	u8 Local_u8_Value = 0 ;
     e74:	f1 2c       	mov	r15, r1
	u8 Local_u8_Row = 0 ;
	u8 Local_u8_Col = 0 ;
	for(Local_u8_Row=KEYPAD_R0_PIN;Local_u8_Row<=KEYPAD_R3_PIN;Local_u8_Row++)
     e76:	3b c0       	rjmp	.+118    	; 0xeee <H_KeyPad_Read+0xa8>
	{
		M_Dio_PinWrite(Local_u8_Row,LOW);
     e78:	62 e0       	ldi	r22, 0x02	; 2
     e7a:	80 2f       	mov	r24, r16
     e7c:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
		for(Local_u8_Col = KEYPAD_C0_PIN;Local_u8_Col<=KEYPAD_C3_PIN;Local_u8_Col++)
     e80:	1e e1       	ldi	r17, 0x1E	; 30
     e82:	2e c0       	rjmp	.+92     	; 0xee0 <H_KeyPad_Read+0x9a>
		{
			Local_u8_Reading= M_Dio_PinRead(Local_u8_Col);
     e84:	81 2f       	mov	r24, r17
     e86:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <M_Dio_PinRead>
			if(Local_u8_Reading == KEYPAD_PRESSED)
     e8a:	81 11       	cpse	r24, r1
     e8c:	28 c0       	rjmp	.+80     	; 0xede <H_KeyPad_Read+0x98>
     e8e:	2f ef       	ldi	r18, 0xFF	; 255
     e90:	40 e7       	ldi	r20, 0x70	; 112
     e92:	52 e0       	ldi	r21, 0x02	; 2
     e94:	21 50       	subi	r18, 0x01	; 1
     e96:	40 40       	sbci	r20, 0x00	; 0
     e98:	50 40       	sbci	r21, 0x00	; 0
     e9a:	e1 f7       	brne	.-8      	; 0xe94 <H_KeyPad_Read+0x4e>
     e9c:	00 c0       	rjmp	.+0      	; 0xe9e <H_KeyPad_Read+0x58>
     e9e:	00 00       	nop
			{
				_delay_ms(KEYPAD_DEBOUNCING_TIME);
				if(M_Dio_PinRead(Local_u8_Col) == KEYPAD_PRESSED)
     ea0:	81 2f       	mov	r24, r17
     ea2:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <M_Dio_PinRead>
     ea6:	81 11       	cpse	r24, r1
     ea8:	1a c0       	rjmp	.+52     	; 0xede <H_KeyPad_Read+0x98>
				{
					while(M_Dio_PinRead(Local_u8_Col) == KEYPAD_PRESSED);//remove it if u want it to write reapidly
     eaa:	81 2f       	mov	r24, r17
     eac:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <M_Dio_PinRead>
     eb0:	88 23       	and	r24, r24
     eb2:	d9 f3       	breq	.-10     	; 0xeaa <H_KeyPad_Read+0x64>
							Local_u8_Value = Local_u8_Arr[Local_u8_Row - KEYPAD_R0_PIN][Local_u8_Col - KEYPAD_C0_PIN];
     eb4:	80 2f       	mov	r24, r16
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	48 97       	sbiw	r24, 0x18	; 24
     eba:	21 2f       	mov	r18, r17
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	2e 51       	subi	r18, 0x1E	; 30
     ec0:	31 09       	sbc	r19, r1
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	41 e0       	ldi	r20, 0x01	; 1
     ecc:	50 e0       	ldi	r21, 0x00	; 0
     ece:	4c 0f       	add	r20, r28
     ed0:	5d 1f       	adc	r21, r29
     ed2:	84 0f       	add	r24, r20
     ed4:	95 1f       	adc	r25, r21
     ed6:	fc 01       	movw	r30, r24
     ed8:	e2 0f       	add	r30, r18
     eda:	f3 1f       	adc	r31, r19
     edc:	f0 80       	ld	r15, Z
	u8 Local_u8_Row = 0 ;
	u8 Local_u8_Col = 0 ;
	for(Local_u8_Row=KEYPAD_R0_PIN;Local_u8_Row<=KEYPAD_R3_PIN;Local_u8_Row++)
	{
		M_Dio_PinWrite(Local_u8_Row,LOW);
		for(Local_u8_Col = KEYPAD_C0_PIN;Local_u8_Col<=KEYPAD_C3_PIN;Local_u8_Col++)
     ede:	1f 5f       	subi	r17, 0xFF	; 255
     ee0:	12 32       	cpi	r17, 0x22	; 34
     ee2:	80 f2       	brcs	.-96     	; 0xe84 <H_KeyPad_Read+0x3e>
				
			}

		}

		M_Dio_PinWrite(Local_u8_Row,HIGH);
     ee4:	61 e0       	ldi	r22, 0x01	; 1
     ee6:	80 2f       	mov	r24, r16
     ee8:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
		                   {'*','0','=','D'}};
	u8 Local_u8_Reading = KEYPAD_RELEASED ;
	u8 Local_u8_Value = 0 ;
	u8 Local_u8_Row = 0 ;
	u8 Local_u8_Col = 0 ;
	for(Local_u8_Row=KEYPAD_R0_PIN;Local_u8_Row<=KEYPAD_R3_PIN;Local_u8_Row++)
     eec:	0f 5f       	subi	r16, 0xFF	; 255
     eee:	0c 31       	cpi	r16, 0x1C	; 28
     ef0:	18 f2       	brcs	.-122    	; 0xe78 <H_KeyPad_Read+0x32>

		M_Dio_PinWrite(Local_u8_Row,HIGH);
	}
	
	return Local_u8_Value;  // if the user click return 0 otherwise return 1
     ef2:	8f 2d       	mov	r24, r15
     ef4:	60 96       	adiw	r28, 0x10	; 16
     ef6:	0f b6       	in	r0, 0x3f	; 63
     ef8:	f8 94       	cli
     efa:	de bf       	out	0x3e, r29	; 62
     efc:	0f be       	out	0x3f, r0	; 63
     efe:	cd bf       	out	0x3d, r28	; 61
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	ff 90       	pop	r15
     f0a:	08 95       	ret

00000f0c <H_Lcd_WriteCharacter>:
     f0c:	cf 93       	push	r28
     f0e:	c8 2f       	mov	r28, r24
     f10:	61 e0       	ldi	r22, 0x01	; 1
     f12:	85 e1       	ldi	r24, 0x15	; 21
     f14:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
     f18:	8b b3       	in	r24, 0x1b	; 27
     f1a:	9c 2f       	mov	r25, r28
     f1c:	90 7f       	andi	r25, 0xF0	; 240
     f1e:	8f 70       	andi	r24, 0x0F	; 15
     f20:	89 2b       	or	r24, r25
     f22:	8b bb       	out	0x1b, r24	; 27
     f24:	61 e0       	ldi	r22, 0x01	; 1
     f26:	8e e2       	ldi	r24, 0x2E	; 46
     f28:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
     f2c:	8f e9       	ldi	r24, 0x9F	; 159
     f2e:	9f e0       	ldi	r25, 0x0F	; 15
     f30:	01 97       	sbiw	r24, 0x01	; 1
     f32:	f1 f7       	brne	.-4      	; 0xf30 <H_Lcd_WriteCharacter+0x24>
     f34:	00 c0       	rjmp	.+0      	; 0xf36 <H_Lcd_WriteCharacter+0x2a>
     f36:	00 00       	nop
     f38:	62 e0       	ldi	r22, 0x02	; 2
     f3a:	8e e2       	ldi	r24, 0x2E	; 46
     f3c:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
     f40:	8f e1       	ldi	r24, 0x1F	; 31
     f42:	9e e4       	ldi	r25, 0x4E	; 78
     f44:	01 97       	sbiw	r24, 0x01	; 1
     f46:	f1 f7       	brne	.-4      	; 0xf44 <H_Lcd_WriteCharacter+0x38>
     f48:	00 c0       	rjmp	.+0      	; 0xf4a <H_Lcd_WriteCharacter+0x3e>
     f4a:	00 00       	nop
     f4c:	20 e1       	ldi	r18, 0x10	; 16
     f4e:	c2 9f       	mul	r28, r18
     f50:	c0 01       	movw	r24, r0
     f52:	11 24       	eor	r1, r1
     f54:	9b b3       	in	r25, 0x1b	; 27
     f56:	9f 70       	andi	r25, 0x0F	; 15
     f58:	89 2b       	or	r24, r25
     f5a:	8b bb       	out	0x1b, r24	; 27
     f5c:	61 e0       	ldi	r22, 0x01	; 1
     f5e:	8e e2       	ldi	r24, 0x2E	; 46
     f60:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
     f64:	8f e9       	ldi	r24, 0x9F	; 159
     f66:	9f e0       	ldi	r25, 0x0F	; 15
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	f1 f7       	brne	.-4      	; 0xf68 <H_Lcd_WriteCharacter+0x5c>
     f6c:	00 c0       	rjmp	.+0      	; 0xf6e <H_Lcd_WriteCharacter+0x62>
     f6e:	00 00       	nop
     f70:	62 e0       	ldi	r22, 0x02	; 2
     f72:	8e e2       	ldi	r24, 0x2E	; 46
     f74:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
     f78:	8f e1       	ldi	r24, 0x1F	; 31
     f7a:	9e e4       	ldi	r25, 0x4E	; 78
     f7c:	01 97       	sbiw	r24, 0x01	; 1
     f7e:	f1 f7       	brne	.-4      	; 0xf7c <H_Lcd_WriteCharacter+0x70>
     f80:	00 c0       	rjmp	.+0      	; 0xf82 <H_Lcd_WriteCharacter+0x76>
     f82:	00 00       	nop
     f84:	cf 91       	pop	r28
     f86:	08 95       	ret

00000f88 <H_Lcd_WriteCommand>:
     f88:	cf 93       	push	r28
     f8a:	c8 2f       	mov	r28, r24
     f8c:	62 e0       	ldi	r22, 0x02	; 2
     f8e:	85 e1       	ldi	r24, 0x15	; 21
     f90:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
     f94:	8b b3       	in	r24, 0x1b	; 27
     f96:	9c 2f       	mov	r25, r28
     f98:	90 7f       	andi	r25, 0xF0	; 240
     f9a:	8f 70       	andi	r24, 0x0F	; 15
     f9c:	89 2b       	or	r24, r25
     f9e:	8b bb       	out	0x1b, r24	; 27
     fa0:	61 e0       	ldi	r22, 0x01	; 1
     fa2:	8e e2       	ldi	r24, 0x2E	; 46
     fa4:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
     fa8:	8f e9       	ldi	r24, 0x9F	; 159
     faa:	9f e0       	ldi	r25, 0x0F	; 15
     fac:	01 97       	sbiw	r24, 0x01	; 1
     fae:	f1 f7       	brne	.-4      	; 0xfac <H_Lcd_WriteCommand+0x24>
     fb0:	00 c0       	rjmp	.+0      	; 0xfb2 <H_Lcd_WriteCommand+0x2a>
     fb2:	00 00       	nop
     fb4:	62 e0       	ldi	r22, 0x02	; 2
     fb6:	8e e2       	ldi	r24, 0x2E	; 46
     fb8:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
     fbc:	8f e1       	ldi	r24, 0x1F	; 31
     fbe:	9e e4       	ldi	r25, 0x4E	; 78
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	f1 f7       	brne	.-4      	; 0xfc0 <H_Lcd_WriteCommand+0x38>
     fc4:	00 c0       	rjmp	.+0      	; 0xfc6 <H_Lcd_WriteCommand+0x3e>
     fc6:	00 00       	nop
     fc8:	20 e1       	ldi	r18, 0x10	; 16
     fca:	c2 9f       	mul	r28, r18
     fcc:	c0 01       	movw	r24, r0
     fce:	11 24       	eor	r1, r1
     fd0:	9b b3       	in	r25, 0x1b	; 27
     fd2:	9f 70       	andi	r25, 0x0F	; 15
     fd4:	89 2b       	or	r24, r25
     fd6:	8b bb       	out	0x1b, r24	; 27
     fd8:	61 e0       	ldi	r22, 0x01	; 1
     fda:	8e e2       	ldi	r24, 0x2E	; 46
     fdc:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
     fe0:	8f e9       	ldi	r24, 0x9F	; 159
     fe2:	9f e0       	ldi	r25, 0x0F	; 15
     fe4:	01 97       	sbiw	r24, 0x01	; 1
     fe6:	f1 f7       	brne	.-4      	; 0xfe4 <H_Lcd_WriteCommand+0x5c>
     fe8:	00 c0       	rjmp	.+0      	; 0xfea <H_Lcd_WriteCommand+0x62>
     fea:	00 00       	nop
     fec:	62 e0       	ldi	r22, 0x02	; 2
     fee:	8e e2       	ldi	r24, 0x2E	; 46
     ff0:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
     ff4:	8f e1       	ldi	r24, 0x1F	; 31
     ff6:	9e e4       	ldi	r25, 0x4E	; 78
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	f1 f7       	brne	.-4      	; 0xff8 <H_Lcd_WriteCommand+0x70>
     ffc:	00 c0       	rjmp	.+0      	; 0xffe <H_Lcd_WriteCommand+0x76>
     ffe:	00 00       	nop
    1000:	cf 91       	pop	r28
    1002:	08 95       	ret

00001004 <H_Lcd_Init>:
    1004:	61 e0       	ldi	r22, 0x01	; 1
    1006:	8e e0       	ldi	r24, 0x0E	; 14
    1008:	0e 94 51 09 	call	0x12a2	; 0x12a2 <M_Dio_PinMode>
    100c:	61 e0       	ldi	r22, 0x01	; 1
    100e:	8f e0       	ldi	r24, 0x0F	; 15
    1010:	0e 94 51 09 	call	0x12a2	; 0x12a2 <M_Dio_PinMode>
    1014:	61 e0       	ldi	r22, 0x01	; 1
    1016:	80 e1       	ldi	r24, 0x10	; 16
    1018:	0e 94 51 09 	call	0x12a2	; 0x12a2 <M_Dio_PinMode>
    101c:	61 e0       	ldi	r22, 0x01	; 1
    101e:	81 e1       	ldi	r24, 0x11	; 17
    1020:	0e 94 51 09 	call	0x12a2	; 0x12a2 <M_Dio_PinMode>
    1024:	61 e0       	ldi	r22, 0x01	; 1
    1026:	85 e1       	ldi	r24, 0x15	; 21
    1028:	0e 94 51 09 	call	0x12a2	; 0x12a2 <M_Dio_PinMode>
    102c:	61 e0       	ldi	r22, 0x01	; 1
    102e:	8e e2       	ldi	r24, 0x2E	; 46
    1030:	0e 94 51 09 	call	0x12a2	; 0x12a2 <M_Dio_PinMode>
    1034:	61 e0       	ldi	r22, 0x01	; 1
    1036:	86 e1       	ldi	r24, 0x16	; 22
    1038:	0e 94 51 09 	call	0x12a2	; 0x12a2 <M_Dio_PinMode>
    103c:	62 e0       	ldi	r22, 0x02	; 2
    103e:	86 e1       	ldi	r24, 0x16	; 22
    1040:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
    1044:	2f ef       	ldi	r18, 0xFF	; 255
    1046:	83 ed       	ldi	r24, 0xD3	; 211
    1048:	90 e3       	ldi	r25, 0x30	; 48
    104a:	21 50       	subi	r18, 0x01	; 1
    104c:	80 40       	sbci	r24, 0x00	; 0
    104e:	90 40       	sbci	r25, 0x00	; 0
    1050:	e1 f7       	brne	.-8      	; 0x104a <H_Lcd_Init+0x46>
    1052:	00 c0       	rjmp	.+0      	; 0x1054 <H_Lcd_Init+0x50>
    1054:	00 00       	nop
    1056:	83 e3       	ldi	r24, 0x33	; 51
    1058:	0e 94 c4 07 	call	0xf88	; 0xf88 <H_Lcd_WriteCommand>
    105c:	82 e3       	ldi	r24, 0x32	; 50
    105e:	0e 94 c4 07 	call	0xf88	; 0xf88 <H_Lcd_WriteCommand>
    1062:	88 e2       	ldi	r24, 0x28	; 40
    1064:	0e 94 c4 07 	call	0xf88	; 0xf88 <H_Lcd_WriteCommand>
    1068:	8c e0       	ldi	r24, 0x0C	; 12
    106a:	0e 94 c4 07 	call	0xf88	; 0xf88 <H_Lcd_WriteCommand>
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	0e 94 c4 07 	call	0xf88	; 0xf88 <H_Lcd_WriteCommand>
    1074:	82 e0       	ldi	r24, 0x02	; 2
    1076:	0e 94 c4 07 	call	0xf88	; 0xf88 <H_Lcd_WriteCommand>
    107a:	08 95       	ret

0000107c <H_Lcd_WriteString>:
    107c:	0f 93       	push	r16
    107e:	1f 93       	push	r17
    1080:	cf 93       	push	r28
    1082:	8c 01       	movw	r16, r24
    1084:	c0 e0       	ldi	r28, 0x00	; 0
    1086:	03 c0       	rjmp	.+6      	; 0x108e <H_Lcd_WriteString+0x12>
    1088:	0e 94 86 07 	call	0xf0c	; 0xf0c <H_Lcd_WriteCharacter>
    108c:	cf 5f       	subi	r28, 0xFF	; 255
    108e:	f8 01       	movw	r30, r16
    1090:	ec 0f       	add	r30, r28
    1092:	f1 1d       	adc	r31, r1
    1094:	80 81       	ld	r24, Z
    1096:	81 11       	cpse	r24, r1
    1098:	f7 cf       	rjmp	.-18     	; 0x1088 <H_Lcd_WriteString+0xc>
    109a:	cf 91       	pop	r28
    109c:	1f 91       	pop	r17
    109e:	0f 91       	pop	r16
    10a0:	08 95       	ret

000010a2 <H_Lcd_Clr>:
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	0e 94 c4 07 	call	0xf88	; 0xf88 <H_Lcd_WriteCommand>
    10a8:	08 95       	ret

000010aa <H_Lcd_GoTo>:
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <H_Lcd_GoTo+0x6>
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	90 e8       	ldi	r25, 0x80	; 128
    10b6:	99 83       	std	Y+1, r25	; 0x01
    10b8:	90 ec       	ldi	r25, 0xC0	; 192
    10ba:	9a 83       	std	Y+2, r25	; 0x02
    10bc:	e1 e0       	ldi	r30, 0x01	; 1
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	ec 0f       	add	r30, r28
    10c2:	fd 1f       	adc	r31, r29
    10c4:	e8 0f       	add	r30, r24
    10c6:	f1 1d       	adc	r31, r1
    10c8:	80 81       	ld	r24, Z
    10ca:	86 0f       	add	r24, r22
    10cc:	0e 94 c4 07 	call	0xf88	; 0xf88 <H_Lcd_WriteCommand>
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	df 91       	pop	r29
    10d6:	cf 91       	pop	r28
    10d8:	08 95       	ret

000010da <H_Led_Init>:
    10da:	82 30       	cpi	r24, 0x02	; 2
    10dc:	a9 f0       	breq	.+42     	; 0x1108 <H_Led_Init+0x2e>
    10de:	28 f4       	brcc	.+10     	; 0x10ea <H_Led_Init+0x10>
    10e0:	88 23       	and	r24, r24
    10e2:	41 f0       	breq	.+16     	; 0x10f4 <H_Led_Init+0x1a>
    10e4:	81 30       	cpi	r24, 0x01	; 1
    10e6:	59 f0       	breq	.+22     	; 0x10fe <H_Led_Init+0x24>
    10e8:	08 95       	ret
    10ea:	83 30       	cpi	r24, 0x03	; 3
    10ec:	91 f0       	breq	.+36     	; 0x1112 <H_Led_Init+0x38>
    10ee:	84 30       	cpi	r24, 0x04	; 4
    10f0:	a9 f0       	breq	.+42     	; 0x111c <H_Led_Init+0x42>
    10f2:	08 95       	ret
    10f4:	61 e0       	ldi	r22, 0x01	; 1
    10f6:	84 e2       	ldi	r24, 0x24	; 36
    10f8:	0e 94 51 09 	call	0x12a2	; 0x12a2 <M_Dio_PinMode>
    10fc:	08 95       	ret
    10fe:	61 e0       	ldi	r22, 0x01	; 1
    1100:	85 e2       	ldi	r24, 0x25	; 37
    1102:	0e 94 51 09 	call	0x12a2	; 0x12a2 <M_Dio_PinMode>
    1106:	08 95       	ret
    1108:	61 e0       	ldi	r22, 0x01	; 1
    110a:	8b e2       	ldi	r24, 0x2B	; 43
    110c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <M_Dio_PinMode>
    1110:	08 95       	ret
    1112:	61 e0       	ldi	r22, 0x01	; 1
    1114:	84 e1       	ldi	r24, 0x14	; 20
    1116:	0e 94 51 09 	call	0x12a2	; 0x12a2 <M_Dio_PinMode>
    111a:	08 95       	ret
    111c:	61 e0       	ldi	r22, 0x01	; 1
    111e:	8d e2       	ldi	r24, 0x2D	; 45
    1120:	0e 94 51 09 	call	0x12a2	; 0x12a2 <M_Dio_PinMode>
    1124:	08 95       	ret

00001126 <H_Led_On>:
    1126:	82 30       	cpi	r24, 0x02	; 2
    1128:	a9 f0       	breq	.+42     	; 0x1154 <H_Led_On+0x2e>
    112a:	28 f4       	brcc	.+10     	; 0x1136 <H_Led_On+0x10>
    112c:	88 23       	and	r24, r24
    112e:	41 f0       	breq	.+16     	; 0x1140 <H_Led_On+0x1a>
    1130:	81 30       	cpi	r24, 0x01	; 1
    1132:	59 f0       	breq	.+22     	; 0x114a <H_Led_On+0x24>
    1134:	08 95       	ret
    1136:	83 30       	cpi	r24, 0x03	; 3
    1138:	91 f0       	breq	.+36     	; 0x115e <H_Led_On+0x38>
    113a:	84 30       	cpi	r24, 0x04	; 4
    113c:	a9 f0       	breq	.+42     	; 0x1168 <H_Led_On+0x42>
    113e:	08 95       	ret
    1140:	61 e0       	ldi	r22, 0x01	; 1
    1142:	84 e2       	ldi	r24, 0x24	; 36
    1144:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
    1148:	08 95       	ret
    114a:	61 e0       	ldi	r22, 0x01	; 1
    114c:	85 e2       	ldi	r24, 0x25	; 37
    114e:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
    1152:	08 95       	ret
    1154:	61 e0       	ldi	r22, 0x01	; 1
    1156:	8b e2       	ldi	r24, 0x2B	; 43
    1158:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
    115c:	08 95       	ret
    115e:	61 e0       	ldi	r22, 0x01	; 1
    1160:	84 e1       	ldi	r24, 0x14	; 20
    1162:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
    1166:	08 95       	ret
    1168:	61 e0       	ldi	r22, 0x01	; 1
    116a:	8d e2       	ldi	r24, 0x2D	; 45
    116c:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
    1170:	08 95       	ret

00001172 <H_Led_Off>:
    1172:	82 30       	cpi	r24, 0x02	; 2
    1174:	a9 f0       	breq	.+42     	; 0x11a0 <H_Led_Off+0x2e>
    1176:	28 f4       	brcc	.+10     	; 0x1182 <H_Led_Off+0x10>
    1178:	88 23       	and	r24, r24
    117a:	41 f0       	breq	.+16     	; 0x118c <H_Led_Off+0x1a>
    117c:	81 30       	cpi	r24, 0x01	; 1
    117e:	59 f0       	breq	.+22     	; 0x1196 <H_Led_Off+0x24>
    1180:	08 95       	ret
    1182:	83 30       	cpi	r24, 0x03	; 3
    1184:	91 f0       	breq	.+36     	; 0x11aa <H_Led_Off+0x38>
    1186:	84 30       	cpi	r24, 0x04	; 4
    1188:	a9 f0       	breq	.+42     	; 0x11b4 <H_Led_Off+0x42>
    118a:	08 95       	ret
    118c:	62 e0       	ldi	r22, 0x02	; 2
    118e:	84 e2       	ldi	r24, 0x24	; 36
    1190:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
    1194:	08 95       	ret
    1196:	62 e0       	ldi	r22, 0x02	; 2
    1198:	85 e2       	ldi	r24, 0x25	; 37
    119a:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
    119e:	08 95       	ret
    11a0:	62 e0       	ldi	r22, 0x02	; 2
    11a2:	8b e2       	ldi	r24, 0x2B	; 43
    11a4:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
    11a8:	08 95       	ret
    11aa:	62 e0       	ldi	r22, 0x02	; 2
    11ac:	84 e1       	ldi	r24, 0x14	; 20
    11ae:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
    11b2:	08 95       	ret
    11b4:	62 e0       	ldi	r22, 0x02	; 2
    11b6:	8d e2       	ldi	r24, 0x2D	; 45
    11b8:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_Dio_PinWrite>
    11bc:	08 95       	ret

000011be <M_ADC_INIT>:
    11be:	87 b1       	in	r24, 0x07	; 7
    11c0:	8f 77       	andi	r24, 0x7F	; 127
    11c2:	87 b9       	out	0x07, r24	; 7
    11c4:	87 b1       	in	r24, 0x07	; 7
    11c6:	80 64       	ori	r24, 0x40	; 64
    11c8:	87 b9       	out	0x07, r24	; 7
    11ca:	87 b1       	in	r24, 0x07	; 7
    11cc:	8f 7d       	andi	r24, 0xDF	; 223
    11ce:	87 b9       	out	0x07, r24	; 7
    11d0:	86 b1       	in	r24, 0x06	; 6
    11d2:	88 7f       	andi	r24, 0xF8	; 248
    11d4:	86 b9       	out	0x06, r24	; 6
    11d6:	86 b1       	in	r24, 0x06	; 6
    11d8:	87 60       	ori	r24, 0x07	; 7
    11da:	86 b9       	out	0x06, r24	; 6
    11dc:	86 b1       	in	r24, 0x06	; 6
    11de:	80 68       	ori	r24, 0x80	; 128
    11e0:	86 b9       	out	0x06, r24	; 6
    11e2:	08 95       	ret

000011e4 <M_ADC_StartConversionAsynch>:
    11e4:	61 15       	cp	r22, r1
    11e6:	71 05       	cpc	r23, r1
    11e8:	01 f1       	breq	.+64     	; 0x122a <M_ADC_StartConversionAsynch+0x46>
    11ea:	41 15       	cp	r20, r1
    11ec:	51 05       	cpc	r21, r1
    11ee:	f9 f0       	breq	.+62     	; 0x122e <M_ADC_StartConversionAsynch+0x4a>
    11f0:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <Global_ADCBusyFlag>
    11f4:	91 11       	cpse	r25, r1
    11f6:	1d c0       	rjmp	.+58     	; 0x1232 <M_ADC_StartConversionAsynch+0x4e>
    11f8:	91 e0       	ldi	r25, 0x01	; 1
    11fa:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <Global_ADCBusyFlag>
    11fe:	70 93 04 03 	sts	0x0304, r23	; 0x800304 <Global_PointerResult+0x1>
    1202:	60 93 03 03 	sts	0x0303, r22	; 0x800303 <Global_PointerResult>
    1206:	50 93 02 03 	sts	0x0302, r21	; 0x800302 <Global_NotificationFunc+0x1>
    120a:	40 93 01 03 	sts	0x0301, r20	; 0x800301 <Global_NotificationFunc>
    120e:	97 b1       	in	r25, 0x07	; 7
    1210:	90 7e       	andi	r25, 0xE0	; 224
    1212:	97 b9       	out	0x07, r25	; 7
    1214:	97 b1       	in	r25, 0x07	; 7
    1216:	89 2b       	or	r24, r25
    1218:	87 b9       	out	0x07, r24	; 7
    121a:	86 b1       	in	r24, 0x06	; 6
    121c:	80 64       	ori	r24, 0x40	; 64
    121e:	86 b9       	out	0x06, r24	; 6
    1220:	86 b1       	in	r24, 0x06	; 6
    1222:	88 60       	ori	r24, 0x08	; 8
    1224:	86 b9       	out	0x06, r24	; 6
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	08 95       	ret
    122a:	83 e0       	ldi	r24, 0x03	; 3
    122c:	08 95       	ret
    122e:	83 e0       	ldi	r24, 0x03	; 3
    1230:	08 95       	ret
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	08 95       	ret

00001236 <__vector_16>:
    1236:	1f 92       	push	r1
    1238:	0f 92       	push	r0
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	0f 92       	push	r0
    123e:	11 24       	eor	r1, r1
    1240:	2f 93       	push	r18
    1242:	3f 93       	push	r19
    1244:	4f 93       	push	r20
    1246:	5f 93       	push	r21
    1248:	6f 93       	push	r22
    124a:	7f 93       	push	r23
    124c:	8f 93       	push	r24
    124e:	9f 93       	push	r25
    1250:	af 93       	push	r26
    1252:	bf 93       	push	r27
    1254:	ef 93       	push	r30
    1256:	ff 93       	push	r31
    1258:	e0 91 03 03 	lds	r30, 0x0303	; 0x800303 <Global_PointerResult>
    125c:	f0 91 04 03 	lds	r31, 0x0304	; 0x800304 <Global_PointerResult+0x1>
    1260:	84 b1       	in	r24, 0x04	; 4
    1262:	95 b1       	in	r25, 0x05	; 5
    1264:	91 83       	std	Z+1, r25	; 0x01
    1266:	80 83       	st	Z, r24
    1268:	86 b1       	in	r24, 0x06	; 6
    126a:	87 7f       	andi	r24, 0xF7	; 247
    126c:	86 b9       	out	0x06, r24	; 6
    126e:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <Global_ADCBusyFlag>
    1272:	e0 91 01 03 	lds	r30, 0x0301	; 0x800301 <Global_NotificationFunc>
    1276:	f0 91 02 03 	lds	r31, 0x0302	; 0x800302 <Global_NotificationFunc+0x1>
    127a:	30 97       	sbiw	r30, 0x00	; 0
    127c:	09 f0       	breq	.+2      	; 0x1280 <__vector_16+0x4a>
    127e:	09 95       	icall
    1280:	ff 91       	pop	r31
    1282:	ef 91       	pop	r30
    1284:	bf 91       	pop	r27
    1286:	af 91       	pop	r26
    1288:	9f 91       	pop	r25
    128a:	8f 91       	pop	r24
    128c:	7f 91       	pop	r23
    128e:	6f 91       	pop	r22
    1290:	5f 91       	pop	r21
    1292:	4f 91       	pop	r20
    1294:	3f 91       	pop	r19
    1296:	2f 91       	pop	r18
    1298:	0f 90       	pop	r0
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	0f 90       	pop	r0
    129e:	1f 90       	pop	r1
    12a0:	18 95       	reti

000012a2 <M_Dio_PinMode>:
    12a2:	9d ec       	ldi	r25, 0xCD	; 205
    12a4:	89 9f       	mul	r24, r25
    12a6:	91 2d       	mov	r25, r1
    12a8:	11 24       	eor	r1, r1
    12aa:	29 2f       	mov	r18, r25
    12ac:	26 95       	lsr	r18
    12ae:	26 95       	lsr	r18
    12b0:	26 95       	lsr	r18
    12b2:	22 0f       	add	r18, r18
    12b4:	32 2f       	mov	r19, r18
    12b6:	33 0f       	add	r19, r19
    12b8:	33 0f       	add	r19, r19
    12ba:	23 0f       	add	r18, r19
    12bc:	82 1b       	sub	r24, r18
    12be:	28 2f       	mov	r18, r24
    12c0:	96 95       	lsr	r25
    12c2:	96 95       	lsr	r25
    12c4:	96 95       	lsr	r25
    12c6:	61 30       	cpi	r22, 0x01	; 1
    12c8:	19 f0       	breq	.+6      	; 0x12d0 <M_Dio_PinMode+0x2e>
    12ca:	62 30       	cpi	r22, 0x02	; 2
    12cc:	c1 f1       	breq	.+112    	; 0x133e <M_Dio_PinMode+0x9c>
    12ce:	08 95       	ret
    12d0:	92 30       	cpi	r25, 0x02	; 2
    12d2:	a1 f0       	breq	.+40     	; 0x12fc <M_Dio_PinMode+0x5a>
    12d4:	18 f4       	brcc	.+6      	; 0x12dc <M_Dio_PinMode+0x3a>
    12d6:	91 30       	cpi	r25, 0x01	; 1
    12d8:	31 f0       	breq	.+12     	; 0x12e6 <M_Dio_PinMode+0x44>
    12da:	08 95       	ret
    12dc:	93 30       	cpi	r25, 0x03	; 3
    12de:	c9 f0       	breq	.+50     	; 0x1312 <M_Dio_PinMode+0x70>
    12e0:	94 30       	cpi	r25, 0x04	; 4
    12e2:	11 f1       	breq	.+68     	; 0x1328 <M_Dio_PinMode+0x86>
    12e4:	08 95       	ret
    12e6:	3a b3       	in	r19, 0x1a	; 26
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <M_Dio_PinMode+0x50>
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	2a 95       	dec	r18
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <M_Dio_PinMode+0x4c>
    12f6:	83 2b       	or	r24, r19
    12f8:	8a bb       	out	0x1a, r24	; 26
    12fa:	08 95       	ret
    12fc:	37 b3       	in	r19, 0x17	; 23
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <M_Dio_PinMode+0x66>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	2a 95       	dec	r18
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <M_Dio_PinMode+0x62>
    130c:	83 2b       	or	r24, r19
    130e:	87 bb       	out	0x17, r24	; 23
    1310:	08 95       	ret
    1312:	34 b3       	in	r19, 0x14	; 20
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	02 c0       	rjmp	.+4      	; 0x131e <M_Dio_PinMode+0x7c>
    131a:	88 0f       	add	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	2a 95       	dec	r18
    1320:	e2 f7       	brpl	.-8      	; 0x131a <M_Dio_PinMode+0x78>
    1322:	83 2b       	or	r24, r19
    1324:	84 bb       	out	0x14, r24	; 20
    1326:	08 95       	ret
    1328:	31 b3       	in	r19, 0x11	; 17
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <M_Dio_PinMode+0x92>
    1330:	88 0f       	add	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	2a 95       	dec	r18
    1336:	e2 f7       	brpl	.-8      	; 0x1330 <M_Dio_PinMode+0x8e>
    1338:	83 2b       	or	r24, r19
    133a:	81 bb       	out	0x11, r24	; 17
    133c:	08 95       	ret
    133e:	92 30       	cpi	r25, 0x02	; 2
    1340:	a9 f0       	breq	.+42     	; 0x136c <M_Dio_PinMode+0xca>
    1342:	18 f4       	brcc	.+6      	; 0x134a <M_Dio_PinMode+0xa8>
    1344:	91 30       	cpi	r25, 0x01	; 1
    1346:	31 f0       	breq	.+12     	; 0x1354 <M_Dio_PinMode+0xb2>
    1348:	08 95       	ret
    134a:	93 30       	cpi	r25, 0x03	; 3
    134c:	d9 f0       	breq	.+54     	; 0x1384 <M_Dio_PinMode+0xe2>
    134e:	94 30       	cpi	r25, 0x04	; 4
    1350:	29 f1       	breq	.+74     	; 0x139c <M_Dio_PinMode+0xfa>
    1352:	08 95       	ret
    1354:	3a b3       	in	r19, 0x1a	; 26
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <M_Dio_PinMode+0xbe>
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	2a 95       	dec	r18
    1362:	e2 f7       	brpl	.-8      	; 0x135c <M_Dio_PinMode+0xba>
    1364:	80 95       	com	r24
    1366:	83 23       	and	r24, r19
    1368:	8a bb       	out	0x1a, r24	; 26
    136a:	08 95       	ret
    136c:	37 b3       	in	r19, 0x17	; 23
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <M_Dio_PinMode+0xd6>
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	2a 95       	dec	r18
    137a:	e2 f7       	brpl	.-8      	; 0x1374 <M_Dio_PinMode+0xd2>
    137c:	80 95       	com	r24
    137e:	83 23       	and	r24, r19
    1380:	87 bb       	out	0x17, r24	; 23
    1382:	08 95       	ret
    1384:	34 b3       	in	r19, 0x14	; 20
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <M_Dio_PinMode+0xee>
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	2a 95       	dec	r18
    1392:	e2 f7       	brpl	.-8      	; 0x138c <M_Dio_PinMode+0xea>
    1394:	80 95       	com	r24
    1396:	83 23       	and	r24, r19
    1398:	84 bb       	out	0x14, r24	; 20
    139a:	08 95       	ret
    139c:	31 b3       	in	r19, 0x11	; 17
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <M_Dio_PinMode+0x106>
    13a4:	88 0f       	add	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	2a 95       	dec	r18
    13aa:	e2 f7       	brpl	.-8      	; 0x13a4 <M_Dio_PinMode+0x102>
    13ac:	80 95       	com	r24
    13ae:	83 23       	and	r24, r19
    13b0:	81 bb       	out	0x11, r24	; 17
    13b2:	08 95       	ret

000013b4 <M_Dio_PinPullRes>:
    13b4:	9d ec       	ldi	r25, 0xCD	; 205
    13b6:	89 9f       	mul	r24, r25
    13b8:	91 2d       	mov	r25, r1
    13ba:	11 24       	eor	r1, r1
    13bc:	29 2f       	mov	r18, r25
    13be:	26 95       	lsr	r18
    13c0:	26 95       	lsr	r18
    13c2:	26 95       	lsr	r18
    13c4:	22 0f       	add	r18, r18
    13c6:	32 2f       	mov	r19, r18
    13c8:	33 0f       	add	r19, r19
    13ca:	33 0f       	add	r19, r19
    13cc:	23 0f       	add	r18, r19
    13ce:	82 1b       	sub	r24, r18
    13d0:	28 2f       	mov	r18, r24
    13d2:	96 95       	lsr	r25
    13d4:	96 95       	lsr	r25
    13d6:	96 95       	lsr	r25
    13d8:	61 30       	cpi	r22, 0x01	; 1
    13da:	19 f0       	breq	.+6      	; 0x13e2 <M_Dio_PinPullRes+0x2e>
    13dc:	62 30       	cpi	r22, 0x02	; 2
    13de:	c1 f1       	breq	.+112    	; 0x1450 <M_Dio_PinPullRes+0x9c>
    13e0:	08 95       	ret
    13e2:	92 30       	cpi	r25, 0x02	; 2
    13e4:	a1 f0       	breq	.+40     	; 0x140e <M_Dio_PinPullRes+0x5a>
    13e6:	18 f4       	brcc	.+6      	; 0x13ee <M_Dio_PinPullRes+0x3a>
    13e8:	91 30       	cpi	r25, 0x01	; 1
    13ea:	31 f0       	breq	.+12     	; 0x13f8 <M_Dio_PinPullRes+0x44>
    13ec:	08 95       	ret
    13ee:	93 30       	cpi	r25, 0x03	; 3
    13f0:	c9 f0       	breq	.+50     	; 0x1424 <M_Dio_PinPullRes+0x70>
    13f2:	94 30       	cpi	r25, 0x04	; 4
    13f4:	11 f1       	breq	.+68     	; 0x143a <M_Dio_PinPullRes+0x86>
    13f6:	08 95       	ret
    13f8:	3b b3       	in	r19, 0x1b	; 27
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <M_Dio_PinPullRes+0x50>
    1400:	88 0f       	add	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	2a 95       	dec	r18
    1406:	e2 f7       	brpl	.-8      	; 0x1400 <M_Dio_PinPullRes+0x4c>
    1408:	83 2b       	or	r24, r19
    140a:	8b bb       	out	0x1b, r24	; 27
    140c:	08 95       	ret
    140e:	38 b3       	in	r19, 0x18	; 24
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	02 c0       	rjmp	.+4      	; 0x141a <M_Dio_PinPullRes+0x66>
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	2a 95       	dec	r18
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <M_Dio_PinPullRes+0x62>
    141e:	83 2b       	or	r24, r19
    1420:	88 bb       	out	0x18, r24	; 24
    1422:	08 95       	ret
    1424:	35 b3       	in	r19, 0x15	; 21
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <M_Dio_PinPullRes+0x7c>
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	2a 95       	dec	r18
    1432:	e2 f7       	brpl	.-8      	; 0x142c <M_Dio_PinPullRes+0x78>
    1434:	83 2b       	or	r24, r19
    1436:	85 bb       	out	0x15, r24	; 21
    1438:	08 95       	ret
    143a:	32 b3       	in	r19, 0x12	; 18
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <M_Dio_PinPullRes+0x92>
    1442:	88 0f       	add	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	2a 95       	dec	r18
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <M_Dio_PinPullRes+0x8e>
    144a:	83 2b       	or	r24, r19
    144c:	82 bb       	out	0x12, r24	; 18
    144e:	08 95       	ret
    1450:	92 30       	cpi	r25, 0x02	; 2
    1452:	a9 f0       	breq	.+42     	; 0x147e <M_Dio_PinPullRes+0xca>
    1454:	18 f4       	brcc	.+6      	; 0x145c <M_Dio_PinPullRes+0xa8>
    1456:	91 30       	cpi	r25, 0x01	; 1
    1458:	31 f0       	breq	.+12     	; 0x1466 <M_Dio_PinPullRes+0xb2>
    145a:	08 95       	ret
    145c:	93 30       	cpi	r25, 0x03	; 3
    145e:	d9 f0       	breq	.+54     	; 0x1496 <M_Dio_PinPullRes+0xe2>
    1460:	94 30       	cpi	r25, 0x04	; 4
    1462:	29 f1       	breq	.+74     	; 0x14ae <M_Dio_PinPullRes+0xfa>
    1464:	08 95       	ret
    1466:	3b b3       	in	r19, 0x1b	; 27
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <M_Dio_PinPullRes+0xbe>
    146e:	88 0f       	add	r24, r24
    1470:	99 1f       	adc	r25, r25
    1472:	2a 95       	dec	r18
    1474:	e2 f7       	brpl	.-8      	; 0x146e <M_Dio_PinPullRes+0xba>
    1476:	80 95       	com	r24
    1478:	83 23       	and	r24, r19
    147a:	8b bb       	out	0x1b, r24	; 27
    147c:	08 95       	ret
    147e:	38 b3       	in	r19, 0x18	; 24
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	02 c0       	rjmp	.+4      	; 0x148a <M_Dio_PinPullRes+0xd6>
    1486:	88 0f       	add	r24, r24
    1488:	99 1f       	adc	r25, r25
    148a:	2a 95       	dec	r18
    148c:	e2 f7       	brpl	.-8      	; 0x1486 <M_Dio_PinPullRes+0xd2>
    148e:	80 95       	com	r24
    1490:	83 23       	and	r24, r19
    1492:	88 bb       	out	0x18, r24	; 24
    1494:	08 95       	ret
    1496:	35 b3       	in	r19, 0x15	; 21
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <M_Dio_PinPullRes+0xee>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	2a 95       	dec	r18
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <M_Dio_PinPullRes+0xea>
    14a6:	80 95       	com	r24
    14a8:	83 23       	and	r24, r19
    14aa:	85 bb       	out	0x15, r24	; 21
    14ac:	08 95       	ret
    14ae:	32 b3       	in	r19, 0x12	; 18
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <M_Dio_PinPullRes+0x106>
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	2a 95       	dec	r18
    14bc:	e2 f7       	brpl	.-8      	; 0x14b6 <M_Dio_PinPullRes+0x102>
    14be:	80 95       	com	r24
    14c0:	83 23       	and	r24, r19
    14c2:	82 bb       	out	0x12, r24	; 18
    14c4:	08 95       	ret

000014c6 <M_Dio_PinWrite>:
    14c6:	9d ec       	ldi	r25, 0xCD	; 205
    14c8:	89 9f       	mul	r24, r25
    14ca:	91 2d       	mov	r25, r1
    14cc:	11 24       	eor	r1, r1
    14ce:	29 2f       	mov	r18, r25
    14d0:	26 95       	lsr	r18
    14d2:	26 95       	lsr	r18
    14d4:	26 95       	lsr	r18
    14d6:	22 0f       	add	r18, r18
    14d8:	32 2f       	mov	r19, r18
    14da:	33 0f       	add	r19, r19
    14dc:	33 0f       	add	r19, r19
    14de:	23 0f       	add	r18, r19
    14e0:	82 1b       	sub	r24, r18
    14e2:	28 2f       	mov	r18, r24
    14e4:	96 95       	lsr	r25
    14e6:	96 95       	lsr	r25
    14e8:	96 95       	lsr	r25
    14ea:	61 30       	cpi	r22, 0x01	; 1
    14ec:	19 f0       	breq	.+6      	; 0x14f4 <M_Dio_PinWrite+0x2e>
    14ee:	62 30       	cpi	r22, 0x02	; 2
    14f0:	c1 f1       	breq	.+112    	; 0x1562 <M_Dio_PinWrite+0x9c>
    14f2:	08 95       	ret
    14f4:	92 30       	cpi	r25, 0x02	; 2
    14f6:	a1 f0       	breq	.+40     	; 0x1520 <M_Dio_PinWrite+0x5a>
    14f8:	18 f4       	brcc	.+6      	; 0x1500 <M_Dio_PinWrite+0x3a>
    14fa:	91 30       	cpi	r25, 0x01	; 1
    14fc:	31 f0       	breq	.+12     	; 0x150a <M_Dio_PinWrite+0x44>
    14fe:	08 95       	ret
    1500:	93 30       	cpi	r25, 0x03	; 3
    1502:	c9 f0       	breq	.+50     	; 0x1536 <M_Dio_PinWrite+0x70>
    1504:	94 30       	cpi	r25, 0x04	; 4
    1506:	11 f1       	breq	.+68     	; 0x154c <M_Dio_PinWrite+0x86>
    1508:	08 95       	ret
    150a:	3b b3       	in	r19, 0x1b	; 27
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <M_Dio_PinWrite+0x50>
    1512:	88 0f       	add	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	2a 95       	dec	r18
    1518:	e2 f7       	brpl	.-8      	; 0x1512 <M_Dio_PinWrite+0x4c>
    151a:	83 2b       	or	r24, r19
    151c:	8b bb       	out	0x1b, r24	; 27
    151e:	08 95       	ret
    1520:	38 b3       	in	r19, 0x18	; 24
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	02 c0       	rjmp	.+4      	; 0x152c <M_Dio_PinWrite+0x66>
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	2a 95       	dec	r18
    152e:	e2 f7       	brpl	.-8      	; 0x1528 <M_Dio_PinWrite+0x62>
    1530:	83 2b       	or	r24, r19
    1532:	88 bb       	out	0x18, r24	; 24
    1534:	08 95       	ret
    1536:	35 b3       	in	r19, 0x15	; 21
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <M_Dio_PinWrite+0x7c>
    153e:	88 0f       	add	r24, r24
    1540:	99 1f       	adc	r25, r25
    1542:	2a 95       	dec	r18
    1544:	e2 f7       	brpl	.-8      	; 0x153e <M_Dio_PinWrite+0x78>
    1546:	83 2b       	or	r24, r19
    1548:	85 bb       	out	0x15, r24	; 21
    154a:	08 95       	ret
    154c:	32 b3       	in	r19, 0x12	; 18
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <M_Dio_PinWrite+0x92>
    1554:	88 0f       	add	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	2a 95       	dec	r18
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <M_Dio_PinWrite+0x8e>
    155c:	83 2b       	or	r24, r19
    155e:	82 bb       	out	0x12, r24	; 18
    1560:	08 95       	ret
    1562:	92 30       	cpi	r25, 0x02	; 2
    1564:	a9 f0       	breq	.+42     	; 0x1590 <M_Dio_PinWrite+0xca>
    1566:	18 f4       	brcc	.+6      	; 0x156e <M_Dio_PinWrite+0xa8>
    1568:	91 30       	cpi	r25, 0x01	; 1
    156a:	31 f0       	breq	.+12     	; 0x1578 <M_Dio_PinWrite+0xb2>
    156c:	08 95       	ret
    156e:	93 30       	cpi	r25, 0x03	; 3
    1570:	d9 f0       	breq	.+54     	; 0x15a8 <M_Dio_PinWrite+0xe2>
    1572:	94 30       	cpi	r25, 0x04	; 4
    1574:	29 f1       	breq	.+74     	; 0x15c0 <M_Dio_PinWrite+0xfa>
    1576:	08 95       	ret
    1578:	3b b3       	in	r19, 0x1b	; 27
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <M_Dio_PinWrite+0xbe>
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	2a 95       	dec	r18
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <M_Dio_PinWrite+0xba>
    1588:	80 95       	com	r24
    158a:	83 23       	and	r24, r19
    158c:	8b bb       	out	0x1b, r24	; 27
    158e:	08 95       	ret
    1590:	38 b3       	in	r19, 0x18	; 24
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	02 c0       	rjmp	.+4      	; 0x159c <M_Dio_PinWrite+0xd6>
    1598:	88 0f       	add	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	2a 95       	dec	r18
    159e:	e2 f7       	brpl	.-8      	; 0x1598 <M_Dio_PinWrite+0xd2>
    15a0:	80 95       	com	r24
    15a2:	83 23       	and	r24, r19
    15a4:	88 bb       	out	0x18, r24	; 24
    15a6:	08 95       	ret
    15a8:	35 b3       	in	r19, 0x15	; 21
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <M_Dio_PinWrite+0xee>
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	2a 95       	dec	r18
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <M_Dio_PinWrite+0xea>
    15b8:	80 95       	com	r24
    15ba:	83 23       	and	r24, r19
    15bc:	85 bb       	out	0x15, r24	; 21
    15be:	08 95       	ret
    15c0:	32 b3       	in	r19, 0x12	; 18
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <M_Dio_PinWrite+0x106>
    15c8:	88 0f       	add	r24, r24
    15ca:	99 1f       	adc	r25, r25
    15cc:	2a 95       	dec	r18
    15ce:	e2 f7       	brpl	.-8      	; 0x15c8 <M_Dio_PinWrite+0x102>
    15d0:	80 95       	com	r24
    15d2:	83 23       	and	r24, r19
    15d4:	82 bb       	out	0x12, r24	; 18
    15d6:	08 95       	ret

000015d8 <M_Dio_PinRead>:
    15d8:	9d ec       	ldi	r25, 0xCD	; 205
    15da:	89 9f       	mul	r24, r25
    15dc:	91 2d       	mov	r25, r1
    15de:	11 24       	eor	r1, r1
    15e0:	29 2f       	mov	r18, r25
    15e2:	26 95       	lsr	r18
    15e4:	26 95       	lsr	r18
    15e6:	26 95       	lsr	r18
    15e8:	22 0f       	add	r18, r18
    15ea:	32 2f       	mov	r19, r18
    15ec:	33 0f       	add	r19, r19
    15ee:	33 0f       	add	r19, r19
    15f0:	23 0f       	add	r18, r19
    15f2:	82 1b       	sub	r24, r18
    15f4:	28 2f       	mov	r18, r24
    15f6:	89 2f       	mov	r24, r25
    15f8:	86 95       	lsr	r24
    15fa:	86 95       	lsr	r24
    15fc:	86 95       	lsr	r24
    15fe:	82 30       	cpi	r24, 0x02	; 2
    1600:	91 f0       	breq	.+36     	; 0x1626 <M_Dio_PinRead+0x4e>
    1602:	18 f4       	brcc	.+6      	; 0x160a <M_Dio_PinRead+0x32>
    1604:	81 30       	cpi	r24, 0x01	; 1
    1606:	31 f0       	breq	.+12     	; 0x1614 <M_Dio_PinRead+0x3c>
    1608:	29 c0       	rjmp	.+82     	; 0x165c <M_Dio_PinRead+0x84>
    160a:	83 30       	cpi	r24, 0x03	; 3
    160c:	a9 f0       	breq	.+42     	; 0x1638 <M_Dio_PinRead+0x60>
    160e:	84 30       	cpi	r24, 0x04	; 4
    1610:	e1 f0       	breq	.+56     	; 0x164a <M_Dio_PinRead+0x72>
    1612:	24 c0       	rjmp	.+72     	; 0x165c <M_Dio_PinRead+0x84>
    1614:	89 b3       	in	r24, 0x19	; 25
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	02 c0       	rjmp	.+4      	; 0x161e <M_Dio_PinRead+0x46>
    161a:	95 95       	asr	r25
    161c:	87 95       	ror	r24
    161e:	2a 95       	dec	r18
    1620:	e2 f7       	brpl	.-8      	; 0x161a <M_Dio_PinRead+0x42>
    1622:	81 70       	andi	r24, 0x01	; 1
    1624:	08 95       	ret
    1626:	86 b3       	in	r24, 0x16	; 22
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <M_Dio_PinRead+0x58>
    162c:	95 95       	asr	r25
    162e:	87 95       	ror	r24
    1630:	2a 95       	dec	r18
    1632:	e2 f7       	brpl	.-8      	; 0x162c <M_Dio_PinRead+0x54>
    1634:	81 70       	andi	r24, 0x01	; 1
    1636:	08 95       	ret
    1638:	83 b3       	in	r24, 0x13	; 19
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <M_Dio_PinRead+0x6a>
    163e:	95 95       	asr	r25
    1640:	87 95       	ror	r24
    1642:	2a 95       	dec	r18
    1644:	e2 f7       	brpl	.-8      	; 0x163e <M_Dio_PinRead+0x66>
    1646:	81 70       	andi	r24, 0x01	; 1
    1648:	08 95       	ret
    164a:	80 b3       	in	r24, 0x10	; 16
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <M_Dio_PinRead+0x7c>
    1650:	95 95       	asr	r25
    1652:	87 95       	ror	r24
    1654:	2a 95       	dec	r18
    1656:	e2 f7       	brpl	.-8      	; 0x1650 <M_Dio_PinRead+0x78>
    1658:	81 70       	andi	r24, 0x01	; 1
    165a:	08 95       	ret
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	08 95       	ret

00001660 <M_EXTI_PINMODE>:
    1660:	62 e0       	ldi	r22, 0x02	; 2
    1662:	8a e2       	ldi	r24, 0x2A	; 42
    1664:	0e 94 51 09 	call	0x12a2	; 0x12a2 <M_Dio_PinMode>
    1668:	62 e0       	ldi	r22, 0x02	; 2
    166a:	8b e2       	ldi	r24, 0x2B	; 43
    166c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <M_Dio_PinMode>
    1670:	61 e0       	ldi	r22, 0x01	; 1
    1672:	8a e2       	ldi	r24, 0x2A	; 42
    1674:	0e 94 da 09 	call	0x13b4	; 0x13b4 <M_Dio_PinPullRes>
    1678:	61 e0       	ldi	r22, 0x01	; 1
    167a:	8a e2       	ldi	r24, 0x2A	; 42
    167c:	0e 94 da 09 	call	0x13b4	; 0x13b4 <M_Dio_PinPullRes>
    1680:	08 95       	ret

00001682 <M_EXTI_Init>:
    1682:	0e 94 30 0b 	call	0x1660	; 0x1660 <M_EXTI_PINMODE>
    1686:	85 b7       	in	r24, 0x35	; 53
    1688:	8e 7f       	andi	r24, 0xFE	; 254
    168a:	85 bf       	out	0x35, r24	; 53
    168c:	85 b7       	in	r24, 0x35	; 53
    168e:	82 60       	ori	r24, 0x02	; 2
    1690:	85 bf       	out	0x35, r24	; 53
    1692:	85 b7       	in	r24, 0x35	; 53
    1694:	84 60       	ori	r24, 0x04	; 4
    1696:	85 bf       	out	0x35, r24	; 53
    1698:	85 b7       	in	r24, 0x35	; 53
    169a:	87 7f       	andi	r24, 0xF7	; 247
    169c:	85 bf       	out	0x35, r24	; 53
    169e:	84 b7       	in	r24, 0x34	; 52
    16a0:	87 7f       	andi	r24, 0xF7	; 247
    16a2:	84 bf       	out	0x34, r24	; 52
    16a4:	8b b7       	in	r24, 0x3b	; 59
    16a6:	80 64       	ori	r24, 0x40	; 64
    16a8:	8b bf       	out	0x3b, r24	; 59
    16aa:	8b b7       	in	r24, 0x3b	; 59
    16ac:	8f 77       	andi	r24, 0x7F	; 127
    16ae:	8b bf       	out	0x3b, r24	; 59
    16b0:	8b b7       	in	r24, 0x3b	; 59
    16b2:	8f 7d       	andi	r24, 0xDF	; 223
    16b4:	8b bf       	out	0x3b, r24	; 59
    16b6:	08 95       	ret

000016b8 <M_EXTI_CallBack>:
    16b8:	61 15       	cp	r22, r1
    16ba:	71 05       	cpc	r23, r1
    16bc:	51 f0       	breq	.+20     	; 0x16d2 <M_EXTI_CallBack+0x1a>
    16be:	83 30       	cpi	r24, 0x03	; 3
    16c0:	40 f4       	brcc	.+16     	; 0x16d2 <M_EXTI_CallBack+0x1a>
    16c2:	e8 2f       	mov	r30, r24
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	ee 0f       	add	r30, r30
    16c8:	ff 1f       	adc	r31, r31
    16ca:	eb 5f       	subi	r30, 0xFB	; 251
    16cc:	fc 4f       	sbci	r31, 0xFC	; 252
    16ce:	71 83       	std	Z+1, r23	; 0x01
    16d0:	60 83       	st	Z, r22
    16d2:	08 95       	ret

000016d4 <__vector_1>:
    16d4:	1f 92       	push	r1
    16d6:	0f 92       	push	r0
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	0f 92       	push	r0
    16dc:	11 24       	eor	r1, r1
    16de:	2f 93       	push	r18
    16e0:	3f 93       	push	r19
    16e2:	4f 93       	push	r20
    16e4:	5f 93       	push	r21
    16e6:	6f 93       	push	r22
    16e8:	7f 93       	push	r23
    16ea:	8f 93       	push	r24
    16ec:	9f 93       	push	r25
    16ee:	af 93       	push	r26
    16f0:	bf 93       	push	r27
    16f2:	ef 93       	push	r30
    16f4:	ff 93       	push	r31
    16f6:	e0 91 05 03 	lds	r30, 0x0305	; 0x800305 <CallBackFunc>
    16fa:	f0 91 06 03 	lds	r31, 0x0306	; 0x800306 <CallBackFunc+0x1>
    16fe:	30 97       	sbiw	r30, 0x00	; 0
    1700:	09 f0       	breq	.+2      	; 0x1704 <__vector_1+0x30>
    1702:	09 95       	icall
    1704:	ff 91       	pop	r31
    1706:	ef 91       	pop	r30
    1708:	bf 91       	pop	r27
    170a:	af 91       	pop	r26
    170c:	9f 91       	pop	r25
    170e:	8f 91       	pop	r24
    1710:	7f 91       	pop	r23
    1712:	6f 91       	pop	r22
    1714:	5f 91       	pop	r21
    1716:	4f 91       	pop	r20
    1718:	3f 91       	pop	r19
    171a:	2f 91       	pop	r18
    171c:	0f 90       	pop	r0
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	0f 90       	pop	r0
    1722:	1f 90       	pop	r1
    1724:	18 95       	reti

00001726 <__vector_2>:
    1726:	1f 92       	push	r1
    1728:	0f 92       	push	r0
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	0f 92       	push	r0
    172e:	11 24       	eor	r1, r1
    1730:	2f 93       	push	r18
    1732:	3f 93       	push	r19
    1734:	4f 93       	push	r20
    1736:	5f 93       	push	r21
    1738:	6f 93       	push	r22
    173a:	7f 93       	push	r23
    173c:	8f 93       	push	r24
    173e:	9f 93       	push	r25
    1740:	af 93       	push	r26
    1742:	bf 93       	push	r27
    1744:	ef 93       	push	r30
    1746:	ff 93       	push	r31
    1748:	e0 91 07 03 	lds	r30, 0x0307	; 0x800307 <CallBackFunc+0x2>
    174c:	f0 91 08 03 	lds	r31, 0x0308	; 0x800308 <CallBackFunc+0x3>
    1750:	30 97       	sbiw	r30, 0x00	; 0
    1752:	09 f0       	breq	.+2      	; 0x1756 <__vector_2+0x30>
    1754:	09 95       	icall
    1756:	ff 91       	pop	r31
    1758:	ef 91       	pop	r30
    175a:	bf 91       	pop	r27
    175c:	af 91       	pop	r26
    175e:	9f 91       	pop	r25
    1760:	8f 91       	pop	r24
    1762:	7f 91       	pop	r23
    1764:	6f 91       	pop	r22
    1766:	5f 91       	pop	r21
    1768:	4f 91       	pop	r20
    176a:	3f 91       	pop	r19
    176c:	2f 91       	pop	r18
    176e:	0f 90       	pop	r0
    1770:	0f be       	out	0x3f, r0	; 63
    1772:	0f 90       	pop	r0
    1774:	1f 90       	pop	r1
    1776:	18 95       	reti

00001778 <__vector_3>:
    1778:	1f 92       	push	r1
    177a:	0f 92       	push	r0
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	0f 92       	push	r0
    1780:	11 24       	eor	r1, r1
    1782:	2f 93       	push	r18
    1784:	3f 93       	push	r19
    1786:	4f 93       	push	r20
    1788:	5f 93       	push	r21
    178a:	6f 93       	push	r22
    178c:	7f 93       	push	r23
    178e:	8f 93       	push	r24
    1790:	9f 93       	push	r25
    1792:	af 93       	push	r26
    1794:	bf 93       	push	r27
    1796:	ef 93       	push	r30
    1798:	ff 93       	push	r31
    179a:	e0 91 09 03 	lds	r30, 0x0309	; 0x800309 <CallBackFunc+0x4>
    179e:	f0 91 0a 03 	lds	r31, 0x030A	; 0x80030a <CallBackFunc+0x5>
    17a2:	30 97       	sbiw	r30, 0x00	; 0
    17a4:	09 f0       	breq	.+2      	; 0x17a8 <__vector_3+0x30>
    17a6:	09 95       	icall
    17a8:	ff 91       	pop	r31
    17aa:	ef 91       	pop	r30
    17ac:	bf 91       	pop	r27
    17ae:	af 91       	pop	r26
    17b0:	9f 91       	pop	r25
    17b2:	8f 91       	pop	r24
    17b4:	7f 91       	pop	r23
    17b6:	6f 91       	pop	r22
    17b8:	5f 91       	pop	r21
    17ba:	4f 91       	pop	r20
    17bc:	3f 91       	pop	r19
    17be:	2f 91       	pop	r18
    17c0:	0f 90       	pop	r0
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	0f 90       	pop	r0
    17c6:	1f 90       	pop	r1
    17c8:	18 95       	reti

000017ca <M_GIE_EnableGlobal>:
    17ca:	78 94       	sei
    17cc:	08 95       	ret

000017ce <TIMER0_Init>:
    17ce:	83 b7       	in	r24, 0x33	; 51
    17d0:	80 64       	ori	r24, 0x40	; 64
    17d2:	83 bf       	out	0x33, r24	; 51
    17d4:	83 b7       	in	r24, 0x33	; 51
    17d6:	88 60       	ori	r24, 0x08	; 8
    17d8:	83 bf       	out	0x33, r24	; 51
    17da:	80 e7       	ldi	r24, 0x70	; 112
    17dc:	82 bf       	out	0x32, r24	; 50
    17de:	83 b7       	in	r24, 0x33	; 51
    17e0:	88 7f       	andi	r24, 0xF8	; 248
    17e2:	83 bf       	out	0x33, r24	; 51
    17e4:	83 b7       	in	r24, 0x33	; 51
    17e6:	83 60       	ori	r24, 0x03	; 3
    17e8:	83 bf       	out	0x33, r24	; 51
    17ea:	83 b7       	in	r24, 0x33	; 51
    17ec:	8f 7e       	andi	r24, 0xEF	; 239
    17ee:	83 bf       	out	0x33, r24	; 51
    17f0:	83 b7       	in	r24, 0x33	; 51
    17f2:	80 62       	ori	r24, 0x20	; 32
    17f4:	83 bf       	out	0x33, r24	; 51
    17f6:	08 95       	ret

000017f8 <TIMER0_SetCompVal>:
    17f8:	8c bf       	out	0x3c, r24	; 60
    17fa:	08 95       	ret

000017fc <__vector_11>:
    17fc:	1f 92       	push	r1
    17fe:	0f 92       	push	r0
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	0f 92       	push	r0
    1804:	11 24       	eor	r1, r1
    1806:	2f 93       	push	r18
    1808:	3f 93       	push	r19
    180a:	4f 93       	push	r20
    180c:	5f 93       	push	r21
    180e:	6f 93       	push	r22
    1810:	7f 93       	push	r23
    1812:	8f 93       	push	r24
    1814:	9f 93       	push	r25
    1816:	af 93       	push	r26
    1818:	bf 93       	push	r27
    181a:	ef 93       	push	r30
    181c:	ff 93       	push	r31
    181e:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <counter.1616>
    1822:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <counter.1616+0x1>
    1826:	01 96       	adiw	r24, 0x01	; 1
    1828:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <counter.1616+0x1>
    182c:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <counter.1616>
    1830:	81 3d       	cpi	r24, 0xD1	; 209
    1832:	93 40       	sbci	r25, 0x03	; 3
    1834:	69 f4       	brne	.+26     	; 0x1850 <__vector_11+0x54>
    1836:	80 e7       	ldi	r24, 0x70	; 112
    1838:	82 bf       	out	0x32, r24	; 50
    183a:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <counter.1616+0x1>
    183e:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <counter.1616>
    1842:	e0 91 0f 03 	lds	r30, 0x030F	; 0x80030f <TIMER0_OVFCallBackFunc>
    1846:	f0 91 10 03 	lds	r31, 0x0310	; 0x800310 <TIMER0_OVFCallBackFunc+0x1>
    184a:	30 97       	sbiw	r30, 0x00	; 0
    184c:	09 f0       	breq	.+2      	; 0x1850 <__vector_11+0x54>
    184e:	09 95       	icall
    1850:	ff 91       	pop	r31
    1852:	ef 91       	pop	r30
    1854:	bf 91       	pop	r27
    1856:	af 91       	pop	r26
    1858:	9f 91       	pop	r25
    185a:	8f 91       	pop	r24
    185c:	7f 91       	pop	r23
    185e:	6f 91       	pop	r22
    1860:	5f 91       	pop	r21
    1862:	4f 91       	pop	r20
    1864:	3f 91       	pop	r19
    1866:	2f 91       	pop	r18
    1868:	0f 90       	pop	r0
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	0f 90       	pop	r0
    186e:	1f 90       	pop	r1
    1870:	18 95       	reti

00001872 <TIMER1_Init>:
    1872:	8f b5       	in	r24, 0x2f	; 47
    1874:	8e 7f       	andi	r24, 0xFE	; 254
    1876:	8f bd       	out	0x2f, r24	; 47
    1878:	8f b5       	in	r24, 0x2f	; 47
    187a:	8d 7f       	andi	r24, 0xFD	; 253
    187c:	8f bd       	out	0x2f, r24	; 47
    187e:	8e b5       	in	r24, 0x2e	; 46
    1880:	87 7f       	andi	r24, 0xF7	; 247
    1882:	8e bd       	out	0x2e, r24	; 46
    1884:	8e b5       	in	r24, 0x2e	; 46
    1886:	8f 7e       	andi	r24, 0xEF	; 239
    1888:	8e bd       	out	0x2e, r24	; 46
    188a:	8e b5       	in	r24, 0x2e	; 46
    188c:	81 60       	ori	r24, 0x01	; 1
    188e:	8e bd       	out	0x2e, r24	; 46
    1890:	8e b5       	in	r24, 0x2e	; 46
    1892:	8d 7f       	andi	r24, 0xFD	; 253
    1894:	8e bd       	out	0x2e, r24	; 46
    1896:	8e b5       	in	r24, 0x2e	; 46
    1898:	84 60       	ori	r24, 0x04	; 4
    189a:	8e bd       	out	0x2e, r24	; 46
    189c:	89 b7       	in	r24, 0x39	; 57
    189e:	84 60       	ori	r24, 0x04	; 4
    18a0:	89 bf       	out	0x39, r24	; 57
    18a2:	08 95       	ret

000018a4 <M_Timer1_CallBackFn>:
    18a4:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <TIMER1_OVFCallBackFunc+0x1>
    18a8:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <TIMER1_OVFCallBackFunc>
    18ac:	08 95       	ret

000018ae <__vector_9>:
    18ae:	1f 92       	push	r1
    18b0:	0f 92       	push	r0
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	0f 92       	push	r0
    18b6:	11 24       	eor	r1, r1
    18b8:	2f 93       	push	r18
    18ba:	3f 93       	push	r19
    18bc:	4f 93       	push	r20
    18be:	5f 93       	push	r21
    18c0:	6f 93       	push	r22
    18c2:	7f 93       	push	r23
    18c4:	8f 93       	push	r24
    18c6:	9f 93       	push	r25
    18c8:	af 93       	push	r26
    18ca:	bf 93       	push	r27
    18cc:	ef 93       	push	r30
    18ce:	ff 93       	push	r31
    18d0:	e0 91 0d 03 	lds	r30, 0x030D	; 0x80030d <TIMER1_OVFCallBackFunc>
    18d4:	f0 91 0e 03 	lds	r31, 0x030E	; 0x80030e <TIMER1_OVFCallBackFunc+0x1>
    18d8:	30 97       	sbiw	r30, 0x00	; 0
    18da:	09 f0       	breq	.+2      	; 0x18de <__vector_9+0x30>
    18dc:	09 95       	icall
    18de:	ff 91       	pop	r31
    18e0:	ef 91       	pop	r30
    18e2:	bf 91       	pop	r27
    18e4:	af 91       	pop	r26
    18e6:	9f 91       	pop	r25
    18e8:	8f 91       	pop	r24
    18ea:	7f 91       	pop	r23
    18ec:	6f 91       	pop	r22
    18ee:	5f 91       	pop	r21
    18f0:	4f 91       	pop	r20
    18f2:	3f 91       	pop	r19
    18f4:	2f 91       	pop	r18
    18f6:	0f 90       	pop	r0
    18f8:	0f be       	out	0x3f, r0	; 63
    18fa:	0f 90       	pop	r0
    18fc:	1f 90       	pop	r1
    18fe:	18 95       	reti

00001900 <UART_Init>:
    1900:	81 b3       	in	r24, 0x11	; 17
    1902:	8e 7f       	andi	r24, 0xFE	; 254
    1904:	81 bb       	out	0x11, r24	; 17
    1906:	81 b3       	in	r24, 0x11	; 17
    1908:	82 60       	ori	r24, 0x02	; 2
    190a:	81 bb       	out	0x11, r24	; 17
    190c:	87 e6       	ldi	r24, 0x67	; 103
    190e:	89 b9       	out	0x09, r24	; 9
    1910:	10 bc       	out	0x20, r1	; 32
    1912:	86 e8       	ldi	r24, 0x86	; 134
    1914:	80 bd       	out	0x20, r24	; 32
    1916:	8a b1       	in	r24, 0x0a	; 10
    1918:	80 61       	ori	r24, 0x10	; 16
    191a:	8a b9       	out	0x0a, r24	; 10
    191c:	8a b1       	in	r24, 0x0a	; 10
    191e:	88 60       	ori	r24, 0x08	; 8
    1920:	8a b9       	out	0x0a, r24	; 10
    1922:	08 95       	ret

00001924 <UART_Tx>:
    1924:	8c b9       	out	0x0c, r24	; 12
    1926:	5e 9b       	sbis	0x0b, 6	; 11
    1928:	fe cf       	rjmp	.-4      	; 0x1926 <UART_Tx+0x2>
    192a:	08 95       	ret

0000192c <UART_Rx>:
    192c:	04 c0       	rjmp	.+8      	; 0x1936 <UART_Rx+0xa>
    192e:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <Local_u8_Variable13>
    1932:	81 11       	cpse	r24, r1
    1934:	02 c0       	rjmp	.+4      	; 0x193a <UART_Rx+0xe>
    1936:	5f 9b       	sbis	0x0b, 7	; 11
    1938:	fa cf       	rjmp	.-12     	; 0x192e <UART_Rx+0x2>
    193a:	8c b1       	in	r24, 0x0c	; 12
    193c:	08 95       	ret

0000193e <UART_TxString>:
    193e:	0f 93       	push	r16
    1940:	1f 93       	push	r17
    1942:	cf 93       	push	r28
    1944:	00 97       	sbiw	r24, 0x00	; 0
    1946:	59 f4       	brne	.+22     	; 0x195e <UART_TxString+0x20>
    1948:	12 c0       	rjmp	.+36     	; 0x196e <UART_TxString+0x30>
    194a:	0e 94 92 0c 	call	0x1924	; 0x1924 <UART_Tx>
    194e:	cf 5f       	subi	r28, 0xFF	; 255
    1950:	8f e3       	ldi	r24, 0x3F	; 63
    1952:	9c e9       	ldi	r25, 0x9C	; 156
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	f1 f7       	brne	.-4      	; 0x1954 <UART_TxString+0x16>
    1958:	00 c0       	rjmp	.+0      	; 0x195a <UART_TxString+0x1c>
    195a:	00 00       	nop
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <UART_TxString+0x24>
    195e:	8c 01       	movw	r16, r24
    1960:	c0 e0       	ldi	r28, 0x00	; 0
    1962:	f8 01       	movw	r30, r16
    1964:	ec 0f       	add	r30, r28
    1966:	f1 1d       	adc	r31, r1
    1968:	80 81       	ld	r24, Z
    196a:	81 11       	cpse	r24, r1
    196c:	ee cf       	rjmp	.-36     	; 0x194a <UART_TxString+0xc>
    196e:	cf 91       	pop	r28
    1970:	1f 91       	pop	r17
    1972:	0f 91       	pop	r16
    1974:	08 95       	ret

00001976 <__tablejump2__>:
    1976:	ee 0f       	add	r30, r30
    1978:	ff 1f       	adc	r31, r31
    197a:	05 90       	lpm	r0, Z+
    197c:	f4 91       	lpm	r31, Z
    197e:	e0 2d       	mov	r30, r0
    1980:	09 94       	ijmp

00001982 <__umulhisi3>:
    1982:	a2 9f       	mul	r26, r18
    1984:	b0 01       	movw	r22, r0
    1986:	b3 9f       	mul	r27, r19
    1988:	c0 01       	movw	r24, r0
    198a:	a3 9f       	mul	r26, r19
    198c:	70 0d       	add	r23, r0
    198e:	81 1d       	adc	r24, r1
    1990:	11 24       	eor	r1, r1
    1992:	91 1d       	adc	r25, r1
    1994:	b2 9f       	mul	r27, r18
    1996:	70 0d       	add	r23, r0
    1998:	81 1d       	adc	r24, r1
    199a:	11 24       	eor	r1, r1
    199c:	91 1d       	adc	r25, r1
    199e:	08 95       	ret

000019a0 <_exit>:
    19a0:	f8 94       	cli

000019a2 <__stop_program>:
    19a2:	ff cf       	rjmp	.-2      	; 0x19a2 <__stop_program>
