
SmartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002b0  00800060  000019d8  00001a6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00800310  00800310  00001d1c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d1c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001d4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f8  00000000  00000000  00001d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004b23  00000000  00000000  00002180  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001302  00000000  00000000  00006ca3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000292d  00000000  00000000  00007fa5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008ec  00000000  00000000  0000a8d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fbe  00000000  00000000  0000b1c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002963  00000000  00000000  0000c17e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000330  00000000  00000000  0000eae1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 84 0b 	jmp	0x1708	; 0x1708 <__vector_1>
       8:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__vector_2>
       c:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__vector_3>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 71 0c 	jmp	0x18e2	; 0x18e2 <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 18 0c 	jmp	0x1830	; 0x1830 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 35 09 	jmp	0x126a	; 0x126a <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	60 01       	movw	r12, r0
      56:	64 01       	movw	r12, r8
      58:	68 01       	movw	r12, r16
      5a:	6c 01       	movw	r12, r24
      5c:	70 01       	movw	r14, r0
      5e:	74 01       	movw	r14, r8
      60:	78 01       	movw	r14, r16
      62:	7c 01       	movw	r14, r24
      64:	80 01       	movw	r16, r0
      66:	84 01       	movw	r16, r8

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf e5       	ldi	r28, 0x5F	; 95
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	13 e0       	ldi	r17, 0x03	; 3
      76:	a0 e6       	ldi	r26, 0x60	; 96
      78:	b0 e0       	ldi	r27, 0x00	; 0
      7a:	e8 ed       	ldi	r30, 0xD8	; 216
      7c:	f9 e1       	ldi	r31, 0x19	; 25
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 31       	cpi	r26, 0x10	; 16
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	a0 e1       	ldi	r26, 0x10	; 16
      8e:	b3 e0       	ldi	r27, 0x03	; 3
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 32       	cpi	r26, 0x2B	; 43
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 10 02 	call	0x420	; 0x420 <main>
      9e:	0c 94 ea 0c 	jmp	0x19d4	; 0x19d4 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_ISR>:
	Local_u8_erorr = M_ADC_StartConversionAsynch(0, &Gloable_u16_ADC_Reading,ADC_ISR);
}

void ADC_ISR(void)
{
	Gloable_u16_Analog_MV = (Gloable_u16_ADC_Reading * 5000UL) /1024 ;
      a6:	20 91 14 03 	lds	r18, 0x0314	; 0x800314 <Gloable_u16_ADC_Reading>
      aa:	30 91 15 03 	lds	r19, 0x0315	; 0x800315 <Gloable_u16_ADC_Reading+0x1>
      ae:	a8 e8       	ldi	r26, 0x88	; 136
      b0:	b3 e1       	ldi	r27, 0x13	; 19
      b2:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__umulhisi3>
      b6:	9b 01       	movw	r18, r22
      b8:	ac 01       	movw	r20, r24
      ba:	01 2e       	mov	r0, r17
      bc:	1a e0       	ldi	r17, 0x0A	; 10
      be:	56 95       	lsr	r21
      c0:	47 95       	ror	r20
      c2:	37 95       	ror	r19
      c4:	27 95       	ror	r18
      c6:	1a 95       	dec	r17
      c8:	d1 f7       	brne	.-12     	; 0xbe <ADC_ISR+0x18>
      ca:	10 2d       	mov	r17, r0
      cc:	30 93 28 03 	sts	0x0328, r19	; 0x800328 <Gloable_u16_Analog_MV+0x1>
      d0:	20 93 27 03 	sts	0x0327, r18	; 0x800327 <Gloable_u16_Analog_MV>
	Gloable_u8_temp = Gloable_u16_Analog_MV / 10 ;
      d4:	ad ec       	ldi	r26, 0xCD	; 205
      d6:	bc ec       	ldi	r27, 0xCC	; 204
      d8:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__umulhisi3>
      dc:	96 95       	lsr	r25
      de:	87 95       	ror	r24
      e0:	96 95       	lsr	r25
      e2:	87 95       	ror	r24
      e4:	96 95       	lsr	r25
      e6:	87 95       	ror	r24
      e8:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <Gloable_u8_temp>
      ec:	08 95       	ret

000000ee <X_ISR>:
	}
}

void X_ISR(void)
{
	Local_u8_Variable13 = 1;
      ee:	81 e0       	ldi	r24, 0x01	; 1
      f0:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <Local_u8_Variable13>
	while(Local_u8_Variable6 == 0)
      f4:	04 c0       	rjmp	.+8      	; 0xfe <X_ISR+0x10>
	{
	  Local_u8_Variable6 = H_KeyPad_Read();
      f6:	0e 94 3d 07 	call	0xe7a	; 0xe7a <H_KeyPad_Read>
      fa:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <__data_end>
}

void X_ISR(void)
{
	Local_u8_Variable13 = 1;
	while(Local_u8_Variable6 == 0)
      fe:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <__data_end>
     102:	88 23       	and	r24, r24
     104:	c1 f3       	breq	.-16     	; 0xf6 <X_ISR+0x8>
	{
	  Local_u8_Variable6 = H_KeyPad_Read();
	}
}
     106:	08 95       	ret

00000108 <LCD_Welcome>:
	
}
/********************************************************************END_OF_MAIN*********************************************************************/
void LCD_Welcome(void)
{
	H_Lcd_GoTo(0,0);
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	80 e0       	ldi	r24, 0x00	; 0
     10c:	0e 94 6f 08 	call	0x10de	; 0x10de <H_Lcd_GoTo>
	H_Lcd_WriteString("Welcome to your"); 
     110:	80 e7       	ldi	r24, 0x70	; 112
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	0e 94 58 08 	call	0x10b0	; 0x10b0 <H_Lcd_WriteString>
	H_Lcd_GoTo(1,0);
     118:	60 e0       	ldi	r22, 0x00	; 0
     11a:	81 e0       	ldi	r24, 0x01	; 1
     11c:	0e 94 6f 08 	call	0x10de	; 0x10de <H_Lcd_GoTo>
	H_Lcd_WriteString("home sir");
     120:	80 e9       	ldi	r24, 0x90	; 144
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	0e 94 58 08 	call	0x10b0	; 0x10b0 <H_Lcd_WriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     128:	2f ef       	ldi	r18, 0xFF	; 255
     12a:	89 e6       	ldi	r24, 0x69	; 105
     12c:	98 e1       	ldi	r25, 0x18	; 24
     12e:	21 50       	subi	r18, 0x01	; 1
     130:	80 40       	sbci	r24, 0x00	; 0
     132:	90 40       	sbci	r25, 0x00	; 0
     134:	e1 f7       	brne	.-8      	; 0x12e <LCD_Welcome+0x26>
     136:	00 c0       	rjmp	.+0      	; 0x138 <LCD_Welcome+0x30>
     138:	00 00       	nop
	_delay_ms(500);
	H_Lcd_Clr();
     13a:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <H_Lcd_Clr>
     13e:	2f ef       	ldi	r18, 0xFF	; 255
     140:	89 e6       	ldi	r24, 0x69	; 105
     142:	98 e1       	ldi	r25, 0x18	; 24
     144:	21 50       	subi	r18, 0x01	; 1
     146:	80 40       	sbci	r24, 0x00	; 0
     148:	90 40       	sbci	r25, 0x00	; 0
     14a:	e1 f7       	brne	.-8      	; 0x144 <LCD_Welcome+0x3c>
     14c:	00 c0       	rjmp	.+0      	; 0x14e <LCD_Welcome+0x46>
     14e:	00 00       	nop
	_delay_ms(500);
	H_Lcd_WriteString("Press 'A' To");
     150:	8a e9       	ldi	r24, 0x9A	; 154
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 58 08 	call	0x10b0	; 0x10b0 <H_Lcd_WriteString>
	H_Lcd_GoTo(1,0);
     158:	60 e0       	ldi	r22, 0x00	; 0
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	0e 94 6f 08 	call	0x10de	; 0x10de <H_Lcd_GoTo>
	H_Lcd_WriteString("Proceed");
     160:	88 ea       	ldi	r24, 0xA8	; 168
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	0e 94 58 08 	call	0x10b0	; 0x10b0 <H_Lcd_WriteString>
	/*****************************************************************************/
	UART_TxString("Welcome to your home sir");
     168:	80 e8       	ldi	r24, 0x80	; 128
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
	UART_Tx(NEXTLINE);
     170:	8d e0       	ldi	r24, 0x0D	; 13
     172:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
	UART_TxString(" Press 'A' To");
     176:	89 e9       	ldi	r24, 0x99	; 153
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
	UART_Tx(NEXTLINE);
     17e:	8d e0       	ldi	r24, 0x0D	; 13
     180:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
	UART_TxString(" Proceed");
     184:	87 ea       	ldi	r24, 0xA7	; 167
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
	UART_Tx(NEXTLINE);	
     18c:	8d e0       	ldi	r24, 0x0D	; 13
     18e:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
     192:	08 95       	ret

00000194 <Door_Control>:
}

 void Door_Control(void)
 {
	 M_Dio_PinMode(PD7,OUTPUT);
     194:	61 e0       	ldi	r22, 0x01	; 1
     196:	8f e2       	ldi	r24, 0x2F	; 47
     198:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <M_Dio_PinMode>
	 u8 Local_u8_DOOR_STATUS = ALREADY_CLOSED;
	 UART_Tx(NEXTLINE);
     19c:	8d e0       	ldi	r24, 0x0D	; 13
     19e:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
	 UART_TxString(" 1-Door Open");
     1a2:	80 eb       	ldi	r24, 0xB0	; 176
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
	 UART_Tx(NEXTLINE);
     1aa:	8d e0       	ldi	r24, 0x0D	; 13
     1ac:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
	 UART_TxString(" 2-Door Close");
     1b0:	8d eb       	ldi	r24, 0xBD	; 189
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
	 Local_u8_DOOR_STATUS = HC05_Rx();
     1b8:	0e 94 c6 06 	call	0xd8c	; 0xd8c <HC05_Rx>
	 
	 if (Local_u8_DOOR_STATUS == OPEN_DOOR)
     1bc:	81 33       	cpi	r24, 0x31	; 49
     1be:	b1 f4       	brne	.+44     	; 0x1ec <Door_Control+0x58>
	 {
		 M_Dio_PinWrite(PD7,HIGH);
     1c0:	61 e0       	ldi	r22, 0x01	; 1
     1c2:	8f e2       	ldi	r24, 0x2F	; 47
     1c4:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
     1c8:	8f e3       	ldi	r24, 0x3F	; 63
     1ca:	9f e1       	ldi	r25, 0x1F	; 31
     1cc:	01 97       	sbiw	r24, 0x01	; 1
     1ce:	f1 f7       	brne	.-4      	; 0x1cc <Door_Control+0x38>
     1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <Door_Control+0x3e>
     1d2:	00 00       	nop
		 _delay_ms(2);
		 M_Dio_PinWrite(PD7,LOW);
     1d4:	62 e0       	ldi	r22, 0x02	; 2
     1d6:	8f e2       	ldi	r24, 0x2F	; 47
     1d8:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
	     UART_Tx(NEXTLINE);
     1dc:	8d e0       	ldi	r24, 0x0D	; 13
     1de:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
		 UART_TxString("DONE");
     1e2:	8d ec       	ldi	r24, 0xCD	; 205
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
     1ea:	08 95       	ret
	 }
	 else if(Local_u8_DOOR_STATUS == CLOSE_DOOR)
     1ec:	82 33       	cpi	r24, 0x32	; 50
     1ee:	c1 f4       	brne	.+48     	; 0x220 <Door_Control+0x8c>
	 {
		 M_Dio_PinWrite(PD7,HIGH);
     1f0:	61 e0       	ldi	r22, 0x01	; 1
     1f2:	8f e2       	ldi	r24, 0x2F	; 47
     1f4:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
     1f8:	8f e6       	ldi	r24, 0x6F	; 111
     1fa:	97 e1       	ldi	r25, 0x17	; 23
     1fc:	01 97       	sbiw	r24, 0x01	; 1
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <Door_Control+0x68>
     200:	00 c0       	rjmp	.+0      	; 0x202 <Door_Control+0x6e>
     202:	00 00       	nop
		 _delay_ms(1.5);
		 M_Dio_PinWrite(PD7,LOW);
     204:	62 e0       	ldi	r22, 0x02	; 2
     206:	8f e2       	ldi	r24, 0x2F	; 47
     208:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
	     UART_Tx(NEXTLINE);
     20c:	8d e0       	ldi	r24, 0x0D	; 13
     20e:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
		 UART_TxString("  DONE");
     212:	8b ec       	ldi	r24, 0xCB	; 203
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
		 UART_Tx(NEXTLINE);
     21a:	8d e0       	ldi	r24, 0x0D	; 13
     21c:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
     220:	08 95       	ret

00000222 <Light_Control>:
 }

 void Light_Control(void)
 {
	u8 Local_u8_LIGHTS = OFF ;
    UART_Tx(NEXTLINE);
     222:	8d e0       	ldi	r24, 0x0D	; 13
     224:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
	UART_TxString(" 1-Lights ON");
     228:	82 ed       	ldi	r24, 0xD2	; 210
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
	UART_Tx(NEXTLINE);
     230:	8d e0       	ldi	r24, 0x0D	; 13
     232:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
	UART_TxString(" 2-Lights OFF");
     236:	8f ed       	ldi	r24, 0xDF	; 223
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
	UART_Tx(NEXTLINE);
     23e:	8d e0       	ldi	r24, 0x0D	; 13
     240:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>

	Local_u8_LIGHTS = HC05_Rx() ;
     244:	0e 94 c6 06 	call	0xd8c	; 0xd8c <HC05_Rx>
	if (Local_u8_LIGHTS == LIGHTS_ON)
     248:	81 33       	cpi	r24, 0x31	; 49
     24a:	81 f4       	brne	.+32     	; 0x26c <Light_Control+0x4a>
	{
		H_Led_On(LED0);
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	0e 94 ad 08 	call	0x115a	; 0x115a <H_Led_On>
		H_Led_On(LED1);
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	0e 94 ad 08 	call	0x115a	; 0x115a <H_Led_On>
		H_Led_On(LED2);
     258:	82 e0       	ldi	r24, 0x02	; 2
     25a:	0e 94 ad 08 	call	0x115a	; 0x115a <H_Led_On>
		H_Led_On(LED3);
     25e:	83 e0       	ldi	r24, 0x03	; 3
     260:	0e 94 ad 08 	call	0x115a	; 0x115a <H_Led_On>
		H_Led_On(LED4);
     264:	84 e0       	ldi	r24, 0x04	; 4
     266:	0e 94 ad 08 	call	0x115a	; 0x115a <H_Led_On>
     26a:	08 95       	ret
	}
	else if (Local_u8_LIGHTS == LIGHTS_OFF)
     26c:	82 33       	cpi	r24, 0x32	; 50
     26e:	79 f4       	brne	.+30     	; 0x28e <Light_Control+0x6c>
	{
		H_Led_Off(LED0);
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <H_Led_Off>
		H_Led_Off(LED1);
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <H_Led_Off>
		H_Led_Off(LED2);
     27c:	82 e0       	ldi	r24, 0x02	; 2
     27e:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <H_Led_Off>
		H_Led_Off(LED3);
     282:	83 e0       	ldi	r24, 0x03	; 3
     284:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <H_Led_Off>
		H_Led_Off(LED4);
     288:	84 e0       	ldi	r24, 0x04	; 4
     28a:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <H_Led_Off>
     28e:	08 95       	ret

00000290 <Dim_Light_Control>:
 }
 
  void Dim_Light_Control(void)
  {
	  u8 Local_u8_reading = 0 ;
	  UART_Tx(NEXTLINE);
     290:	8d e0       	ldi	r24, 0x0D	; 13
     292:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
	  UART_TxString(" Enter intensity from 0:9");
     296:	8d ee       	ldi	r24, 0xED	; 237
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
	  UART_Tx(NEXTLINE);
     29e:	8d e0       	ldi	r24, 0x0D	; 13
     2a0:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
	  Local_u8_reading = HC05_Rx() ;
     2a4:	0e 94 c6 06 	call	0xd8c	; 0xd8c <HC05_Rx>
	  if (Local_u8_reading != 0)
     2a8:	88 23       	and	r24, r24
     2aa:	89 f1       	breq	.+98     	; 0x30e <Dim_Light_Control+0x7e>
	  {
		  switch(Local_u8_reading)
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	fc 01       	movw	r30, r24
     2b0:	f0 97       	sbiw	r30, 0x30	; 48
     2b2:	ea 30       	cpi	r30, 0x0A	; 10
     2b4:	f1 05       	cpc	r31, r1
     2b6:	58 f5       	brcc	.+86     	; 0x30e <Dim_Light_Control+0x7e>
     2b8:	e6 5d       	subi	r30, 0xD6	; 214
     2ba:	ff 4f       	sbci	r31, 0xFF	; 255
     2bc:	0c 94 d5 0c 	jmp	0x19aa	; 0x19aa <__tablejump2__>
		  {
			  case 48: TIMER0_SetCompVal(2);       break;
     2c0:	82 e0       	ldi	r24, 0x02	; 2
     2c2:	0e 94 16 0c 	call	0x182c	; 0x182c <TIMER0_SetCompVal>
     2c6:	08 95       	ret
			  case 49: TIMER0_SetCompVal(25);      break;
     2c8:	89 e1       	ldi	r24, 0x19	; 25
     2ca:	0e 94 16 0c 	call	0x182c	; 0x182c <TIMER0_SetCompVal>
     2ce:	08 95       	ret
			  case 50: TIMER0_SetCompVal(50);      break;
     2d0:	82 e3       	ldi	r24, 0x32	; 50
     2d2:	0e 94 16 0c 	call	0x182c	; 0x182c <TIMER0_SetCompVal>
     2d6:	08 95       	ret
			  case 51: TIMER0_SetCompVal(75);      break;
     2d8:	8b e4       	ldi	r24, 0x4B	; 75
     2da:	0e 94 16 0c 	call	0x182c	; 0x182c <TIMER0_SetCompVal>
     2de:	08 95       	ret
			  case 52: TIMER0_SetCompVal(100);     break;
     2e0:	84 e6       	ldi	r24, 0x64	; 100
     2e2:	0e 94 16 0c 	call	0x182c	; 0x182c <TIMER0_SetCompVal>
     2e6:	08 95       	ret
			  case 53: TIMER0_SetCompVal(125);     break;
     2e8:	8d e7       	ldi	r24, 0x7D	; 125
     2ea:	0e 94 16 0c 	call	0x182c	; 0x182c <TIMER0_SetCompVal>
     2ee:	08 95       	ret
			  case 54: TIMER0_SetCompVal(150);     break;
     2f0:	86 e9       	ldi	r24, 0x96	; 150
     2f2:	0e 94 16 0c 	call	0x182c	; 0x182c <TIMER0_SetCompVal>
     2f6:	08 95       	ret
			  case 55: TIMER0_SetCompVal(175);     break;
     2f8:	8f ea       	ldi	r24, 0xAF	; 175
     2fa:	0e 94 16 0c 	call	0x182c	; 0x182c <TIMER0_SetCompVal>
     2fe:	08 95       	ret
			  case 56: TIMER0_SetCompVal(200);     break;
     300:	88 ec       	ldi	r24, 0xC8	; 200
     302:	0e 94 16 0c 	call	0x182c	; 0x182c <TIMER0_SetCompVal>
     306:	08 95       	ret
			  case 57: TIMER0_SetCompVal(250);     break;
     308:	8a ef       	ldi	r24, 0xFA	; 250
     30a:	0e 94 16 0c 	call	0x182c	; 0x182c <TIMER0_SetCompVal>
     30e:	08 95       	ret

00000310 <AirCond_control>:
  }

void AirCond_control(void)
{
	u8 Local_u8_erorr ;
	Local_u8_erorr = M_ADC_StartConversionAsynch(0, &Gloable_u16_ADC_Reading,ADC_ISR);
     310:	43 e5       	ldi	r20, 0x53	; 83
     312:	50 e0       	ldi	r21, 0x00	; 0
     314:	64 e1       	ldi	r22, 0x14	; 20
     316:	73 e0       	ldi	r23, 0x03	; 3
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	0e 94 0c 09 	call	0x1218	; 0x1218 <M_ADC_StartConversionAsynch>
     31e:	08 95       	ret

00000320 <TimerISR>:
	Gloable_u8_temp = Gloable_u16_Analog_MV / 10 ;
}

void TimerISR(void)
{
	AirCond_control();
     320:	0e 94 88 01 	call	0x310	; 0x310 <AirCond_control>
	if(Gloable_u8_AC_Flag == AC_ON)
     324:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <Gloable_u8_AC_Flag>
     328:	81 30       	cpi	r24, 0x01	; 1
     32a:	61 f4       	brne	.+24     	; 0x344 <TimerISR+0x24>
	{
		if(Gloable_u8_temp > 27)
     32c:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <Gloable_u8_temp>
     330:	8c 31       	cpi	r24, 0x1C	; 28
     332:	18 f0       	brcs	.+6      	; 0x33a <TimerISR+0x1a>
		{
			H_H_Bridge_CH1_EN();
     334:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <H_H_Bridge_CH1_EN>
     338:	08 95       	ret
		}
		else if  (Gloable_u8_temp < 21)
     33a:	85 31       	cpi	r24, 0x15	; 21
     33c:	28 f4       	brcc	.+10     	; 0x348 <TimerISR+0x28>
		{
			H_H_Bridge_CH1_Break();
     33e:	0e 94 ef 06 	call	0xdde	; 0xdde <H_H_Bridge_CH1_Break>
     342:	08 95       	ret
			// do nothing
		}
	}
	else
	{
		H_H_Bridge_CH1_Break();
     344:	0e 94 ef 06 	call	0xdde	; 0xdde <H_H_Bridge_CH1_Break>
     348:	08 95       	ret

0000034a <AirCond_EN>:
	}
}

void AirCond_EN(void)
{
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
	u8 Local_u8_Number=0;
	u8 Local_u8_Number1=0;
    u8 Local_u8_reading ;
	UART_TxString("LOADING.....");
     34e:	87 e0       	ldi	r24, 0x07	; 7
     350:	91 e0       	ldi	r25, 0x01	; 1
     352:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
	while(Gloable_u8_temp == 0); //wait until adc take reading
     356:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <Gloable_u8_temp>
     35a:	88 23       	and	r24, r24
     35c:	e1 f3       	breq	.-8      	; 0x356 <AirCond_EN+0xc>
     35e:	2f ef       	ldi	r18, 0xFF	; 255
     360:	80 e7       	ldi	r24, 0x70	; 112
     362:	92 e0       	ldi	r25, 0x02	; 2
     364:	21 50       	subi	r18, 0x01	; 1
     366:	80 40       	sbci	r24, 0x00	; 0
     368:	90 40       	sbci	r25, 0x00	; 0
     36a:	e1 f7       	brne	.-8      	; 0x364 <AirCond_EN+0x1a>
     36c:	00 c0       	rjmp	.+0      	; 0x36e <AirCond_EN+0x24>
     36e:	00 00       	nop
	_delay_ms(50);
	Local_u8_Number = (Gloable_u8_temp/10)+48 ;
     370:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <Gloable_u8_temp>
     374:	9d ec       	ldi	r25, 0xCD	; 205
     376:	89 9f       	mul	r24, r25
     378:	91 2d       	mov	r25, r1
     37a:	11 24       	eor	r1, r1
     37c:	96 95       	lsr	r25
     37e:	96 95       	lsr	r25
     380:	96 95       	lsr	r25
     382:	d0 e3       	ldi	r29, 0x30	; 48
     384:	d9 0f       	add	r29, r25
	Local_u8_Number1=  (Gloable_u8_temp%10)+48 ;
     386:	99 0f       	add	r25, r25
     388:	29 2f       	mov	r18, r25
     38a:	22 0f       	add	r18, r18
     38c:	22 0f       	add	r18, r18
     38e:	92 0f       	add	r25, r18
     390:	89 1b       	sub	r24, r25
     392:	c0 e3       	ldi	r28, 0x30	; 48
     394:	c8 0f       	add	r28, r24
    UART_Tx(NEXTLINE);
     396:	8d e0       	ldi	r24, 0x0D	; 13
     398:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
     39c:	2f ef       	ldi	r18, 0xFF	; 255
     39e:	80 e7       	ldi	r24, 0x70	; 112
     3a0:	92 e0       	ldi	r25, 0x02	; 2
     3a2:	21 50       	subi	r18, 0x01	; 1
     3a4:	80 40       	sbci	r24, 0x00	; 0
     3a6:	90 40       	sbci	r25, 0x00	; 0
     3a8:	e1 f7       	brne	.-8      	; 0x3a2 <AirCond_EN+0x58>
     3aa:	00 c0       	rjmp	.+0      	; 0x3ac <AirCond_EN+0x62>
     3ac:	00 00       	nop
	_delay_ms(50);
	UART_TxString(" Current temperature is : ");
     3ae:	84 e1       	ldi	r24, 0x14	; 20
     3b0:	91 e0       	ldi	r25, 0x01	; 1
     3b2:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
     3b6:	2f ef       	ldi	r18, 0xFF	; 255
     3b8:	80 e7       	ldi	r24, 0x70	; 112
     3ba:	92 e0       	ldi	r25, 0x02	; 2
     3bc:	21 50       	subi	r18, 0x01	; 1
     3be:	80 40       	sbci	r24, 0x00	; 0
     3c0:	90 40       	sbci	r25, 0x00	; 0
     3c2:	e1 f7       	brne	.-8      	; 0x3bc <AirCond_EN+0x72>
     3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <AirCond_EN+0x7c>
     3c6:	00 00       	nop
	_delay_ms(50);
	UART_Tx(Local_u8_Number);
     3c8:	8d 2f       	mov	r24, r29
     3ca:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
     3ce:	2f ef       	ldi	r18, 0xFF	; 255
     3d0:	80 e7       	ldi	r24, 0x70	; 112
     3d2:	92 e0       	ldi	r25, 0x02	; 2
     3d4:	21 50       	subi	r18, 0x01	; 1
     3d6:	80 40       	sbci	r24, 0x00	; 0
     3d8:	90 40       	sbci	r25, 0x00	; 0
     3da:	e1 f7       	brne	.-8      	; 0x3d4 <AirCond_EN+0x8a>
     3dc:	00 c0       	rjmp	.+0      	; 0x3de <AirCond_EN+0x94>
     3de:	00 00       	nop
	_delay_ms(50);
	UART_Tx(Local_u8_Number1); 
     3e0:	8c 2f       	mov	r24, r28
     3e2:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
    UART_Tx(NEXTLINE);
     3e6:	8d e0       	ldi	r24, 0x0D	; 13
     3e8:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
	UART_TxString("   1-AC Enable");
     3ec:	8f e2       	ldi	r24, 0x2F	; 47
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
    UART_Tx(NEXTLINE);
     3f4:	8d e0       	ldi	r24, 0x0D	; 13
     3f6:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
	UART_TxString(" 2-AC Disable");
     3fa:	8e e3       	ldi	r24, 0x3E	; 62
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
	
	Local_u8_reading = HC05_Rx() ;
     402:	0e 94 c6 06 	call	0xd8c	; 0xd8c <HC05_Rx>
	if (Local_u8_reading == TURN_ON)
     406:	81 33       	cpi	r24, 0x31	; 49
     408:	21 f4       	brne	.+8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
	{
		Gloable_u8_AC_Flag = AC_ON ;
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <Gloable_u8_AC_Flag>
     410:	04 c0       	rjmp	.+8      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
	}
	else if (Local_u8_reading == TURN_OFF)
     412:	82 33       	cpi	r24, 0x32	; 50
     414:	11 f4       	brne	.+4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
	{
		Gloable_u8_AC_Flag = AC_OFF ;
     416:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <Gloable_u8_AC_Flag>
	}
	else
	{
		//DO Nothing
	}
}
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	08 95       	ret

00000420 <main>:
u8  static Local_u8_Error = ERROR	 ;
u8  Local_u8_Variable6 =0			 ;
u8  Local_u8_Variable13				 ;	
/***********************************************************START_OF_MAIN*********************************************************************/
int main(void)
{
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	cd b7       	in	r28, 0x3d	; 61
     426:	de b7       	in	r29, 0x3e	; 62
     428:	a8 97       	sbiw	r28, 0x28	; 40
     42a:	0f b6       	in	r0, 0x3f	; 63
     42c:	f8 94       	cli
     42e:	de bf       	out	0x3e, r29	; 62
     430:	0f be       	out	0x3f, r0	; 63
     432:	cd bf       	out	0x3d, r28	; 61
	
	/************************************************INITS******************************************************/
	H_Lcd_Init();
     434:	0e 94 1c 08 	call	0x1038	; 0x1038 <H_Lcd_Init>
	H_Buzzer_Init();
     438:	0e 94 8f 06 	call	0xd1e	; 0xd1e <H_Buzzer_Init>
	HC05_Init();
     43c:	0e 94 c3 06 	call	0xd86	; 0xd86 <HC05_Init>
	H_H_Bridge_Init();
     440:	0e 94 c9 06 	call	0xd92	; 0xd92 <H_H_Bridge_Init>
	M_ADC_INIT();
     444:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <M_ADC_INIT>
	H_H_Bridge_Init();
     448:	0e 94 c9 06 	call	0xd92	; 0xd92 <H_H_Bridge_Init>
	TIMER1_Init();
     44c:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <TIMER1_Init>
	M_Timer1_CallBackFn(TimerISR);
     450:	80 e9       	ldi	r24, 0x90	; 144
     452:	91 e0       	ldi	r25, 0x01	; 1
     454:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Timer1_CallBackFn>
	TIMER0_Init();
     458:	0e 94 01 0c 	call	0x1802	; 0x1802 <TIMER0_Init>
	TIMER0_SetCompVal(2);
     45c:	82 e0       	ldi	r24, 0x02	; 2
     45e:	0e 94 16 0c 	call	0x182c	; 0x182c <TIMER0_SetCompVal>
	M_EXTI_Init();
     462:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <M_EXTI_Init>
	M_Dio_PinMode(PB3,OUTPUT);
     466:	61 e0       	ldi	r22, 0x01	; 1
     468:	87 e1       	ldi	r24, 0x17	; 23
     46a:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <M_Dio_PinMode>
	M_GIE_EnableGlobal();
     46e:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <M_GIE_EnableGlobal>
	H_Led_Init(LED0);
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	0e 94 87 08 	call	0x110e	; 0x110e <H_Led_Init>
	H_Led_Init(LED1);
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	0e 94 87 08 	call	0x110e	; 0x110e <H_Led_Init>
	H_Led_Init(LED2);
     47e:	82 e0       	ldi	r24, 0x02	; 2
     480:	0e 94 87 08 	call	0x110e	; 0x110e <H_Led_Init>
	H_Led_Init(LED3);
     484:	83 e0       	ldi	r24, 0x03	; 3
     486:	0e 94 87 08 	call	0x110e	; 0x110e <H_Led_Init>
	H_Led_Init(LED4);
     48a:	84 e0       	ldi	r24, 0x04	; 4
     48c:	0e 94 87 08 	call	0x110e	; 0x110e <H_Led_Init>
	H_KeyPad_Init();
     490:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <H_KeyPad_Init>
    M_EXTI_CallBack(INT0,X_ISR);
     494:	67 e7       	ldi	r22, 0x77	; 119
     496:	70 e0       	ldi	r23, 0x00	; 0
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_EXTI_CallBack>
	/*************************************************LOCAL_VARIABLES***********************************************/
	u8 Local_u8_ID = TAKE_ID;
	u8 Local_u8_AdminID = 0;
	u8 Local_u8_AdminCounter = 0;
	u8 Local_u8_IDAndPass[40] = {0};
     49e:	fe 01       	movw	r30, r28
     4a0:	31 96       	adiw	r30, 0x01	; 1
     4a2:	88 e2       	ldi	r24, 0x28	; 40
     4a4:	df 01       	movw	r26, r30
     4a6:	1d 92       	st	X+, r1
     4a8:	8a 95       	dec	r24
     4aa:	e9 f7       	brne	.-6      	; 0x4a6 <main+0x86>
																   HC-05  --> ADMIN_MODE
																   KEYPAD --> USER_MODE
																	
																						*/
																	
	LCD_Welcome();
     4ac:	0e 94 84 00 	call	0x108	; 0x108 <LCD_Welcome>
	u8 Local_u8_EEPROMCount = 0;
	u8 Local_u8_Variable1 =0;
	u8 Local_u8_Variable2 =0;
	u8 Local_u8_Variable3 =0;
	u8 Local_u8_Variable4 =0;
	u8 Local_u8_Variable5 =0;
     4b0:	10 e0       	ldi	r17, 0x00	; 0
     4b2:	05 c0       	rjmp	.+10     	; 0x4be <main+0x9e>
	while(WATING_FOR_A)
	{ 
	 
		while (Local_u8_Variable13 == 0)
		{
					Local_u8_Variable5 = HC05_Rx();
     4b4:	0e 94 c6 06 	call	0xd8c	; 0xd8c <HC05_Rx>
     4b8:	18 2f       	mov	r17, r24
					if(Local_u8_Variable5 != 0)
     4ba:	81 11       	cpse	r24, r1
     4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <main+0xa6>
																	
	LCD_Welcome();
	while(WATING_FOR_A)
	{ 
	 
		while (Local_u8_Variable13 == 0)
     4be:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <Local_u8_Variable13>
     4c2:	88 23       	and	r24, r24
     4c4:	b9 f3       	breq	.-18     	; 0x4b4 <main+0x94>

		}
	
		

		if(Local_u8_Variable5 == 'A' || Local_u8_Variable5 == 'a')
     4c6:	11 34       	cpi	r17, 0x41	; 65
     4c8:	f9 f0       	breq	.+62     	; 0x508 <main+0xe8>
     4ca:	11 36       	cpi	r17, 0x61	; 97
     4cc:	f9 f0       	breq	.+62     	; 0x50c <main+0xec>
		{
			Local_u8_Mode = ADMIN_MODE; 
			break;
		}
		else if(Local_u8_Variable6 == 'A' && Local_u8_Admin == ADMIN_EXISTS)
     4ce:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <__data_end>
     4d2:	81 34       	cpi	r24, 0x41	; 65
     4d4:	21 f4       	brne	.+8      	; 0x4de <main+0xbe>
     4d6:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <Local_u8_Admin>
     4da:	91 30       	cpi	r25, 0x01	; 1
     4dc:	c9 f0       	breq	.+50     	; 0x510 <main+0xf0>
		{
			Local_u8_Mode = USER_MODE;
			break;
		}
		else if(Local_u8_Variable6 == 'A' && Local_u8_Admin == NO_ADMIN) // --> How come can be there a user if there's no admin ?
     4de:	81 34       	cpi	r24, 0x41	; 65
     4e0:	71 f7       	brne	.-36     	; 0x4be <main+0x9e>
     4e2:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <Local_u8_Admin>
     4e6:	81 11       	cpse	r24, r1
     4e8:	ea cf       	rjmp	.-44     	; 0x4be <main+0x9e>
		{
			H_Lcd_Clr();
     4ea:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <H_Lcd_Clr>
			H_Lcd_WriteString("THERE'S NO ADMIN");
     4ee:	8c e4       	ldi	r24, 0x4C	; 76
     4f0:	91 e0       	ldi	r25, 0x01	; 1
     4f2:	0e 94 58 08 	call	0x10b0	; 0x10b0 <H_Lcd_WriteString>
			H_Lcd_GoTo(1,0);
     4f6:	60 e0       	ldi	r22, 0x00	; 0
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	0e 94 6f 08 	call	0x10de	; 0x10de <H_Lcd_GoTo>
			H_Lcd_WriteString("YET");
     4fe:	8d e5       	ldi	r24, 0x5D	; 93
     500:	91 e0       	ldi	r25, 0x01	; 1
     502:	0e 94 58 08 	call	0x10b0	; 0x10b0 <H_Lcd_WriteString>
     506:	db cf       	rjmp	.-74     	; 0x4be <main+0x9e>
	
		

		if(Local_u8_Variable5 == 'A' || Local_u8_Variable5 == 'a')
		{
			Local_u8_Mode = ADMIN_MODE; 
     508:	04 e1       	ldi	r16, 0x14	; 20
     50a:	03 c0       	rjmp	.+6      	; 0x512 <main+0xf2>
     50c:	04 e1       	ldi	r16, 0x14	; 20
     50e:	01 c0       	rjmp	.+2      	; 0x512 <main+0xf2>
			break;
		}
		else if(Local_u8_Variable6 == 'A' && Local_u8_Admin == ADMIN_EXISTS)
		{
			Local_u8_Mode = USER_MODE;
     510:	05 e1       	ldi	r16, 0x15	; 21
	/***************************************************************REGISTER_ADMIN************************************************************/

														/*SUPPOSED TO WORK THE FIRST TIME ONLY*/
	
	
	Local_u8_EEPROM = EEPROMINT_ReadByte(FIRST_BYTE); // IF EMPTY --> THERE'S NO ADMIN JUST YET
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	0e 94 b2 06 	call	0xd64	; 0xd64 <EEPROMINT_ReadByte>
     51a:	f8 2e       	mov	r15, r24
	
	if(Local_u8_EEPROM == EMPTY)
     51c:	bf ef       	ldi	r27, 0xFF	; 255
     51e:	8b 13       	cpse	r24, r27
     520:	a0 c0       	rjmp	.+320    	; 0x662 <main+0x242>
	{
		
																		/*ID*/
																		
		UART_TxString(" The First time you need to create an admin");
     522:	81 e6       	ldi	r24, 0x61	; 97
     524:	91 e0       	ldi	r25, 0x01	; 1
     526:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
     52a:	2f ef       	ldi	r18, 0xFF	; 255
     52c:	8e e9       	ldi	r24, 0x9E	; 158
     52e:	94 e2       	ldi	r25, 0x24	; 36
     530:	21 50       	subi	r18, 0x01	; 1
     532:	80 40       	sbci	r24, 0x00	; 0
     534:	90 40       	sbci	r25, 0x00	; 0
     536:	e1 f7       	brne	.-8      	; 0x530 <main+0x110>
     538:	00 c0       	rjmp	.+0      	; 0x53a <main+0x11a>
     53a:	00 00       	nop
		_delay_ms(DISPLAY_TIME);
		UART_Tx(NEXTLINE);
     53c:	8d e0       	ldi	r24, 0x0D	; 13
     53e:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
		UART_TxString(" Enter Name: ");
     542:	8d e8       	ldi	r24, 0x8D	; 141
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
		UART_Tx(NEXTLINE);
     54a:	8d e0       	ldi	r24, 0x0D	; 13
     54c:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
	H_KeyPad_Init();
    M_EXTI_CallBack(INT0,X_ISR);
	/*************************************************LOCAL_VARIABLES***********************************************/
	u8 Local_u8_ID = TAKE_ID;
	u8 Local_u8_AdminID = 0;
	u8 Local_u8_AdminCounter = 0;
     550:	10 e0       	ldi	r17, 0x00	; 0
		UART_TxString(" The First time you need to create an admin");
		_delay_ms(DISPLAY_TIME);
		UART_Tx(NEXTLINE);
		UART_TxString(" Enter Name: ");
		UART_Tx(NEXTLINE);
		while(Local_u8_Admin == NO_ADMIN)
     552:	2c c0       	rjmp	.+88     	; 0x5ac <main+0x18c>
		{
			Local_u8_Variable3 = HC05_Rx();
     554:	0e 94 c6 06 	call	0xd8c	; 0xd8c <HC05_Rx>
			
			if((Local_u8_Variable3 == ENTER) && (Local_u8_Error == ERROR)) //IF ENTER IS PRESSED ON A BLANK SCREEN
     558:	8d 30       	cpi	r24, 0x0D	; 13
     55a:	e1 f4       	brne	.+56     	; 0x594 <main+0x174>
     55c:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <Local_u8_Error>
     560:	91 11       	cpse	r25, r1
     562:	18 c0       	rjmp	.+48     	; 0x594 <main+0x174>
			{
				UART_TxString(" Error please try again");
     564:	8b e9       	ldi	r24, 0x9B	; 155
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
     56c:	af ef       	ldi	r26, 0xFF	; 255
     56e:	be e9       	ldi	r27, 0x9E	; 158
     570:	24 e2       	ldi	r18, 0x24	; 36
     572:	a1 50       	subi	r26, 0x01	; 1
     574:	b0 40       	sbci	r27, 0x00	; 0
     576:	20 40       	sbci	r18, 0x00	; 0
     578:	e1 f7       	brne	.-8      	; 0x572 <main+0x152>
     57a:	00 c0       	rjmp	.+0      	; 0x57c <main+0x15c>
     57c:	00 00       	nop
				_delay_ms(DISPLAY_TIME);
				UART_Tx(NEXTLINE);
     57e:	8d e0       	ldi	r24, 0x0D	; 13
     580:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
				UART_TxString(" Enter Name: ");
     584:	8d e8       	ldi	r24, 0x8D	; 141
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
				UART_Tx(NEXTLINE);
     58c:	8d e0       	ldi	r24, 0x0D	; 13
     58e:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
     592:	0c c0       	rjmp	.+24     	; 0x5ac <main+0x18c>
			}
			else if (Local_u8_Variable3 == ENTER)
     594:	8d 30       	cpi	r24, 0x0D	; 13
     596:	71 f0       	breq	.+28     	; 0x5b4 <main+0x194>
			{
				break; //STOP TAKING ID
			}
			else if(Local_u8_Variable3 != ENTER)
     598:	49 f0       	breq	.+18     	; 0x5ac <main+0x18c>
			{
				Local_u8_Error = NO_ERROR; //THE SCREEN IS NOT BLANK ANYMORE
     59a:	91 e0       	ldi	r25, 0x01	; 1
     59c:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <Local_u8_Error>
				Local_u8_AdminID = Local_u8_Variable3;
				//_delay_ms(10);
				EEPROMINT_WriteByte(Local_u8_AdminCounter,Local_u8_AdminID);
     5a0:	68 2f       	mov	r22, r24
     5a2:	81 2f       	mov	r24, r17
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	0e 94 99 06 	call	0xd32	; 0xd32 <EEPROMINT_WriteByte>
				Local_u8_AdminCounter++;
     5aa:	1f 5f       	subi	r17, 0xFF	; 255
		UART_TxString(" The First time you need to create an admin");
		_delay_ms(DISPLAY_TIME);
		UART_Tx(NEXTLINE);
		UART_TxString(" Enter Name: ");
		UART_Tx(NEXTLINE);
		while(Local_u8_Admin == NO_ADMIN)
     5ac:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <Local_u8_Admin>
     5b0:	88 23       	and	r24, r24
     5b2:	81 f2       	breq	.-96     	; 0x554 <main+0x134>
				//Do Nothing
			}
		}
		
		
		Local_u8_Error = ERROR; //SETTING IT BACK TO MAKE ANOTHER CHECK ON ANOTHER ITERATION
     5b4:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <Local_u8_Error>
		UART_Tx(NEXTLINE);
     5b8:	8d e0       	ldi	r24, 0x0D	; 13
     5ba:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
     5be:	8f ef       	ldi	r24, 0xFF	; 255
     5c0:	9e e9       	ldi	r25, 0x9E	; 158
     5c2:	a4 e2       	ldi	r26, 0x24	; 36
     5c4:	81 50       	subi	r24, 0x01	; 1
     5c6:	90 40       	sbci	r25, 0x00	; 0
     5c8:	a0 40       	sbci	r26, 0x00	; 0
     5ca:	e1 f7       	brne	.-8      	; 0x5c4 <main+0x1a4>
     5cc:	00 c0       	rjmp	.+0      	; 0x5ce <main+0x1ae>
     5ce:	00 00       	nop
		_delay_ms(DISPLAY_TIME);

		
		
																	/*PASSWORD*/
		UART_TxString("Now Enter Password: ");
     5d0:	83 eb       	ldi	r24, 0xB3	; 179
     5d2:	91 e0       	ldi	r25, 0x01	; 1
     5d4:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
		UART_Tx(NEXTLINE);
     5d8:	8d e0       	ldi	r24, 0x0D	; 13
     5da:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
		while(Local_u8_Admin == NO_ADMIN)
     5de:	3c c0       	rjmp	.+120    	; 0x658 <main+0x238>
		{
			Local_u8_Variable4 = HC05_Rx();
     5e0:	0e 94 c6 06 	call	0xd8c	; 0xd8c <HC05_Rx>

			if((Local_u8_Variable4 == ENTER) && (Local_u8_Error == ERROR))
     5e4:	8d 30       	cpi	r24, 0x0D	; 13
     5e6:	e1 f4       	brne	.+56     	; 0x620 <main+0x200>
     5e8:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <Local_u8_Error>
     5ec:	91 11       	cpse	r25, r1
     5ee:	18 c0       	rjmp	.+48     	; 0x620 <main+0x200>
			{
				UART_TxString("Error please try again");
     5f0:	8c e9       	ldi	r24, 0x9C	; 156
     5f2:	91 e0       	ldi	r25, 0x01	; 1
     5f4:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
     5f8:	bf ef       	ldi	r27, 0xFF	; 255
     5fa:	2e e9       	ldi	r18, 0x9E	; 158
     5fc:	84 e2       	ldi	r24, 0x24	; 36
     5fe:	b1 50       	subi	r27, 0x01	; 1
     600:	20 40       	sbci	r18, 0x00	; 0
     602:	80 40       	sbci	r24, 0x00	; 0
     604:	e1 f7       	brne	.-8      	; 0x5fe <main+0x1de>
     606:	00 c0       	rjmp	.+0      	; 0x608 <main+0x1e8>
     608:	00 00       	nop
				_delay_ms(DISPLAY_TIME);
				UART_Tx(NEXTLINE);
     60a:	8d e0       	ldi	r24, 0x0D	; 13
     60c:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
				UART_TxString("Password: ");
     610:	8d eb       	ldi	r24, 0xBD	; 189
     612:	91 e0       	ldi	r25, 0x01	; 1
     614:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
				UART_Tx(NEXTLINE);
     618:	8d e0       	ldi	r24, 0x0D	; 13
     61a:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
     61e:	1c c0       	rjmp	.+56     	; 0x658 <main+0x238>
			}
			else if(Local_u8_Variable4 != ENTER)
     620:	8d 30       	cpi	r24, 0x0D	; 13
     622:	51 f0       	breq	.+20     	; 0x638 <main+0x218>
			{
				Local_u8_Error = NO_ERROR;
     624:	91 e0       	ldi	r25, 0x01	; 1
     626:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <Local_u8_Error>
				Local_u8_AdminID = Local_u8_Variable4;
				EEPROMINT_WriteByte(Local_u8_AdminCounter,Local_u8_AdminID);
     62a:	68 2f       	mov	r22, r24
     62c:	81 2f       	mov	r24, r17
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	0e 94 99 06 	call	0xd32	; 0xd32 <EEPROMINT_WriteByte>
				Local_u8_AdminCounter++;
     634:	1f 5f       	subi	r17, 0xFF	; 255
     636:	10 c0       	rjmp	.+32     	; 0x658 <main+0x238>
			}
			else if(Local_u8_Variable4 == ENTER)
     638:	8d 30       	cpi	r24, 0x0D	; 13
     63a:	71 f4       	brne	.+28     	; 0x658 <main+0x238>
			{
				EEPROMINT_WriteByte(Local_u8_AdminCounter,END_OF_CREDENTIALS);//END OF ID & PASS
     63c:	64 e2       	ldi	r22, 0x24	; 36
     63e:	81 2f       	mov	r24, r17
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	0e 94 99 06 	call	0xd32	; 0xd32 <EEPROMINT_WriteByte>
				Local_u8_AdminCounter++;
     646:	1f 5f       	subi	r17, 0xFF	; 255
				EEPROMINT_WriteByte(LAST_BYTE,Local_u8_AdminCounter);
     648:	61 2f       	mov	r22, r17
     64a:	8f ef       	ldi	r24, 0xFF	; 255
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	0e 94 99 06 	call	0xd32	; 0xd32 <EEPROMINT_WriteByte>
				Local_u8_Admin = ADMIN_EXISTS;//EXIT WHILE
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <Local_u8_Admin>
		
		
																	/*PASSWORD*/
		UART_TxString("Now Enter Password: ");
		UART_Tx(NEXTLINE);
		while(Local_u8_Admin == NO_ADMIN)
     658:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <Local_u8_Admin>
     65c:	88 23       	and	r24, r24
     65e:	09 f4       	brne	.+2      	; 0x662 <main+0x242>
     660:	bf cf       	rjmp	.-130    	; 0x5e0 <main+0x1c0>
				EEPROMINT_WriteByte(LAST_BYTE,Local_u8_AdminCounter);
				Local_u8_Admin = ADMIN_EXISTS;//EXIT WHILE
			}
		}
	}
	Local_u8_Error = NO_ERROR;	
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <Local_u8_Error>
	/***************************************************************LOGIN*******************************************************************/
	 while (STILL_LOGGING_IN)
	 {
		 if(Local_u8_Mode == ADMIN_MODE)
     668:	04 31       	cpi	r16, 0x14	; 20
     66a:	09 f0       	breq	.+2      	; 0x66e <main+0x24e>
     66c:	37 c2       	rjmp	.+1134   	; 0xadc <__stack+0x27d>
		 {
			 UART_TxString(" Log In");
     66e:	88 ec       	ldi	r24, 0xC8	; 200
     670:	91 e0       	ldi	r25, 0x01	; 1
     672:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
			 UART_Tx(NEXTLINE);
     676:	8d e0       	ldi	r24, 0x0D	; 13
     678:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
	u8 Local_u8_AdminID = 0;
	u8 Local_u8_AdminCounter = 0;
	u8 Local_u8_IDAndPass[40] = {0};
	u8 Local_u8_counter = 0;
	u8 Local_u8_ForLoopcounter = 0;
	u8 Local_u8_Trials = 3;
     67c:	03 e0       	ldi	r16, 0x03	; 3
		 if(Local_u8_Mode == ADMIN_MODE)
		 {
			 UART_TxString(" Log In");
			 UART_Tx(NEXTLINE);
			 
			 while(Local_u8_EEPROM != END_OF_CREDENTIALS)
     67e:	b7 c0       	rjmp	.+366    	; 0x7ee <main+0x3ce>
			 {
				 
																		/*ENTER ID*/
				 
				 UART_TxString("ID:");
     680:	81 ed       	ldi	r24, 0xD1	; 209
     682:	91 e0       	ldi	r25, 0x01	; 1
     684:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
				 while(Local_u8_ID == TAKE_ID)
     688:	10 e0       	ldi	r17, 0x00	; 0
     68a:	ee 24       	eor	r14, r14
     68c:	e3 94       	inc	r14
     68e:	27 c0       	rjmp	.+78     	; 0x6de <main+0x2be>
				 {
					 Local_u8_Variable1 = HC05_Rx();
     690:	0e 94 c6 06 	call	0xd8c	; 0xd8c <HC05_Rx>
					 
					 if( (Local_u8_Variable1 == ENTER) && (Local_u8_Error == ERROR))
     694:	8d 30       	cpi	r24, 0x0D	; 13
     696:	81 f4       	brne	.+32     	; 0x6b8 <main+0x298>
     698:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <Local_u8_Error>
     69c:	91 11       	cpse	r25, r1
     69e:	0c c0       	rjmp	.+24     	; 0x6b8 <main+0x298>
					 {
						 UART_TxString(" Error please try again");
     6a0:	8b e9       	ldi	r24, 0x9B	; 155
     6a2:	91 e0       	ldi	r25, 0x01	; 1
     6a4:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
				         UART_Tx(NEXTLINE);
     6a8:	8d e0       	ldi	r24, 0x0D	; 13
     6aa:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
						 UART_TxString(" ID:");
     6ae:	80 ed       	ldi	r24, 0xD0	; 208
     6b0:	91 e0       	ldi	r25, 0x01	; 1
     6b2:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
     6b6:	13 c0       	rjmp	.+38     	; 0x6de <main+0x2be>
					 }
					 else if(Local_u8_Variable1 == ENTER)
     6b8:	8d 30       	cpi	r24, 0x0D	; 13
     6ba:	21 f4       	brne	.+8      	; 0x6c4 <main+0x2a4>
					 {
						 Local_u8_Error = ERROR;
     6bc:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <Local_u8_Error>
						 Local_u8_ID = STOP_TAKING_ID;//STOP TAKING ID
     6c0:	e1 2c       	mov	r14, r1
     6c2:	0d c0       	rjmp	.+26     	; 0x6de <main+0x2be>
					 }
					 else if(Local_u8_Variable1 != ENTER)
     6c4:	8d 30       	cpi	r24, 0x0D	; 13
     6c6:	59 f0       	breq	.+22     	; 0x6de <main+0x2be>
					 {
						 Local_u8_Error = NO_ERROR;
     6c8:	91 e0       	ldi	r25, 0x01	; 1
     6ca:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <Local_u8_Error>
						 Local_u8_IDAndPass[Local_u8_counter] = Local_u8_Variable1;
     6ce:	e1 e0       	ldi	r30, 0x01	; 1
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	ec 0f       	add	r30, r28
     6d4:	fd 1f       	adc	r31, r29
     6d6:	e1 0f       	add	r30, r17
     6d8:	f1 1d       	adc	r31, r1
     6da:	80 83       	st	Z, r24
						 Local_u8_counter++;
     6dc:	1f 5f       	subi	r17, 0xFF	; 255
			 {
				 
																		/*ENTER ID*/
				 
				 UART_TxString("ID:");
				 while(Local_u8_ID == TAKE_ID)
     6de:	91 e0       	ldi	r25, 0x01	; 1
     6e0:	e9 16       	cp	r14, r25
     6e2:	b1 f2       	breq	.-84     	; 0x690 <main+0x270>
					 }
				 }
				 
																		 /*ENTER PASSWORD*/
																		 
		         UART_Tx(NEXTLINE);
     6e4:	8d e0       	ldi	r24, 0x0D	; 13
     6e6:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
				 UART_TxString(" PASSWORD: ");
     6ea:	85 ed       	ldi	r24, 0xD5	; 213
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
		         UART_Tx(NEXTLINE);
     6f2:	8d e0       	ldi	r24, 0x0D	; 13
     6f4:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
				 
				 while(Local_u8_ID == START_TAKING_PASS)
     6f8:	2b c0       	rjmp	.+86     	; 0x750 <main+0x330>
				 {
					 Local_u8_Variable2 = HC05_Rx();
     6fa:	0e 94 c6 06 	call	0xd8c	; 0xd8c <HC05_Rx>
					 
					 if((Local_u8_Variable2 == ENTER) && (Local_u8_Error == ERROR))
     6fe:	8d 30       	cpi	r24, 0x0D	; 13
     700:	99 f4       	brne	.+38     	; 0x728 <main+0x308>
     702:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <Local_u8_Error>
     706:	91 11       	cpse	r25, r1
     708:	0f c0       	rjmp	.+30     	; 0x728 <main+0x308>
					 {
						 UART_TxString(" Error please try again");
     70a:	8b e9       	ldi	r24, 0x9B	; 155
     70c:	91 e0       	ldi	r25, 0x01	; 1
     70e:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
		                 UART_Tx(NEXTLINE);
     712:	8d e0       	ldi	r24, 0x0D	; 13
     714:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
						 UART_TxString(" PASSWORD: ");
     718:	85 ed       	ldi	r24, 0xD5	; 213
     71a:	91 e0       	ldi	r25, 0x01	; 1
     71c:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
		                 UART_Tx(NEXTLINE);
     720:	8d e0       	ldi	r24, 0x0D	; 13
     722:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
     726:	14 c0       	rjmp	.+40     	; 0x750 <main+0x330>
					 }
					 else if(Local_u8_Variable2 == ENTER)
     728:	8d 30       	cpi	r24, 0x0D	; 13
     72a:	29 f4       	brne	.+10     	; 0x736 <main+0x316>
					 {
						 Local_u8_Error = ERROR;
     72c:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <Local_u8_Error>
						 Local_u8_ID = STOP_TAKING_PASS; //Breaks
     730:	ee 24       	eor	r14, r14
     732:	e3 94       	inc	r14
     734:	0d c0       	rjmp	.+26     	; 0x750 <main+0x330>
					 }
					 
					 /*Enter the password you want untill 'ENTER'*/
					 else if(Local_u8_Variable2 != ENTER)
     736:	8d 30       	cpi	r24, 0x0D	; 13
     738:	59 f0       	breq	.+22     	; 0x750 <main+0x330>
					 {
						 Local_u8_Error = NO_ERROR;
     73a:	91 e0       	ldi	r25, 0x01	; 1
     73c:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <Local_u8_Error>
						 Local_u8_IDAndPass[Local_u8_counter] = Local_u8_Variable2;
     740:	e1 e0       	ldi	r30, 0x01	; 1
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	ec 0f       	add	r30, r28
     746:	fd 1f       	adc	r31, r29
     748:	e1 0f       	add	r30, r17
     74a:	f1 1d       	adc	r31, r1
     74c:	80 83       	st	Z, r24
						 Local_u8_counter++;
     74e:	1f 5f       	subi	r17, 0xFF	; 255
																		 
		         UART_Tx(NEXTLINE);
				 UART_TxString(" PASSWORD: ");
		         UART_Tx(NEXTLINE);
				 
				 while(Local_u8_ID == START_TAKING_PASS)
     750:	ee 20       	and	r14, r14
     752:	99 f2       	breq	.-90     	; 0x6fa <main+0x2da>
     754:	e1 2c       	mov	r14, r1
     756:	10 e0       	ldi	r17, 0x00	; 0
     758:	46 c0       	rjmp	.+140    	; 0x7e6 <main+0x3c6>
				 {
					 Local_u8_ForLoopcounter = 0;
					 Local_u8_EEPROMCount = FIRST_EEPROM_PLACE; // --> PLACE NOT VALUE!
					 for(Local_u8_ForLoopcounter; Local_u8_ForLoopcounter < sizeof(Local_u8_IDAndPass) ; Local_u8_ForLoopcounter++)
					 {
						 Local_u8_EEPROM = EEPROMINT_ReadByte(Local_u8_EEPROMCount); //Reading EEPROM consecutively
     75a:	8e 2d       	mov	r24, r14
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	0e 94 b2 06 	call	0xd64	; 0xd64 <EEPROMINT_ReadByte>
     762:	f8 2e       	mov	r15, r24
						 Local_u8_EEPROMCount++;
     764:	e3 94       	inc	r14
						 if(Local_u8_EEPROM == END_OF_CREDENTIALS)// while can't break before the for in it
     766:	a4 e2       	ldi	r26, 0x24	; 36
     768:	8a 17       	cp	r24, r26
     76a:	09 f4       	brne	.+2      	; 0x76e <main+0x34e>
     76c:	3f c0       	rjmp	.+126    	; 0x7ec <main+0x3cc>
						 {
							 break;
						 }
						 else if(Local_u8_IDAndPass[Local_u8_ForLoopcounter] != Local_u8_EEPROM && Local_u8_Wrong == 10 )
     76e:	e1 e0       	ldi	r30, 0x01	; 1
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	ec 0f       	add	r30, r28
     774:	fd 1f       	adc	r31, r29
     776:	e1 0f       	add	r30, r17
     778:	f1 1d       	adc	r31, r1
     77a:	80 81       	ld	r24, Z
     77c:	f8 16       	cp	r15, r24
     77e:	91 f1       	breq	.+100    	; 0x7e4 <main+0x3c4>
						 {
		                     UART_Tx(NEXTLINE);
     780:	8d e0       	ldi	r24, 0x0D	; 13
     782:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
							 UART_TxString(" Wrong ID/PASS");
     786:	81 ee       	ldi	r24, 0xE1	; 225
     788:	91 e0       	ldi	r25, 0x01	; 1
     78a:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
		                     UART_Tx(NEXTLINE);
     78e:	8d e0       	ldi	r24, 0x0D	; 13
     790:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
							 switch(Local_u8_Trials)
     794:	02 30       	cpi	r16, 0x02	; 2
     796:	69 f0       	breq	.+26     	; 0x7b2 <main+0x392>
     798:	03 30       	cpi	r16, 0x03	; 3
     79a:	19 f0       	breq	.+6      	; 0x7a2 <main+0x382>
     79c:	01 30       	cpi	r16, 0x01	; 1
     79e:	31 f5       	brne	.+76     	; 0x7ec <main+0x3cc>
     7a0:	10 c0       	rjmp	.+32     	; 0x7c2 <main+0x3a2>
							 {
								 case TWO_TRIALS:
								 UART_TxString(" 2 trials left ");
     7a2:	80 ef       	ldi	r24, 0xF0	; 240
     7a4:	91 e0       	ldi	r25, 0x01	; 1
     7a6:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
		                         UART_Tx(NEXTLINE);
     7aa:	8d e0       	ldi	r24, 0x0D	; 13
     7ac:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
								 break;
     7b0:	1d c0       	rjmp	.+58     	; 0x7ec <main+0x3cc>
								 case ONE_TRIAL:
								 UART_TxString(" 1 trial left ");
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	92 e0       	ldi	r25, 0x02	; 2
     7b6:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
		                         UART_Tx(NEXTLINE);
     7ba:	8d e0       	ldi	r24, 0x0D	; 13
     7bc:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
								 break;
     7c0:	15 c0       	rjmp	.+42     	; 0x7ec <main+0x3cc>
								 case ZERO_TRIALS:
		                         UART_Tx(NEXTLINE);
     7c2:	8d e0       	ldi	r24, 0x0D	; 13
     7c4:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
								 UART_TxString(" EMERGENCY");
     7c8:	8f e0       	ldi	r24, 0x0F	; 15
     7ca:	92 e0       	ldi	r25, 0x02	; 2
     7cc:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
		                         UART_Tx(NEXTLINE);
     7d0:	8d e0       	ldi	r24, 0x0D	; 13
     7d2:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
								 UART_TxString(" CALLING 911");
     7d6:	8a e1       	ldi	r24, 0x1A	; 26
     7d8:	92 e0       	ldi	r25, 0x02	; 2
     7da:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
								 while (EMERGENCY)
								 {
									 H_Buzzer_On();
     7de:	0e 94 94 06 	call	0xd28	; 0xd28 <H_Buzzer_On>
     7e2:	fd cf       	rjmp	.-6      	; 0x7de <main+0x3be>
															
				 for(Local_u8_Trials ; Local_u8_Trials >= NO_TRIALS ; --Local_u8_Trials)
				 {
					 Local_u8_ForLoopcounter = 0;
					 Local_u8_EEPROMCount = FIRST_EEPROM_PLACE; // --> PLACE NOT VALUE!
					 for(Local_u8_ForLoopcounter; Local_u8_ForLoopcounter < sizeof(Local_u8_IDAndPass) ; Local_u8_ForLoopcounter++)
     7e4:	1f 5f       	subi	r17, 0xFF	; 255
     7e6:	18 32       	cpi	r17, 0x28	; 40
     7e8:	08 f4       	brcc	.+2      	; 0x7ec <main+0x3cc>
     7ea:	b7 cf       	rjmp	.-146    	; 0x75a <main+0x33a>
							 break; // don't keep searching in the wrong user and pass
						 }
					 }
					 Local_u8_counter = RESET;
					 Local_u8_ID = TAKE_ID; //RESETTING IT TO DEFAULT --> PREPARING TO LOOP AGAIN
					 --Local_u8_Trials;
     7ec:	01 50       	subi	r16, 0x01	; 1
		 if(Local_u8_Mode == ADMIN_MODE)
		 {
			 UART_TxString(" Log In");
			 UART_Tx(NEXTLINE);
			 
			 while(Local_u8_EEPROM != END_OF_CREDENTIALS)
     7ee:	b4 e2       	ldi	r27, 0x24	; 36
     7f0:	fb 12       	cpse	r15, r27
     7f2:	46 cf       	rjmp	.-372    	; 0x680 <main+0x260>
					 --Local_u8_Trials;
					 break; //GO DO THE 'while(Local_u8_EEPROM != END_OF_CREDENTIALS)' AGAIN (BREAK FROM THE OUTTER FOR LOOP)
				 }	 
			 }
	/***************************************************************END_OF_LOGIN*******************************************************************/
		     UART_Tx(NEXTLINE);
     7f4:	8d e0       	ldi	r24, 0x0D	; 13
     7f6:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
			 UART_TxString(" Successful LOGIN");
     7fa:	87 e2       	ldi	r24, 0x27	; 39
     7fc:	92 e0       	ldi	r25, 0x02	; 2
     7fe:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
		     UART_Tx(NEXTLINE);
     802:	8d e0       	ldi	r24, 0x0D	; 13
     804:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
	
	/***************************************************************MAIN_MENU*******************************************************************/
			 while(WAITING_FOR_CHOICE)
			 {
				 UART_TxString(" 1-ADD USER");
     808:	89 e3       	ldi	r24, 0x39	; 57
     80a:	92 e0       	ldi	r25, 0x02	; 2
     80c:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
			     UART_Tx(NEXTLINE);
     810:	8d e0       	ldi	r24, 0x0D	; 13
     812:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
				 UART_TxString(" 2-REMOVE USER");
     816:	85 e4       	ldi	r24, 0x45	; 69
     818:	92 e0       	ldi	r25, 0x02	; 2
     81a:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
		         UART_Tx(NEXTLINE);
     81e:	8d e0       	ldi	r24, 0x0D	; 13
     820:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
				 UART_TxString(" 3-MENU");
     824:	84 e5       	ldi	r24, 0x54	; 84
     826:	92 e0       	ldi	r25, 0x02	; 2
     828:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
				 
				 
				 Local_u8_AdminCounter = EEPROMINT_ReadByte(LAST_BYTE);//UPDATE THE COUNTER
     82c:	8f ef       	ldi	r24, 0xFF	; 255
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	0e 94 b2 06 	call	0xd64	; 0xd64 <EEPROMINT_ReadByte>
     834:	18 2f       	mov	r17, r24
				 Local_u8_Variable7 = HC05_Rx();
     836:	0e 94 c6 06 	call	0xd8c	; 0xd8c <HC05_Rx>
				 switch (Local_u8_Variable7)
     83a:	82 33       	cpi	r24, 0x32	; 50
     83c:	09 f4       	brne	.+2      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     83e:	82 c0       	rjmp	.+260    	; 0x944 <__stack+0xe5>
     840:	83 33       	cpi	r24, 0x33	; 51
     842:	09 f4       	brne	.+2      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
     844:	f8 c0       	rjmp	.+496    	; 0xa36 <__stack+0x1d7>
     846:	81 33       	cpi	r24, 0x31	; 49
     848:	f9 f6       	brne	.-66     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
				 {
					 case ADD_USER:
		             UART_Tx(NEXTLINE);
     84a:	8d e0       	ldi	r24, 0x0D	; 13
     84c:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
					 UART_TxString(" ID: ");
     850:	8c e5       	ldi	r24, 0x5C	; 92
     852:	92 e0       	ldi	r25, 0x02	; 2
     854:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
					 while(ADDING_ID)
					 {
						 Local_u8_Variable8 = HC05_Rx();
     858:	0e 94 c6 06 	call	0xd8c	; 0xd8c <HC05_Rx>
						 
						 if( (Local_u8_Variable8 == ENTER) && (Local_u8_Error == ERROR))
     85c:	8d 30       	cpi	r24, 0x0D	; 13
     85e:	99 f4       	brne	.+38     	; 0x886 <__stack+0x27>
     860:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <Local_u8_Error>
     864:	91 11       	cpse	r25, r1
     866:	0f c0       	rjmp	.+30     	; 0x886 <__stack+0x27>
						 {
							 UART_TxString(" Error please try again");
     868:	8b e9       	ldi	r24, 0x9B	; 155
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
		                     UART_Tx(NEXTLINE);
     870:	8d e0       	ldi	r24, 0x0D	; 13
     872:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
							 UART_TxString(" ID: ");
     876:	8c e5       	ldi	r24, 0x5C	; 92
     878:	92 e0       	ldi	r25, 0x02	; 2
     87a:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
		                     UART_Tx(NEXTLINE);
     87e:	8d e0       	ldi	r24, 0x0D	; 13
     880:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
     884:	e9 cf       	rjmp	.-46     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
						 }
						 
						 else if(Local_u8_Variable8 == ENTER)
     886:	8d 30       	cpi	r24, 0x0D	; 13
     888:	a1 f4       	brne	.+40     	; 0x8b2 <__stack+0x53>
						 {
							 Local_u8_Error = ERROR;
     88a:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <Local_u8_Error>
							 EEPROMINT_WriteByte(LAST_BYTE,Local_u8_AdminCounter);//can be removed as counter is saved after password Right?!!
     88e:	61 2f       	mov	r22, r17
     890:	8f ef       	ldi	r24, 0xFF	; 255
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	0e 94 99 06 	call	0xd32	; 0xd32 <EEPROMINT_WriteByte>
							 EEPROMINT_WriteByte(Local_u8_AdminCounter,Local_u8_AdminID);
							 Local_u8_AdminCounter++;
						 }
					 }
					 
		             UART_Tx(NEXTLINE);
     898:	8d e0       	ldi	r24, 0x0D	; 13
     89a:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
					 UART_TxString(" PASSWORD:");
     89e:	82 e6       	ldi	r24, 0x62	; 98
     8a0:	92 e0       	ldi	r25, 0x02	; 2
     8a2:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
					 Local_u8_AdminCounter = EEPROMINT_ReadByte(LAST_BYTE);//UPDATE THE COUNTER
     8a6:	8f ef       	ldi	r24, 0xFF	; 255
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	0e 94 b2 06 	call	0xd64	; 0xd64 <EEPROMINT_ReadByte>
     8ae:	18 2f       	mov	r17, r24
     8b0:	0c c0       	rjmp	.+24     	; 0x8ca <__stack+0x6b>
						 {
							 Local_u8_Error = ERROR;
							 EEPROMINT_WriteByte(LAST_BYTE,Local_u8_AdminCounter);//can be removed as counter is saved after password Right?!!
							 break;//END OF TAKING ID
						 }
						 else if(Local_u8_Variable8 != ENTER)
     8b2:	8d 30       	cpi	r24, 0x0D	; 13
     8b4:	89 f2       	breq	.-94     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
						 {
							 Local_u8_Error = NO_ERROR;
     8b6:	91 e0       	ldi	r25, 0x01	; 1
     8b8:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <Local_u8_Error>
							 Local_u8_AdminID = Local_u8_Variable8;
							 //_delay_ms(10);
							 EEPROMINT_WriteByte(Local_u8_AdminCounter,Local_u8_AdminID);
     8bc:	68 2f       	mov	r22, r24
     8be:	81 2f       	mov	r24, r17
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	0e 94 99 06 	call	0xd32	; 0xd32 <EEPROMINT_WriteByte>
							 Local_u8_AdminCounter++;
     8c6:	1f 5f       	subi	r17, 0xFF	; 255
     8c8:	c7 cf       	rjmp	.-114    	; 0x858 <__DATA_REGION_LENGTH__+0x58>
					 UART_TxString(" PASSWORD:");
					 Local_u8_AdminCounter = EEPROMINT_ReadByte(LAST_BYTE);//UPDATE THE COUNTER
					 
					 while(ADDING_PASS)
					 {
						 Local_u8_Variable9 = HC05_Rx();
     8ca:	0e 94 c6 06 	call	0xd8c	; 0xd8c <HC05_Rx>
			
						 if( (Local_u8_Variable9 == ENTER) && (Local_u8_Error == ERROR))
     8ce:	8d 30       	cpi	r24, 0x0D	; 13
     8d0:	99 f4       	brne	.+38     	; 0x8f8 <__stack+0x99>
     8d2:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <Local_u8_Error>
     8d6:	91 11       	cpse	r25, r1
     8d8:	0f c0       	rjmp	.+30     	; 0x8f8 <__stack+0x99>
						 {
							 UART_TxString(" Error please try again");
     8da:	8b e9       	ldi	r24, 0x9B	; 155
     8dc:	91 e0       	ldi	r25, 0x01	; 1
     8de:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
		                     UART_Tx(NEXTLINE);
     8e2:	8d e0       	ldi	r24, 0x0D	; 13
     8e4:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
							 UART_TxString(" PASSWORD:");
     8e8:	82 e6       	ldi	r24, 0x62	; 98
     8ea:	92 e0       	ldi	r25, 0x02	; 2
     8ec:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
		                     UART_Tx(NEXTLINE);
     8f0:	8d e0       	ldi	r24, 0x0D	; 13
     8f2:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
     8f6:	e9 cf       	rjmp	.-46     	; 0x8ca <__stack+0x6b>
						 }
						 else if(Local_u8_Variable9 != ENTER)
     8f8:	8d 30       	cpi	r24, 0x0D	; 13
     8fa:	51 f0       	breq	.+20     	; 0x910 <__stack+0xb1>
						 {
							 Local_u8_Error = NO_ERROR;
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <Local_u8_Error>
							 Local_u8_AdminID = Local_u8_Variable9;
						//	 H_Lcd_WriteCharacter(Local_u8_AdminID);
							 EEPROMINT_WriteByte(Local_u8_AdminCounter,Local_u8_AdminID);
     902:	68 2f       	mov	r22, r24
     904:	81 2f       	mov	r24, r17
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	0e 94 99 06 	call	0xd32	; 0xd32 <EEPROMINT_WriteByte>
							 Local_u8_AdminCounter++;
     90c:	1f 5f       	subi	r17, 0xFF	; 255
     90e:	dd cf       	rjmp	.-70     	; 0x8ca <__stack+0x6b>
						 }
						 else if(Local_u8_Variable9 == ENTER)
     910:	8d 30       	cpi	r24, 0x0D	; 13
     912:	d9 f6       	brne	.-74     	; 0x8ca <__stack+0x6b>
						 {
							 EEPROMINT_WriteByte(Local_u8_AdminCounter,END_OF_CREDENTIALS);
     914:	64 e2       	ldi	r22, 0x24	; 36
     916:	81 2f       	mov	r24, r17
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	0e 94 99 06 	call	0xd32	; 0xd32 <EEPROMINT_WriteByte>
							 Local_u8_Error = ERROR;
     91e:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <Local_u8_Error>
							 Local_u8_AdminCounter++;
     922:	61 e0       	ldi	r22, 0x01	; 1
     924:	61 0f       	add	r22, r17
							 EEPROMINT_WriteByte(LAST_BYTE,Local_u8_AdminCounter);//UPDATE THE COUNTER (IN EEPROM)
     926:	8f ef       	ldi	r24, 0xFF	; 255
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	0e 94 99 06 	call	0xd32	; 0xd32 <EEPROMINT_WriteByte>
		                     UART_Tx(NEXTLINE);
     92e:	8d e0       	ldi	r24, 0x0D	; 13
     930:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
							 UART_TxString(" USER ADDED");
     934:	8d e6       	ldi	r24, 0x6D	; 109
     936:	92 e0       	ldi	r25, 0x02	; 2
     938:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
		                     UART_Tx(NEXTLINE);
     93c:	8d e0       	ldi	r24, 0x0D	; 13
     93e:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
						 {
							 //Do Nothing
						 }
					 }
					 
					 break;
     942:	62 cf       	rjmp	.-316    	; 0x808 <__DATA_REGION_LENGTH__+0x8>
					 case REMOVE_USER:
		             UART_Tx(NEXTLINE);
     944:	8d e0       	ldi	r24, 0x0D	; 13
     946:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
					 UART_TxString(" Enter ID&PASS");
     94a:	89 e7       	ldi	r24, 0x79	; 121
     94c:	92 e0       	ldi	r25, 0x02	; 2
     94e:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
					 UART_TxString(" Combined");
     952:	88 e8       	ldi	r24, 0x88	; 136
     954:	92 e0       	ldi	r25, 0x02	; 2
     956:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
		             UART_Tx(NEXTLINE);
     95a:	8d e0       	ldi	r24, 0x0D	; 13
     95c:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
					 Local_u8_counter = RESET;
					 Local_u8_EEPROMCount = RESET;
     960:	00 e0       	ldi	r16, 0x00	; 0
					 case REMOVE_USER:
		             UART_Tx(NEXTLINE);
					 UART_TxString(" Enter ID&PASS");
					 UART_TxString(" Combined");
		             UART_Tx(NEXTLINE);
					 Local_u8_counter = RESET;
     962:	10 e0       	ldi	r17, 0x00	; 0
					 Local_u8_EEPROMCount = RESET;
					 u8 Local_u8_EEPROMTEMP = NONE;
					 u8 Local_u8_EEPROMVALUE = NONE;
					 while(TAKING_ID_PASS)
					 {
						 Local_u8_Variable10 = HC05_Rx();
     964:	0e 94 c6 06 	call	0xd8c	; 0xd8c <HC05_Rx>
						 
						 if(Local_u8_Variable10 == ENTER)
     968:	8d 30       	cpi	r24, 0x0D	; 13
     96a:	89 f0       	breq	.+34     	; 0x98e <__stack+0x12f>
						 {
							 break;
						 }
						 else if(Local_u8_Variable10 != ENTER)
     96c:	d9 f3       	breq	.-10     	; 0x964 <__stack+0x105>
						 {
							 Local_u8_IDAndPass[Local_u8_counter] = Local_u8_Variable10;
     96e:	e1 e0       	ldi	r30, 0x01	; 1
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	ec 0f       	add	r30, r28
     974:	fd 1f       	adc	r31, r29
     976:	e1 0f       	add	r30, r17
     978:	f1 1d       	adc	r31, r1
     97a:	80 83       	st	Z, r24
							// H_Lcd_WriteCharacter(Local_u8_Variable10);
							 Local_u8_counter++;
     97c:	1f 5f       	subi	r17, 0xFF	; 255
							 Local_u8_EEPROMVALUE = EEPROMINT_ReadByte(Local_u8_EEPROMCount) ;
     97e:	80 2f       	mov	r24, r16
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	0e 94 b2 06 	call	0xd64	; 0xd64 <EEPROMINT_ReadByte>
							 if(Local_u8_EEPROMVALUE == END_OF_CREDENTIALS)
     986:	84 32       	cpi	r24, 0x24	; 36
     988:	69 f3       	breq	.-38     	; 0x964 <__stack+0x105>
							 {
								 //Do Nothing
							 }
							 else
							 {
								 Local_u8_EEPROMCount++;
     98a:	0f 5f       	subi	r16, 0xFF	; 255
     98c:	eb cf       	rjmp	.-42     	; 0x964 <__stack+0x105>
					 }
					 
					 while(REMOVING_USER)
					 {
						 u8 Local_u8_BREAK = NO;//END 'while(REMOVING_USER)' LOOP
						 if(Local_u8_EEPROMCount == LAST_PLACE)
     98e:	0f 3f       	cpi	r16, 0xFF	; 255
     990:	79 f4       	brne	.+30     	; 0x9b0 <__stack+0x151>
						 {
		                     UART_Tx(13);
     992:	8d e0       	ldi	r24, 0x0D	; 13
     994:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
							 UART_TxString(" USER DOESN'T");
     998:	82 e9       	ldi	r24, 0x92	; 146
     99a:	92 e0       	ldi	r25, 0x02	; 2
     99c:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
		                     UART_Tx(13);
     9a0:	8d e0       	ldi	r24, 0x0D	; 13
     9a2:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
							 UART_TxString(" EXIST");
     9a6:	80 ea       	ldi	r24, 0xA0	; 160
     9a8:	92 e0       	ldi	r25, 0x02	; 2
     9aa:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
							 break; //END 'while(REMOVING_USER)' LOOP
     9ae:	2c cf       	rjmp	.-424    	; 0x808 <__DATA_REGION_LENGTH__+0x8>
						 }
						 else
						 {
							 Local_u8_counter = RESET;
							 Local_u8_EEPROMCount++;
     9b0:	0f 5f       	subi	r16, 0xFF	; 255
							 Local_u8_EEPROMTEMP = Local_u8_EEPROMCount;
     9b2:	10 2f       	mov	r17, r16
							 UART_TxString(" EXIST");
							 break; //END 'while(REMOVING_USER)' LOOP
						 }
						 else
						 {
							 Local_u8_counter = RESET;
     9b4:	e1 2c       	mov	r14, r1
							 Local_u8_EEPROMCount++;
							 Local_u8_EEPROMTEMP = Local_u8_EEPROMCount;
							 while(CHECKING)
							 {
								 if(Local_u8_IDAndPass[Local_u8_counter] == EEPROMINT_ReadByte(Local_u8_EEPROMTEMP))
     9b6:	e1 e0       	ldi	r30, 0x01	; 1
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	ec 0f       	add	r30, r28
     9bc:	fd 1f       	adc	r31, r29
     9be:	ee 0d       	add	r30, r14
     9c0:	f1 1d       	adc	r31, r1
     9c2:	f0 80       	ld	r15, Z
     9c4:	81 2f       	mov	r24, r17
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	0e 94 b2 06 	call	0xd64	; 0xd64 <EEPROMINT_ReadByte>
     9cc:	f8 12       	cpse	r15, r24
     9ce:	2a c0       	rjmp	.+84     	; 0xa24 <__stack+0x1c5>
								 {
									 Local_u8_EEPROMCount++;
     9d0:	0f 5f       	subi	r16, 0xFF	; 255
									 UART_Tx(NEXTLINE);
     9d2:	8d e0       	ldi	r24, 0x0D	; 13
     9d4:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
									 UART_TxString(" CHECKING...");
     9d8:	87 ea       	ldi	r24, 0xA7	; 167
     9da:	92 e0       	ldi	r25, 0x02	; 2
     9dc:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
									 
									 if(EEPROMINT_ReadByte(Local_u8_EEPROMCount) == END_OF_CREDENTIALS)
     9e0:	80 2f       	mov	r24, r16
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	0e 94 b2 06 	call	0xd64	; 0xd64 <EEPROMINT_ReadByte>
     9e8:	84 32       	cpi	r24, 0x24	; 36
     9ea:	c9 f4       	brne	.+50     	; 0xa1e <__stack+0x1bf>
     9ec:	05 c0       	rjmp	.+10     	; 0x9f8 <__stack+0x199>
									 {
										 while(EEPROMINT_ReadByte(Local_u8_EEPROMTEMP) != END_OF_CREDENTIALS)
										 {
											 EEPROMINT_WriteByte(Local_u8_EEPROMTEMP,EMPTY);
     9ee:	6f ef       	ldi	r22, 0xFF	; 255
     9f0:	c7 01       	movw	r24, r14
     9f2:	0e 94 99 06 	call	0xd32	; 0xd32 <EEPROMINT_WriteByte>
											 --Local_u8_EEPROMTEMP;
     9f6:	11 50       	subi	r17, 0x01	; 1
									 UART_Tx(NEXTLINE);
									 UART_TxString(" CHECKING...");
									 
									 if(EEPROMINT_ReadByte(Local_u8_EEPROMCount) == END_OF_CREDENTIALS)
									 {
										 while(EEPROMINT_ReadByte(Local_u8_EEPROMTEMP) != END_OF_CREDENTIALS)
     9f8:	e1 2e       	mov	r14, r17
     9fa:	f1 2c       	mov	r15, r1
     9fc:	c7 01       	movw	r24, r14
     9fe:	0e 94 b2 06 	call	0xd64	; 0xd64 <EEPROMINT_ReadByte>
     a02:	84 32       	cpi	r24, 0x24	; 36
     a04:	a1 f7       	brne	.-24     	; 0x9ee <__stack+0x18f>
										 {
											 EEPROMINT_WriteByte(Local_u8_EEPROMTEMP,EMPTY);
											 --Local_u8_EEPROMTEMP;
										 }
										 UART_Tx(NEXTLINE);
     a06:	8d e0       	ldi	r24, 0x0D	; 13
     a08:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
										 UART_TxString(" USER DELETED");
     a0c:	84 eb       	ldi	r24, 0xB4	; 180
     a0e:	92 e0       	ldi	r25, 0x02	; 2
     a10:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
										 UART_Tx(NEXTLINE);
     a14:	8d e0       	ldi	r24, 0x0D	; 13
     a16:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
										 Local_u8_BREAK = YES;
     a1a:	81 e0       	ldi	r24, 0x01	; 1
										 break;//END 'while(CHECKING)' LOOP
     a1c:	08 c0       	rjmp	.+16     	; 0xa2e <__stack+0x1cf>
									 }
									 Local_u8_EEPROMTEMP++;
     a1e:	1f 5f       	subi	r17, 0xFF	; 255
									 Local_u8_counter++;
     a20:	e3 94       	inc	r14
     a22:	c9 cf       	rjmp	.-110    	; 0x9b6 <__stack+0x157>
								 }
								 else
								 {
									 Local_u8_EEPROMTEMP++;
     a24:	1f 5f       	subi	r17, 0xFF	; 255
									 Local_u8_EEPROMCount++;
     a26:	0f 5f       	subi	r16, 0xFF	; 255
									 
									 if(Local_u8_EEPROMCount == LAST_PLACE)
     a28:	0f 3f       	cpi	r16, 0xFF	; 255
     a2a:	29 f6       	brne	.-118    	; 0x9b6 <__stack+0x157>
						 }
					 }
					 
					 while(REMOVING_USER)
					 {
						 u8 Local_u8_BREAK = NO;//END 'while(REMOVING_USER)' LOOP
     a2c:	80 e0       	ldi	r24, 0x00	; 0
									 {
										 break;//END 'while(CHECKING)' LOOP
									 }
								 }
							 }
							 if(Local_u8_BREAK == YES)
     a2e:	81 30       	cpi	r24, 0x01	; 1
     a30:	09 f0       	breq	.+2      	; 0xa34 <__stack+0x1d5>
     a32:	ad cf       	rjmp	.-166    	; 0x98e <__stack+0x12f>
     a34:	e9 ce       	rjmp	.-558    	; 0x808 <__DATA_REGION_LENGTH__+0x8>
							 }
						 }
					 }
					 break;
					 case MENU:
					 UART_Tx(NEXTLINE);
     a36:	8d e0       	ldi	r24, 0x0D	; 13
     a38:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
					 UART_TxString(" Welcome sir");
     a3c:	82 ec       	ldi	r24, 0xC2	; 194
     a3e:	92 e0       	ldi	r25, 0x02	; 2
     a40:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
					 UART_Tx(NEXTLINE);
     a44:	8d e0       	ldi	r24, 0x0D	; 13
     a46:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
					 while (WAITING_FOR_CHOICE)
					 {
						  u8 Local_u8_FlagToMenu = 0;
						 UART_TxString(" 1-Door  2-Light");
     a4a:	8f ec       	ldi	r24, 0xCF	; 207
     a4c:	92 e0       	ldi	r25, 0x02	; 2
     a4e:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
						 UART_Tx(NEXTLINE);
     a52:	8d e0       	ldi	r24, 0x0D	; 13
     a54:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
						 UART_TxString(" 3-Dim_Light 4-AC");
     a58:	80 ee       	ldi	r24, 0xE0	; 224
     a5a:	92 e0       	ldi	r25, 0x02	; 2
     a5c:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
						 UART_Tx(NEXTLINE);
     a60:	8d e0       	ldi	r24, 0x0D	; 13
     a62:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
						 UART_TxString(" 5-Back To Main Menu");
     a66:	82 ef       	ldi	r24, 0xF2	; 242
     a68:	92 e0       	ldi	r25, 0x02	; 2
     a6a:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_TxString>
						 UART_Tx(NEXTLINE);
     a6e:	8d e0       	ldi	r24, 0x0D	; 13
     a70:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>

						 Local_u8_Menu =	HC05_Rx() ;
     a74:	0e 94 c6 06 	call	0xd8c	; 0xd8c <HC05_Rx>
						 if (Local_u8_Menu != 0)
     a78:	88 23       	and	r24, r24
     a7a:	49 f1       	breq	.+82     	; 0xace <__stack+0x26f>
						 {
							 
							 switch(Local_u8_Menu)
     a7c:	83 33       	cpi	r24, 0x33	; 51
     a7e:	b9 f0       	breq	.+46     	; 0xaae <__stack+0x24f>
     a80:	28 f4       	brcc	.+10     	; 0xa8c <__stack+0x22d>
     a82:	81 33       	cpi	r24, 0x31	; 49
     a84:	41 f0       	breq	.+16     	; 0xa96 <__stack+0x237>
     a86:	82 33       	cpi	r24, 0x32	; 50
     a88:	61 f0       	breq	.+24     	; 0xaa2 <__stack+0x243>
     a8a:	23 c0       	rjmp	.+70     	; 0xad2 <__stack+0x273>
     a8c:	84 33       	cpi	r24, 0x34	; 52
     a8e:	a9 f0       	breq	.+42     	; 0xaba <__stack+0x25b>
     a90:	85 33       	cpi	r24, 0x35	; 53
     a92:	c9 f0       	breq	.+50     	; 0xac6 <__stack+0x267>
     a94:	1e c0       	rjmp	.+60     	; 0xad2 <__stack+0x273>
							 {
								 case 49:H_Lcd_Clr();  Door_Control();                break;
     a96:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <H_Lcd_Clr>
     a9a:	0e 94 ca 00 	call	0x194	; 0x194 <Door_Control>
					 UART_Tx(NEXTLINE);
					 UART_TxString(" Welcome sir");
					 UART_Tx(NEXTLINE);
					 while (WAITING_FOR_CHOICE)
					 {
						  u8 Local_u8_FlagToMenu = 0;
     a9e:	80 e0       	ldi	r24, 0x00	; 0
						 if (Local_u8_Menu != 0)
						 {
							 
							 switch(Local_u8_Menu)
							 {
								 case 49:H_Lcd_Clr();  Door_Control();                break;
     aa0:	19 c0       	rjmp	.+50     	; 0xad4 <__stack+0x275>
								 case 50:H_Lcd_Clr();  Light_Control();			      break;
     aa2:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <H_Lcd_Clr>
     aa6:	0e 94 11 01 	call	0x222	; 0x222 <Light_Control>
					 UART_Tx(NEXTLINE);
					 UART_TxString(" Welcome sir");
					 UART_Tx(NEXTLINE);
					 while (WAITING_FOR_CHOICE)
					 {
						  u8 Local_u8_FlagToMenu = 0;
     aaa:	80 e0       	ldi	r24, 0x00	; 0
						 {
							 
							 switch(Local_u8_Menu)
							 {
								 case 49:H_Lcd_Clr();  Door_Control();                break;
								 case 50:H_Lcd_Clr();  Light_Control();			      break;
     aac:	13 c0       	rjmp	.+38     	; 0xad4 <__stack+0x275>
								 case 51:H_Lcd_Clr();  Dim_Light_Control();		      break;
     aae:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <H_Lcd_Clr>
     ab2:	0e 94 48 01 	call	0x290	; 0x290 <Dim_Light_Control>
					 UART_Tx(NEXTLINE);
					 UART_TxString(" Welcome sir");
					 UART_Tx(NEXTLINE);
					 while (WAITING_FOR_CHOICE)
					 {
						  u8 Local_u8_FlagToMenu = 0;
     ab6:	80 e0       	ldi	r24, 0x00	; 0
							 
							 switch(Local_u8_Menu)
							 {
								 case 49:H_Lcd_Clr();  Door_Control();                break;
								 case 50:H_Lcd_Clr();  Light_Control();			      break;
								 case 51:H_Lcd_Clr();  Dim_Light_Control();		      break;
     ab8:	0d c0       	rjmp	.+26     	; 0xad4 <__stack+0x275>
								 case 52:H_Lcd_Clr();  AirCond_EN();                  break;
     aba:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <H_Lcd_Clr>
     abe:	0e 94 a5 01 	call	0x34a	; 0x34a <AirCond_EN>
					 UART_Tx(NEXTLINE);
					 UART_TxString(" Welcome sir");
					 UART_Tx(NEXTLINE);
					 while (WAITING_FOR_CHOICE)
					 {
						  u8 Local_u8_FlagToMenu = 0;
     ac2:	80 e0       	ldi	r24, 0x00	; 0
							 switch(Local_u8_Menu)
							 {
								 case 49:H_Lcd_Clr();  Door_Control();                break;
								 case 50:H_Lcd_Clr();  Light_Control();			      break;
								 case 51:H_Lcd_Clr();  Dim_Light_Control();		      break;
								 case 52:H_Lcd_Clr();  AirCond_EN();                  break;
     ac4:	07 c0       	rjmp	.+14     	; 0xad4 <__stack+0x275>
								 case 53:H_Lcd_Clr();  Local_u8_FlagToMenu = 1;       break;								 
     ac6:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <H_Lcd_Clr>
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	03 c0       	rjmp	.+6      	; 0xad4 <__stack+0x275>
					 UART_Tx(NEXTLINE);
					 UART_TxString(" Welcome sir");
					 UART_Tx(NEXTLINE);
					 while (WAITING_FOR_CHOICE)
					 {
						  u8 Local_u8_FlagToMenu = 0;
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	01 c0       	rjmp	.+2      	; 0xad4 <__stack+0x275>
     ad2:	80 e0       	ldi	r24, 0x00	; 0
								 case 52:H_Lcd_Clr();  AirCond_EN();                  break;
								 case 53:H_Lcd_Clr();  Local_u8_FlagToMenu = 1;       break;								 
								 default:							                  break;
							 }
						 }
						  if(Local_u8_FlagToMenu == 1)
     ad4:	81 30       	cpi	r24, 0x01	; 1
     ad6:	09 f0       	breq	.+2      	; 0xada <__stack+0x27b>
     ad8:	b8 cf       	rjmp	.-144    	; 0xa4a <__stack+0x1eb>
     ada:	96 ce       	rjmp	.-724    	; 0x808 <__DATA_REGION_LENGTH__+0x8>
					 }

				 }
			 }
/************************************************** USER_MODE***************************************************************************************/
else if (Local_u8_Mode == USER_MODE)
     adc:	05 31       	cpi	r16, 0x15	; 21
     ade:	09 f0       	breq	.+2      	; 0xae2 <__stack+0x283>
     ae0:	c3 cd       	rjmp	.-1146   	; 0x668 <main+0x248>
{     
	H_Lcd_WriteString("Welcome");
     ae2:	87 e0       	ldi	r24, 0x07	; 7
     ae4:	93 e0       	ldi	r25, 0x03	; 3
     ae6:	0e 94 58 08 	call	0x10b0	; 0x10b0 <H_Lcd_WriteString>
     aea:	2f ef       	ldi	r18, 0xFF	; 255
     aec:	8e e9       	ldi	r24, 0x9E	; 158
     aee:	94 e2       	ldi	r25, 0x24	; 36
     af0:	21 50       	subi	r18, 0x01	; 1
     af2:	80 40       	sbci	r24, 0x00	; 0
     af4:	90 40       	sbci	r25, 0x00	; 0
     af6:	e1 f7       	brne	.-8      	; 0xaf0 <__stack+0x291>
     af8:	00 c0       	rjmp	.+0      	; 0xafa <__stack+0x29b>
     afa:	00 00       	nop
	_delay_ms(DISPLAY_TIME);
	H_Lcd_Clr();
     afc:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <H_Lcd_Clr>
	Local_u8_EEPROM = 0;
	Local_u8_counter = 0;
	Local_u8_ID = 1;
	Local_u8_Wrong == 10;
	Local_u8_Trials = 3;
     b00:	03 e0       	ldi	r16, 0x03	; 3
		{
			break;
		}
		
		/*Taking the ID*/
		H_Lcd_WriteString("ID:");
     b02:	81 ed       	ldi	r24, 0xD1	; 209
     b04:	91 e0       	ldi	r25, 0x01	; 1
     b06:	0e 94 58 08 	call	0x10b0	; 0x10b0 <H_Lcd_WriteString>
		H_Lcd_GoTo(1,0);
     b0a:	60 e0       	ldi	r22, 0x00	; 0
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	0e 94 6f 08 	call	0x10de	; 0x10de <H_Lcd_GoTo>
		while(Local_u8_ID)
     b12:	10 e0       	ldi	r17, 0x00	; 0
     b14:	ff 24       	eor	r15, r15
     b16:	f3 94       	inc	r15
     b18:	39 c0       	rjmp	.+114    	; 0xb8c <__stack+0x32d>
		{
			Local_u8_Variable11 = H_KeyPad_Read();
     b1a:	0e 94 3d 07 	call	0xe7a	; 0xe7a <H_KeyPad_Read>
			if((Local_u8_Variable11 == '=') && (Local_u8_Error == ERROR))
     b1e:	8d 33       	cpi	r24, 0x3D	; 61
     b20:	e1 f4       	brne	.+56     	; 0xb5a <__stack+0x2fb>
     b22:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <Local_u8_Error>
     b26:	91 11       	cpse	r25, r1
     b28:	18 c0       	rjmp	.+48     	; 0xb5a <__stack+0x2fb>
			{
				H_Lcd_WriteString("Error please try again");
     b2a:	8c e9       	ldi	r24, 0x9C	; 156
     b2c:	91 e0       	ldi	r25, 0x01	; 1
     b2e:	0e 94 58 08 	call	0x10b0	; 0x10b0 <H_Lcd_WriteString>
     b32:	af ef       	ldi	r26, 0xFF	; 255
     b34:	be e9       	ldi	r27, 0x9E	; 158
     b36:	24 e2       	ldi	r18, 0x24	; 36
     b38:	a1 50       	subi	r26, 0x01	; 1
     b3a:	b0 40       	sbci	r27, 0x00	; 0
     b3c:	20 40       	sbci	r18, 0x00	; 0
     b3e:	e1 f7       	brne	.-8      	; 0xb38 <__stack+0x2d9>
     b40:	00 c0       	rjmp	.+0      	; 0xb42 <__stack+0x2e3>
     b42:	00 00       	nop
				_delay_ms(750);
				H_Lcd_Clr();
     b44:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <H_Lcd_Clr>
				H_Lcd_WriteString("ID:");
     b48:	81 ed       	ldi	r24, 0xD1	; 209
     b4a:	91 e0       	ldi	r25, 0x01	; 1
     b4c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <H_Lcd_WriteString>
				H_Lcd_GoTo(1,0);
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	0e 94 6f 08 	call	0x10de	; 0x10de <H_Lcd_GoTo>
     b58:	19 c0       	rjmp	.+50     	; 0xb8c <__stack+0x32d>
			}
			else if(Local_u8_Variable11 == '=')
     b5a:	8d 33       	cpi	r24, 0x3D	; 61
     b5c:	21 f4       	brne	.+8      	; 0xb66 <__stack+0x307>
			{
				/*The end of taking the ID*/
				Local_u8_Error = ERROR;
     b5e:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <Local_u8_Error>
				Local_u8_ID = 0;
     b62:	f1 2c       	mov	r15, r1
     b64:	13 c0       	rjmp	.+38     	; 0xb8c <__stack+0x32d>
			}
			else if(Local_u8_Variable1 != '=')
			{
				Local_u8_Error = NO_ERROR;
     b66:	91 e0       	ldi	r25, 0x01	; 1
     b68:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <Local_u8_Error>
				Local_u8_IDAndPass[Local_u8_counter] = Local_u8_Variable11;
     b6c:	e1 e0       	ldi	r30, 0x01	; 1
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	ec 0f       	add	r30, r28
     b72:	fd 1f       	adc	r31, r29
     b74:	e1 0f       	add	r30, r17
     b76:	f1 1d       	adc	r31, r1
     b78:	80 83       	st	Z, r24
				H_Lcd_WriteCharacter(Local_u8_IDAndPass[Local_u8_counter]);
     b7a:	0e 94 a0 07 	call	0xf40	; 0xf40 <H_Lcd_WriteCharacter>
				Local_u8_counter++;
     b7e:	1f 5f       	subi	r17, 0xFF	; 255
     b80:	8f e3       	ldi	r24, 0x3F	; 63
     b82:	9c e9       	ldi	r25, 0x9C	; 156
     b84:	01 97       	sbiw	r24, 0x01	; 1
     b86:	f1 f7       	brne	.-4      	; 0xb84 <__stack+0x325>
     b88:	00 c0       	rjmp	.+0      	; 0xb8a <__stack+0x32b>
     b8a:	00 00       	nop
		}
		
		/*Taking the ID*/
		H_Lcd_WriteString("ID:");
		H_Lcd_GoTo(1,0);
		while(Local_u8_ID)
     b8c:	f1 10       	cpse	r15, r1
     b8e:	c5 cf       	rjmp	.-118    	; 0xb1a <__stack+0x2bb>
				_delay_ms(10);
			}
		}
		
		/*Taking the PASSWORD*/
		H_Lcd_Clr();
     b90:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <H_Lcd_Clr>
		H_Lcd_WriteString("PASSWORD: ");
     b94:	86 ed       	ldi	r24, 0xD6	; 214
     b96:	91 e0       	ldi	r25, 0x01	; 1
     b98:	0e 94 58 08 	call	0x10b0	; 0x10b0 <H_Lcd_WriteString>
     b9c:	9f ef       	ldi	r25, 0xFF	; 255
     b9e:	ae e9       	ldi	r26, 0x9E	; 158
     ba0:	b4 e2       	ldi	r27, 0x24	; 36
     ba2:	91 50       	subi	r25, 0x01	; 1
     ba4:	a0 40       	sbci	r26, 0x00	; 0
     ba6:	b0 40       	sbci	r27, 0x00	; 0
     ba8:	e1 f7       	brne	.-8      	; 0xba2 <__stack+0x343>
     baa:	00 c0       	rjmp	.+0      	; 0xbac <__stack+0x34d>
     bac:	00 00       	nop
		_delay_ms(DISPLAY_TIME);
		H_Lcd_GoTo(1,0);
     bae:	60 e0       	ldi	r22, 0x00	; 0
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	0e 94 6f 08 	call	0x10de	; 0x10de <H_Lcd_GoTo>
		
		while(!Local_u8_ID)
     bb6:	3c c0       	rjmp	.+120    	; 0xc30 <__stack+0x3d1>
		{
			Local_u8_Variable12 = H_KeyPad_Read();
     bb8:	0e 94 3d 07 	call	0xe7a	; 0xe7a <H_KeyPad_Read>
			if((Local_u8_Variable12 == '=') && (Local_u8_Error == ERROR))
     bbc:	8d 33       	cpi	r24, 0x3D	; 61
     bbe:	e1 f4       	brne	.+56     	; 0xbf8 <__stack+0x399>
     bc0:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <Local_u8_Error>
     bc4:	91 11       	cpse	r25, r1
     bc6:	18 c0       	rjmp	.+48     	; 0xbf8 <__stack+0x399>
			{
				H_Lcd_WriteString("Error please try again");
     bc8:	8c e9       	ldi	r24, 0x9C	; 156
     bca:	91 e0       	ldi	r25, 0x01	; 1
     bcc:	0e 94 58 08 	call	0x10b0	; 0x10b0 <H_Lcd_WriteString>
     bd0:	2f ef       	ldi	r18, 0xFF	; 255
     bd2:	8e e9       	ldi	r24, 0x9E	; 158
     bd4:	94 e2       	ldi	r25, 0x24	; 36
     bd6:	21 50       	subi	r18, 0x01	; 1
     bd8:	80 40       	sbci	r24, 0x00	; 0
     bda:	90 40       	sbci	r25, 0x00	; 0
     bdc:	e1 f7       	brne	.-8      	; 0xbd6 <__stack+0x377>
     bde:	00 c0       	rjmp	.+0      	; 0xbe0 <__stack+0x381>
     be0:	00 00       	nop
				_delay_ms(DISPLAY_TIME);
				H_Lcd_Clr();
     be2:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <H_Lcd_Clr>
				H_Lcd_WriteString("PASSWORD: ");
     be6:	86 ed       	ldi	r24, 0xD6	; 214
     be8:	91 e0       	ldi	r25, 0x01	; 1
     bea:	0e 94 58 08 	call	0x10b0	; 0x10b0 <H_Lcd_WriteString>
				H_Lcd_GoTo(1,0);
     bee:	60 e0       	ldi	r22, 0x00	; 0
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	0e 94 6f 08 	call	0x10de	; 0x10de <H_Lcd_GoTo>
     bf6:	1c c0       	rjmp	.+56     	; 0xc30 <__stack+0x3d1>
			}
			else if(Local_u8_Variable12 == '=')
     bf8:	8d 33       	cpi	r24, 0x3D	; 61
     bfa:	29 f4       	brne	.+10     	; 0xc06 <__stack+0x3a7>
			{
				/*The end of taking the ID*/
				Local_u8_Error = ERROR;
     bfc:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <Local_u8_Error>
				Local_u8_ID = 1;
     c00:	ff 24       	eor	r15, r15
     c02:	f3 94       	inc	r15
     c04:	15 c0       	rjmp	.+42     	; 0xc30 <__stack+0x3d1>
			}
			
			/*Enter the password you want untill 'ENTER'*/
			else if(Local_u8_Variable12 != '=')
     c06:	8d 33       	cpi	r24, 0x3D	; 61
     c08:	99 f0       	breq	.+38     	; 0xc30 <__stack+0x3d1>
			{
				Local_u8_Error = NO_ERROR;
     c0a:	91 e0       	ldi	r25, 0x01	; 1
     c0c:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <Local_u8_Error>
				Local_u8_IDAndPass[Local_u8_counter] = Local_u8_Variable12;
     c10:	e1 e0       	ldi	r30, 0x01	; 1
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	ec 0f       	add	r30, r28
     c16:	fd 1f       	adc	r31, r29
     c18:	e1 0f       	add	r30, r17
     c1a:	f1 1d       	adc	r31, r1
     c1c:	80 83       	st	Z, r24
				H_Lcd_WriteCharacter(Local_u8_IDAndPass[Local_u8_counter]);
     c1e:	0e 94 a0 07 	call	0xf40	; 0xf40 <H_Lcd_WriteCharacter>
				Local_u8_counter++;
     c22:	1f 5f       	subi	r17, 0xFF	; 255
     c24:	af e3       	ldi	r26, 0x3F	; 63
     c26:	bc e9       	ldi	r27, 0x9C	; 156
     c28:	11 97       	sbiw	r26, 0x01	; 1
     c2a:	f1 f7       	brne	.-4      	; 0xc28 <__stack+0x3c9>
     c2c:	00 c0       	rjmp	.+0      	; 0xc2e <__stack+0x3cf>
     c2e:	00 00       	nop
		H_Lcd_Clr();
		H_Lcd_WriteString("PASSWORD: ");
		_delay_ms(DISPLAY_TIME);
		H_Lcd_GoTo(1,0);
		
		while(!Local_u8_ID)
     c30:	ff 20       	and	r15, r15
     c32:	11 f2       	breq	.-124    	; 0xbb8 <__stack+0x359>
     c34:	f1 2c       	mov	r15, r1
     c36:	10 e0       	ldi	r17, 0x00	; 0
     c38:	6d c0       	rjmp	.+218    	; 0xd14 <__stack+0x4b5>
		{
			Local_u8_ForLoopcounter = 0;
			Local_u8_EEPROMCount = 0;
			for(Local_u8_ForLoopcounter; Local_u8_ForLoopcounter < 255 ; Local_u8_ForLoopcounter++)
			{
				Local_u8_EEPROM = EEPROMINT_ReadByte(Local_u8_EEPROMCount); //Reading EEPROM consecutively
     c3a:	8f 2d       	mov	r24, r15
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	0e 94 b2 06 	call	0xd64	; 0xd64 <EEPROMINT_ReadByte>
				Local_u8_EEPROMCount++;
     c42:	f3 94       	inc	r15
				if(Local_u8_IDAndPass[Local_u8_ForLoopcounter] == Local_u8_EEPROM)
     c44:	e1 e0       	ldi	r30, 0x01	; 1
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	ec 0f       	add	r30, r28
     c4a:	fd 1f       	adc	r31, r29
     c4c:	e1 0f       	add	r30, r17
     c4e:	f1 1d       	adc	r31, r1
     c50:	90 81       	ld	r25, Z
     c52:	89 13       	cpse	r24, r25
     c54:	0e c0       	rjmp	.+28     	; 0xc72 <__stack+0x413>
				{
					H_Lcd_Clr();
     c56:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <H_Lcd_Clr>
					H_Lcd_WriteString("CHECKING...");
     c5a:	88 ea       	ldi	r24, 0xA8	; 168
     c5c:	92 e0       	ldi	r25, 0x02	; 2
     c5e:	0e 94 58 08 	call	0x10b0	; 0x10b0 <H_Lcd_WriteString>
					if(EEPROMINT_ReadByte(Local_u8_EEPROMCount) == '$')
     c62:	8f 2d       	mov	r24, r15
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	0e 94 b2 06 	call	0xd64	; 0xd64 <EEPROMINT_ReadByte>
     c6a:	84 32       	cpi	r24, 0x24	; 36
     c6c:	09 f0       	breq	.+2      	; 0xc70 <__stack+0x411>
     c6e:	51 c0       	rjmp	.+162    	; 0xd12 <__stack+0x4b3>
     c70:	54 c0       	rjmp	.+168    	; 0xd1a <__stack+0x4bb>
						break;
						Local_u8_Wrong == 11;
					}
					
				}
				else if(Local_u8_IDAndPass[Local_u8_ForLoopcounter] != Local_u8_EEPROM && Local_u8_Wrong == 10 )
     c72:	89 17       	cp	r24, r25
     c74:	09 f4       	brne	.+2      	; 0xc78 <__stack+0x419>
     c76:	4d c0       	rjmp	.+154    	; 0xd12 <__stack+0x4b3>
				{
					H_Lcd_Clr();
     c78:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <H_Lcd_Clr>
					H_Lcd_WriteString("Wrong ID/PASS");
     c7c:	82 ee       	ldi	r24, 0xE2	; 226
     c7e:	91 e0       	ldi	r25, 0x01	; 1
     c80:	0e 94 58 08 	call	0x10b0	; 0x10b0 <H_Lcd_WriteString>
     c84:	bf ef       	ldi	r27, 0xFF	; 255
     c86:	29 e6       	ldi	r18, 0x69	; 105
     c88:	88 e1       	ldi	r24, 0x18	; 24
     c8a:	b1 50       	subi	r27, 0x01	; 1
     c8c:	20 40       	sbci	r18, 0x00	; 0
     c8e:	80 40       	sbci	r24, 0x00	; 0
     c90:	e1 f7       	brne	.-8      	; 0xc8a <__stack+0x42b>
     c92:	00 c0       	rjmp	.+0      	; 0xc94 <__stack+0x435>
     c94:	00 00       	nop
					_delay_ms(500);
					H_Lcd_GoTo(1,0);
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	0e 94 6f 08 	call	0x10de	; 0x10de <H_Lcd_GoTo>
					switch(Local_u8_Trials)
     c9e:	02 30       	cpi	r16, 0x02	; 2
     ca0:	a9 f0       	breq	.+42     	; 0xccc <__stack+0x46d>
     ca2:	03 30       	cpi	r16, 0x03	; 3
     ca4:	19 f0       	breq	.+6      	; 0xcac <__stack+0x44d>
     ca6:	01 30       	cpi	r16, 0x01	; 1
     ca8:	c1 f5       	brne	.+112    	; 0xd1a <__stack+0x4bb>
     caa:	20 c0       	rjmp	.+64     	; 0xcec <__stack+0x48d>
					{
						case 3:
						H_Lcd_WriteString("2 trials left ");
     cac:	81 ef       	ldi	r24, 0xF1	; 241
     cae:	91 e0       	ldi	r25, 0x01	; 1
     cb0:	0e 94 58 08 	call	0x10b0	; 0x10b0 <H_Lcd_WriteString>
     cb4:	9f ef       	ldi	r25, 0xFF	; 255
     cb6:	a9 e6       	ldi	r26, 0x69	; 105
     cb8:	b8 e1       	ldi	r27, 0x18	; 24
     cba:	91 50       	subi	r25, 0x01	; 1
     cbc:	a0 40       	sbci	r26, 0x00	; 0
     cbe:	b0 40       	sbci	r27, 0x00	; 0
     cc0:	e1 f7       	brne	.-8      	; 0xcba <__stack+0x45b>
     cc2:	00 c0       	rjmp	.+0      	; 0xcc4 <__stack+0x465>
     cc4:	00 00       	nop
						_delay_ms(500);
						H_Lcd_Clr();
     cc6:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <H_Lcd_Clr>
						break;
     cca:	27 c0       	rjmp	.+78     	; 0xd1a <__stack+0x4bb>
						case 2:
						H_Lcd_WriteString("1 trial left ");
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	92 e0       	ldi	r25, 0x02	; 2
     cd0:	0e 94 58 08 	call	0x10b0	; 0x10b0 <H_Lcd_WriteString>
     cd4:	2f ef       	ldi	r18, 0xFF	; 255
     cd6:	89 e6       	ldi	r24, 0x69	; 105
     cd8:	98 e1       	ldi	r25, 0x18	; 24
     cda:	21 50       	subi	r18, 0x01	; 1
     cdc:	80 40       	sbci	r24, 0x00	; 0
     cde:	90 40       	sbci	r25, 0x00	; 0
     ce0:	e1 f7       	brne	.-8      	; 0xcda <__stack+0x47b>
     ce2:	00 c0       	rjmp	.+0      	; 0xce4 <__stack+0x485>
     ce4:	00 00       	nop
						_delay_ms(500);
						H_Lcd_Clr();
     ce6:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <H_Lcd_Clr>
						break;
     cea:	17 c0       	rjmp	.+46     	; 0xd1a <__stack+0x4bb>
						case 1:
						H_Lcd_Clr();
     cec:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <H_Lcd_Clr>
						H_Lcd_GoTo(0,4);
     cf0:	64 e0       	ldi	r22, 0x04	; 4
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	0e 94 6f 08 	call	0x10de	; 0x10de <H_Lcd_GoTo>
						H_Lcd_WriteString("EMERGENCY");
     cf8:	80 e1       	ldi	r24, 0x10	; 16
     cfa:	92 e0       	ldi	r25, 0x02	; 2
     cfc:	0e 94 58 08 	call	0x10b0	; 0x10b0 <H_Lcd_WriteString>
						H_Lcd_GoTo(1,0);
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	0e 94 6f 08 	call	0x10de	; 0x10de <H_Lcd_GoTo>
						H_Lcd_WriteString("CALLING 911");
     d08:	8b e1       	ldi	r24, 0x1B	; 27
     d0a:	92 e0       	ldi	r25, 0x02	; 2
     d0c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <H_Lcd_WriteString>
     d10:	ff cf       	rjmp	.-2      	; 0xd10 <__stack+0x4b1>
		
		for(Local_u8_Trials ; Local_u8_Trials >=0 ; --Local_u8_Trials)
		{
			Local_u8_ForLoopcounter = 0;
			Local_u8_EEPROMCount = 0;
			for(Local_u8_ForLoopcounter; Local_u8_ForLoopcounter < 255 ; Local_u8_ForLoopcounter++)
     d12:	1f 5f       	subi	r17, 0xFF	; 255
     d14:	1f 3f       	cpi	r17, 0xFF	; 255
     d16:	09 f0       	breq	.+2      	; 0xd1a <__stack+0x4bb>
     d18:	90 cf       	rjmp	.-224    	; 0xc3a <__stack+0x3db>
					break;
				}
			}
			Local_u8_counter = 0;
			Local_u8_ID = 1;
			--Local_u8_Trials;
     d1a:	01 50       	subi	r16, 0x01	; 1
			break;
		}
	}
     d1c:	f2 ce       	rjmp	.-540    	; 0xb02 <__stack+0x2a3>

00000d1e <H_Buzzer_Init>:
     d1e:	61 e0       	ldi	r22, 0x01	; 1
     d20:	8d e0       	ldi	r24, 0x0D	; 13
     d22:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <M_Dio_PinMode>
     d26:	08 95       	ret

00000d28 <H_Buzzer_On>:
     d28:	61 e0       	ldi	r22, 0x01	; 1
     d2a:	8d e0       	ldi	r24, 0x0D	; 13
     d2c:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
     d30:	08 95       	ret

00000d32 <EEPROMINT_WriteByte>:
     d32:	e1 99       	sbic	0x1c, 1	; 28
     d34:	fe cf       	rjmp	.-4      	; 0xd32 <EEPROMINT_WriteByte>
     d36:	07 b6       	in	r0, 0x37	; 55
     d38:	00 fc       	sbrc	r0, 0
     d3a:	fd cf       	rjmp	.-6      	; 0xd36 <EEPROMINT_WriteByte+0x4>
     d3c:	8f 3f       	cpi	r24, 0xFF	; 255
     d3e:	91 05       	cpc	r25, r1
     d40:	09 f0       	breq	.+2      	; 0xd44 <EEPROMINT_WriteByte+0x12>
     d42:	10 f4       	brcc	.+4      	; 0xd48 <EEPROMINT_WriteByte+0x16>
     d44:	8e bb       	out	0x1e, r24	; 30
     d46:	04 c0       	rjmp	.+8      	; 0xd50 <EEPROMINT_WriteByte+0x1e>
     d48:	8e bb       	out	0x1e, r24	; 30
     d4a:	89 2f       	mov	r24, r25
     d4c:	83 70       	andi	r24, 0x03	; 3
     d4e:	8f bb       	out	0x1f, r24	; 31
     d50:	6d bb       	out	0x1d, r22	; 29
     d52:	8c b3       	in	r24, 0x1c	; 28
     d54:	84 60       	ori	r24, 0x04	; 4
     d56:	8c bb       	out	0x1c, r24	; 28
     d58:	8c b3       	in	r24, 0x1c	; 28
     d5a:	82 60       	ori	r24, 0x02	; 2
     d5c:	8c bb       	out	0x1c, r24	; 28
     d5e:	e1 99       	sbic	0x1c, 1	; 28
     d60:	fe cf       	rjmp	.-4      	; 0xd5e <EEPROMINT_WriteByte+0x2c>
     d62:	08 95       	ret

00000d64 <EEPROMINT_ReadByte>:
     d64:	e1 99       	sbic	0x1c, 1	; 28
     d66:	fe cf       	rjmp	.-4      	; 0xd64 <EEPROMINT_ReadByte>
     d68:	8f 3f       	cpi	r24, 0xFF	; 255
     d6a:	91 05       	cpc	r25, r1
     d6c:	09 f0       	breq	.+2      	; 0xd70 <EEPROMINT_ReadByte+0xc>
     d6e:	10 f4       	brcc	.+4      	; 0xd74 <EEPROMINT_ReadByte+0x10>
     d70:	8e bb       	out	0x1e, r24	; 30
     d72:	04 c0       	rjmp	.+8      	; 0xd7c <EEPROMINT_ReadByte+0x18>
     d74:	8e bb       	out	0x1e, r24	; 30
     d76:	89 2f       	mov	r24, r25
     d78:	83 70       	andi	r24, 0x03	; 3
     d7a:	8f bb       	out	0x1f, r24	; 31
     d7c:	8c b3       	in	r24, 0x1c	; 28
     d7e:	81 60       	ori	r24, 0x01	; 1
     d80:	8c bb       	out	0x1c, r24	; 28
     d82:	8d b3       	in	r24, 0x1d	; 29
     d84:	08 95       	ret

00000d86 <HC05_Init>:
     d86:	0e 94 9a 0c 	call	0x1934	; 0x1934 <UART_Init>
     d8a:	08 95       	ret

00000d8c <HC05_Rx>:
     d8c:	0e 94 b0 0c 	call	0x1960	; 0x1960 <UART_Rx>
     d90:	08 95       	ret

00000d92 <H_H_Bridge_Init>:
     d92:	61 e0       	ldi	r22, 0x01	; 1
     d94:	8c e2       	ldi	r24, 0x2C	; 44
     d96:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <M_Dio_PinMode>
     d9a:	61 e0       	ldi	r22, 0x01	; 1
     d9c:	8d e2       	ldi	r24, 0x2D	; 45
     d9e:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <M_Dio_PinMode>
     da2:	61 e0       	ldi	r22, 0x01	; 1
     da4:	83 e2       	ldi	r24, 0x23	; 35
     da6:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <M_Dio_PinMode>
     daa:	61 e0       	ldi	r22, 0x01	; 1
     dac:	82 e2       	ldi	r24, 0x22	; 34
     dae:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <M_Dio_PinMode>
     db2:	61 e0       	ldi	r22, 0x01	; 1
     db4:	81 e2       	ldi	r24, 0x21	; 33
     db6:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <M_Dio_PinMode>
     dba:	61 e0       	ldi	r22, 0x01	; 1
     dbc:	84 e2       	ldi	r24, 0x24	; 36
     dbe:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <M_Dio_PinMode>
     dc2:	08 95       	ret

00000dc4 <H_H_Bridge_CH1_EN>:
     dc4:	61 e0       	ldi	r22, 0x01	; 1
     dc6:	8c e2       	ldi	r24, 0x2C	; 44
     dc8:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
     dcc:	61 e0       	ldi	r22, 0x01	; 1
     dce:	83 e2       	ldi	r24, 0x23	; 35
     dd0:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
     dd4:	62 e0       	ldi	r22, 0x02	; 2
     dd6:	82 e2       	ldi	r24, 0x22	; 34
     dd8:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
     ddc:	08 95       	ret

00000dde <H_H_Bridge_CH1_Break>:
     dde:	62 e0       	ldi	r22, 0x02	; 2
     de0:	8c e2       	ldi	r24, 0x2C	; 44
     de2:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
     de6:	62 e0       	ldi	r22, 0x02	; 2
     de8:	83 e2       	ldi	r24, 0x23	; 35
     dea:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
     dee:	62 e0       	ldi	r22, 0x02	; 2
     df0:	82 e2       	ldi	r24, 0x22	; 34
     df2:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
     df6:	08 95       	ret

00000df8 <H_KeyPad_Init>:
 */ 
#include "KeyPad.h"

void H_KeyPad_Init(void)
{
	M_Dio_PinMode(KEYPAD_R0_PIN,OUTPUT);
     df8:	61 e0       	ldi	r22, 0x01	; 1
     dfa:	88 e1       	ldi	r24, 0x18	; 24
     dfc:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R1_PIN,OUTPUT);
     e00:	61 e0       	ldi	r22, 0x01	; 1
     e02:	89 e1       	ldi	r24, 0x19	; 25
     e04:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R2_PIN,OUTPUT);
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	8a e1       	ldi	r24, 0x1A	; 26
     e0c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R3_PIN,OUTPUT);
     e10:	61 e0       	ldi	r22, 0x01	; 1
     e12:	8b e1       	ldi	r24, 0x1B	; 27
     e14:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <M_Dio_PinMode>
	
	M_Dio_PinMode(KEYPAD_C0_PIN,INPUT);
     e18:	62 e0       	ldi	r22, 0x02	; 2
     e1a:	8e e1       	ldi	r24, 0x1E	; 30
     e1c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C1_PIN,INPUT);
     e20:	62 e0       	ldi	r22, 0x02	; 2
     e22:	8f e1       	ldi	r24, 0x1F	; 31
     e24:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C2_PIN,INPUT);
     e28:	62 e0       	ldi	r22, 0x02	; 2
     e2a:	80 e2       	ldi	r24, 0x20	; 32
     e2c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C3_PIN,INPUT);
     e30:	62 e0       	ldi	r22, 0x02	; 2
     e32:	81 e2       	ldi	r24, 0x21	; 33
     e34:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <M_Dio_PinMode>
	
	M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH);
     e38:	61 e0       	ldi	r22, 0x01	; 1
     e3a:	88 e1       	ldi	r24, 0x18	; 24
     e3c:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH);
     e40:	61 e0       	ldi	r22, 0x01	; 1
     e42:	89 e1       	ldi	r24, 0x19	; 25
     e44:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH);
     e48:	61 e0       	ldi	r22, 0x01	; 1
     e4a:	8a e1       	ldi	r24, 0x1A	; 26
     e4c:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH);
     e50:	61 e0       	ldi	r22, 0x01	; 1
     e52:	8b e1       	ldi	r24, 0x1B	; 27
     e54:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
	
	M_Dio_PinPullRes(KEYPAD_C0_PIN,ENABLE);
     e58:	61 e0       	ldi	r22, 0x01	; 1
     e5a:	8e e1       	ldi	r24, 0x1E	; 30
     e5c:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <M_Dio_PinPullRes>
	M_Dio_PinPullRes(KEYPAD_C1_PIN,ENABLE);
     e60:	61 e0       	ldi	r22, 0x01	; 1
     e62:	8f e1       	ldi	r24, 0x1F	; 31
     e64:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <M_Dio_PinPullRes>
	M_Dio_PinPullRes(KEYPAD_C2_PIN,ENABLE);
     e68:	61 e0       	ldi	r22, 0x01	; 1
     e6a:	80 e2       	ldi	r24, 0x20	; 32
     e6c:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <M_Dio_PinPullRes>
	M_Dio_PinPullRes(KEYPAD_C3_PIN,ENABLE);
     e70:	61 e0       	ldi	r22, 0x01	; 1
     e72:	81 e2       	ldi	r24, 0x21	; 33
     e74:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <M_Dio_PinPullRes>
     e78:	08 95       	ret

00000e7a <H_KeyPad_Read>:


}
u8 H_KeyPad_Read(void)
{
     e7a:	ff 92       	push	r15
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	60 97       	sbiw	r28, 0x10	; 16
     e8a:	0f b6       	in	r0, 0x3f	; 63
     e8c:	f8 94       	cli
     e8e:	de bf       	out	0x3e, r29	; 62
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8_Arr[4][4]={{'1','2','3','A'},
     e94:	80 e1       	ldi	r24, 0x10	; 16
     e96:	e0 e6       	ldi	r30, 0x60	; 96
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	de 01       	movw	r26, r28
     e9c:	11 96       	adiw	r26, 0x01	; 1
     e9e:	01 90       	ld	r0, Z+
     ea0:	0d 92       	st	X+, r0
     ea2:	8a 95       	dec	r24
     ea4:	e1 f7       	brne	.-8      	; 0xe9e <H_KeyPad_Read+0x24>
		                   {'*','0','=','D'}};
	u8 Local_u8_Reading = KEYPAD_RELEASED ;
	u8 Local_u8_Value = 0 ;
	u8 Local_u8_Row = 0 ;
	u8 Local_u8_Col = 0 ;
	for(Local_u8_Row=KEYPAD_R0_PIN;Local_u8_Row<=KEYPAD_R3_PIN;Local_u8_Row++)
     ea6:	08 e1       	ldi	r16, 0x18	; 24
	u8 Local_u8_Arr[4][4]={{'1','2','3','A'},
		                   {'4','5','6','B'},
		                   {'7','8','9','C'},
		                   {'*','0','=','D'}};
	u8 Local_u8_Reading = KEYPAD_RELEASED ;
	u8 Local_u8_Value = 0 ;
     ea8:	f1 2c       	mov	r15, r1
	u8 Local_u8_Row = 0 ;
	u8 Local_u8_Col = 0 ;
	for(Local_u8_Row=KEYPAD_R0_PIN;Local_u8_Row<=KEYPAD_R3_PIN;Local_u8_Row++)
     eaa:	3b c0       	rjmp	.+118    	; 0xf22 <H_KeyPad_Read+0xa8>
	{
		M_Dio_PinWrite(Local_u8_Row,LOW);
     eac:	62 e0       	ldi	r22, 0x02	; 2
     eae:	80 2f       	mov	r24, r16
     eb0:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
		for(Local_u8_Col = KEYPAD_C0_PIN;Local_u8_Col<=KEYPAD_C3_PIN;Local_u8_Col++)
     eb4:	1e e1       	ldi	r17, 0x1E	; 30
     eb6:	2e c0       	rjmp	.+92     	; 0xf14 <H_KeyPad_Read+0x9a>
		{
			Local_u8_Reading= M_Dio_PinRead(Local_u8_Col);
     eb8:	81 2f       	mov	r24, r17
     eba:	0e 94 06 0b 	call	0x160c	; 0x160c <M_Dio_PinRead>
			if(Local_u8_Reading == KEYPAD_PRESSED)
     ebe:	81 11       	cpse	r24, r1
     ec0:	28 c0       	rjmp	.+80     	; 0xf12 <H_KeyPad_Read+0x98>
     ec2:	2f ef       	ldi	r18, 0xFF	; 255
     ec4:	40 e7       	ldi	r20, 0x70	; 112
     ec6:	52 e0       	ldi	r21, 0x02	; 2
     ec8:	21 50       	subi	r18, 0x01	; 1
     eca:	40 40       	sbci	r20, 0x00	; 0
     ecc:	50 40       	sbci	r21, 0x00	; 0
     ece:	e1 f7       	brne	.-8      	; 0xec8 <H_KeyPad_Read+0x4e>
     ed0:	00 c0       	rjmp	.+0      	; 0xed2 <H_KeyPad_Read+0x58>
     ed2:	00 00       	nop
			{
				_delay_ms(KEYPAD_DEBOUNCING_TIME);
				if(M_Dio_PinRead(Local_u8_Col) == KEYPAD_PRESSED)
     ed4:	81 2f       	mov	r24, r17
     ed6:	0e 94 06 0b 	call	0x160c	; 0x160c <M_Dio_PinRead>
     eda:	81 11       	cpse	r24, r1
     edc:	1a c0       	rjmp	.+52     	; 0xf12 <H_KeyPad_Read+0x98>
				{
					while(M_Dio_PinRead(Local_u8_Col) == KEYPAD_PRESSED);//remove it if u want it to write reapidly
     ede:	81 2f       	mov	r24, r17
     ee0:	0e 94 06 0b 	call	0x160c	; 0x160c <M_Dio_PinRead>
     ee4:	88 23       	and	r24, r24
     ee6:	d9 f3       	breq	.-10     	; 0xede <H_KeyPad_Read+0x64>
							Local_u8_Value = Local_u8_Arr[Local_u8_Row - KEYPAD_R0_PIN][Local_u8_Col - KEYPAD_C0_PIN];
     ee8:	80 2f       	mov	r24, r16
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	48 97       	sbiw	r24, 0x18	; 24
     eee:	21 2f       	mov	r18, r17
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	2e 51       	subi	r18, 0x1E	; 30
     ef4:	31 09       	sbc	r19, r1
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	41 e0       	ldi	r20, 0x01	; 1
     f00:	50 e0       	ldi	r21, 0x00	; 0
     f02:	4c 0f       	add	r20, r28
     f04:	5d 1f       	adc	r21, r29
     f06:	84 0f       	add	r24, r20
     f08:	95 1f       	adc	r25, r21
     f0a:	fc 01       	movw	r30, r24
     f0c:	e2 0f       	add	r30, r18
     f0e:	f3 1f       	adc	r31, r19
     f10:	f0 80       	ld	r15, Z
	u8 Local_u8_Row = 0 ;
	u8 Local_u8_Col = 0 ;
	for(Local_u8_Row=KEYPAD_R0_PIN;Local_u8_Row<=KEYPAD_R3_PIN;Local_u8_Row++)
	{
		M_Dio_PinWrite(Local_u8_Row,LOW);
		for(Local_u8_Col = KEYPAD_C0_PIN;Local_u8_Col<=KEYPAD_C3_PIN;Local_u8_Col++)
     f12:	1f 5f       	subi	r17, 0xFF	; 255
     f14:	12 32       	cpi	r17, 0x22	; 34
     f16:	80 f2       	brcs	.-96     	; 0xeb8 <H_KeyPad_Read+0x3e>
				
			}

		}

		M_Dio_PinWrite(Local_u8_Row,HIGH);
     f18:	61 e0       	ldi	r22, 0x01	; 1
     f1a:	80 2f       	mov	r24, r16
     f1c:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
		                   {'*','0','=','D'}};
	u8 Local_u8_Reading = KEYPAD_RELEASED ;
	u8 Local_u8_Value = 0 ;
	u8 Local_u8_Row = 0 ;
	u8 Local_u8_Col = 0 ;
	for(Local_u8_Row=KEYPAD_R0_PIN;Local_u8_Row<=KEYPAD_R3_PIN;Local_u8_Row++)
     f20:	0f 5f       	subi	r16, 0xFF	; 255
     f22:	0c 31       	cpi	r16, 0x1C	; 28
     f24:	18 f2       	brcs	.-122    	; 0xeac <H_KeyPad_Read+0x32>

		M_Dio_PinWrite(Local_u8_Row,HIGH);
	}
	
	return Local_u8_Value;  // if the user click return 0 otherwise return 1
     f26:	8f 2d       	mov	r24, r15
     f28:	60 96       	adiw	r28, 0x10	; 16
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	cd bf       	out	0x3d, r28	; 61
     f34:	df 91       	pop	r29
     f36:	cf 91       	pop	r28
     f38:	1f 91       	pop	r17
     f3a:	0f 91       	pop	r16
     f3c:	ff 90       	pop	r15
     f3e:	08 95       	ret

00000f40 <H_Lcd_WriteCharacter>:
     f40:	cf 93       	push	r28
     f42:	c8 2f       	mov	r28, r24
     f44:	61 e0       	ldi	r22, 0x01	; 1
     f46:	85 e1       	ldi	r24, 0x15	; 21
     f48:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
     f4c:	8b b3       	in	r24, 0x1b	; 27
     f4e:	9c 2f       	mov	r25, r28
     f50:	90 7f       	andi	r25, 0xF0	; 240
     f52:	8f 70       	andi	r24, 0x0F	; 15
     f54:	89 2b       	or	r24, r25
     f56:	8b bb       	out	0x1b, r24	; 27
     f58:	61 e0       	ldi	r22, 0x01	; 1
     f5a:	8e e2       	ldi	r24, 0x2E	; 46
     f5c:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
     f60:	8f e9       	ldi	r24, 0x9F	; 159
     f62:	9f e0       	ldi	r25, 0x0F	; 15
     f64:	01 97       	sbiw	r24, 0x01	; 1
     f66:	f1 f7       	brne	.-4      	; 0xf64 <H_Lcd_WriteCharacter+0x24>
     f68:	00 c0       	rjmp	.+0      	; 0xf6a <H_Lcd_WriteCharacter+0x2a>
     f6a:	00 00       	nop
     f6c:	62 e0       	ldi	r22, 0x02	; 2
     f6e:	8e e2       	ldi	r24, 0x2E	; 46
     f70:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
     f74:	8f e1       	ldi	r24, 0x1F	; 31
     f76:	9e e4       	ldi	r25, 0x4E	; 78
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	f1 f7       	brne	.-4      	; 0xf78 <H_Lcd_WriteCharacter+0x38>
     f7c:	00 c0       	rjmp	.+0      	; 0xf7e <H_Lcd_WriteCharacter+0x3e>
     f7e:	00 00       	nop
     f80:	20 e1       	ldi	r18, 0x10	; 16
     f82:	c2 9f       	mul	r28, r18
     f84:	c0 01       	movw	r24, r0
     f86:	11 24       	eor	r1, r1
     f88:	9b b3       	in	r25, 0x1b	; 27
     f8a:	9f 70       	andi	r25, 0x0F	; 15
     f8c:	89 2b       	or	r24, r25
     f8e:	8b bb       	out	0x1b, r24	; 27
     f90:	61 e0       	ldi	r22, 0x01	; 1
     f92:	8e e2       	ldi	r24, 0x2E	; 46
     f94:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
     f98:	8f e9       	ldi	r24, 0x9F	; 159
     f9a:	9f e0       	ldi	r25, 0x0F	; 15
     f9c:	01 97       	sbiw	r24, 0x01	; 1
     f9e:	f1 f7       	brne	.-4      	; 0xf9c <H_Lcd_WriteCharacter+0x5c>
     fa0:	00 c0       	rjmp	.+0      	; 0xfa2 <H_Lcd_WriteCharacter+0x62>
     fa2:	00 00       	nop
     fa4:	62 e0       	ldi	r22, 0x02	; 2
     fa6:	8e e2       	ldi	r24, 0x2E	; 46
     fa8:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
     fac:	8f e1       	ldi	r24, 0x1F	; 31
     fae:	9e e4       	ldi	r25, 0x4E	; 78
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	f1 f7       	brne	.-4      	; 0xfb0 <H_Lcd_WriteCharacter+0x70>
     fb4:	00 c0       	rjmp	.+0      	; 0xfb6 <H_Lcd_WriteCharacter+0x76>
     fb6:	00 00       	nop
     fb8:	cf 91       	pop	r28
     fba:	08 95       	ret

00000fbc <H_Lcd_WriteCommand>:
     fbc:	cf 93       	push	r28
     fbe:	c8 2f       	mov	r28, r24
     fc0:	62 e0       	ldi	r22, 0x02	; 2
     fc2:	85 e1       	ldi	r24, 0x15	; 21
     fc4:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
     fc8:	8b b3       	in	r24, 0x1b	; 27
     fca:	9c 2f       	mov	r25, r28
     fcc:	90 7f       	andi	r25, 0xF0	; 240
     fce:	8f 70       	andi	r24, 0x0F	; 15
     fd0:	89 2b       	or	r24, r25
     fd2:	8b bb       	out	0x1b, r24	; 27
     fd4:	61 e0       	ldi	r22, 0x01	; 1
     fd6:	8e e2       	ldi	r24, 0x2E	; 46
     fd8:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
     fdc:	8f e9       	ldi	r24, 0x9F	; 159
     fde:	9f e0       	ldi	r25, 0x0F	; 15
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	f1 f7       	brne	.-4      	; 0xfe0 <H_Lcd_WriteCommand+0x24>
     fe4:	00 c0       	rjmp	.+0      	; 0xfe6 <H_Lcd_WriteCommand+0x2a>
     fe6:	00 00       	nop
     fe8:	62 e0       	ldi	r22, 0x02	; 2
     fea:	8e e2       	ldi	r24, 0x2E	; 46
     fec:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
     ff0:	8f e1       	ldi	r24, 0x1F	; 31
     ff2:	9e e4       	ldi	r25, 0x4E	; 78
     ff4:	01 97       	sbiw	r24, 0x01	; 1
     ff6:	f1 f7       	brne	.-4      	; 0xff4 <H_Lcd_WriteCommand+0x38>
     ff8:	00 c0       	rjmp	.+0      	; 0xffa <H_Lcd_WriteCommand+0x3e>
     ffa:	00 00       	nop
     ffc:	20 e1       	ldi	r18, 0x10	; 16
     ffe:	c2 9f       	mul	r28, r18
    1000:	c0 01       	movw	r24, r0
    1002:	11 24       	eor	r1, r1
    1004:	9b b3       	in	r25, 0x1b	; 27
    1006:	9f 70       	andi	r25, 0x0F	; 15
    1008:	89 2b       	or	r24, r25
    100a:	8b bb       	out	0x1b, r24	; 27
    100c:	61 e0       	ldi	r22, 0x01	; 1
    100e:	8e e2       	ldi	r24, 0x2E	; 46
    1010:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
    1014:	8f e9       	ldi	r24, 0x9F	; 159
    1016:	9f e0       	ldi	r25, 0x0F	; 15
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	f1 f7       	brne	.-4      	; 0x1018 <H_Lcd_WriteCommand+0x5c>
    101c:	00 c0       	rjmp	.+0      	; 0x101e <H_Lcd_WriteCommand+0x62>
    101e:	00 00       	nop
    1020:	62 e0       	ldi	r22, 0x02	; 2
    1022:	8e e2       	ldi	r24, 0x2E	; 46
    1024:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
    1028:	8f e1       	ldi	r24, 0x1F	; 31
    102a:	9e e4       	ldi	r25, 0x4E	; 78
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	f1 f7       	brne	.-4      	; 0x102c <H_Lcd_WriteCommand+0x70>
    1030:	00 c0       	rjmp	.+0      	; 0x1032 <H_Lcd_WriteCommand+0x76>
    1032:	00 00       	nop
    1034:	cf 91       	pop	r28
    1036:	08 95       	ret

00001038 <H_Lcd_Init>:
    1038:	61 e0       	ldi	r22, 0x01	; 1
    103a:	8e e0       	ldi	r24, 0x0E	; 14
    103c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <M_Dio_PinMode>
    1040:	61 e0       	ldi	r22, 0x01	; 1
    1042:	8f e0       	ldi	r24, 0x0F	; 15
    1044:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <M_Dio_PinMode>
    1048:	61 e0       	ldi	r22, 0x01	; 1
    104a:	80 e1       	ldi	r24, 0x10	; 16
    104c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <M_Dio_PinMode>
    1050:	61 e0       	ldi	r22, 0x01	; 1
    1052:	81 e1       	ldi	r24, 0x11	; 17
    1054:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <M_Dio_PinMode>
    1058:	61 e0       	ldi	r22, 0x01	; 1
    105a:	85 e1       	ldi	r24, 0x15	; 21
    105c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <M_Dio_PinMode>
    1060:	61 e0       	ldi	r22, 0x01	; 1
    1062:	8e e2       	ldi	r24, 0x2E	; 46
    1064:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <M_Dio_PinMode>
    1068:	61 e0       	ldi	r22, 0x01	; 1
    106a:	86 e1       	ldi	r24, 0x16	; 22
    106c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <M_Dio_PinMode>
    1070:	62 e0       	ldi	r22, 0x02	; 2
    1072:	86 e1       	ldi	r24, 0x16	; 22
    1074:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
    1078:	2f ef       	ldi	r18, 0xFF	; 255
    107a:	83 ed       	ldi	r24, 0xD3	; 211
    107c:	90 e3       	ldi	r25, 0x30	; 48
    107e:	21 50       	subi	r18, 0x01	; 1
    1080:	80 40       	sbci	r24, 0x00	; 0
    1082:	90 40       	sbci	r25, 0x00	; 0
    1084:	e1 f7       	brne	.-8      	; 0x107e <H_Lcd_Init+0x46>
    1086:	00 c0       	rjmp	.+0      	; 0x1088 <H_Lcd_Init+0x50>
    1088:	00 00       	nop
    108a:	83 e3       	ldi	r24, 0x33	; 51
    108c:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_WriteCommand>
    1090:	82 e3       	ldi	r24, 0x32	; 50
    1092:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_WriteCommand>
    1096:	88 e2       	ldi	r24, 0x28	; 40
    1098:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_WriteCommand>
    109c:	8c e0       	ldi	r24, 0x0C	; 12
    109e:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_WriteCommand>
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_WriteCommand>
    10a8:	82 e0       	ldi	r24, 0x02	; 2
    10aa:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_WriteCommand>
    10ae:	08 95       	ret

000010b0 <H_Lcd_WriteString>:
    10b0:	0f 93       	push	r16
    10b2:	1f 93       	push	r17
    10b4:	cf 93       	push	r28
    10b6:	8c 01       	movw	r16, r24
    10b8:	c0 e0       	ldi	r28, 0x00	; 0
    10ba:	03 c0       	rjmp	.+6      	; 0x10c2 <H_Lcd_WriteString+0x12>
    10bc:	0e 94 a0 07 	call	0xf40	; 0xf40 <H_Lcd_WriteCharacter>
    10c0:	cf 5f       	subi	r28, 0xFF	; 255
    10c2:	f8 01       	movw	r30, r16
    10c4:	ec 0f       	add	r30, r28
    10c6:	f1 1d       	adc	r31, r1
    10c8:	80 81       	ld	r24, Z
    10ca:	81 11       	cpse	r24, r1
    10cc:	f7 cf       	rjmp	.-18     	; 0x10bc <H_Lcd_WriteString+0xc>
    10ce:	cf 91       	pop	r28
    10d0:	1f 91       	pop	r17
    10d2:	0f 91       	pop	r16
    10d4:	08 95       	ret

000010d6 <H_Lcd_Clr>:
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_WriteCommand>
    10dc:	08 95       	ret

000010de <H_Lcd_GoTo>:
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <H_Lcd_GoTo+0x6>
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
    10e8:	90 e8       	ldi	r25, 0x80	; 128
    10ea:	99 83       	std	Y+1, r25	; 0x01
    10ec:	90 ec       	ldi	r25, 0xC0	; 192
    10ee:	9a 83       	std	Y+2, r25	; 0x02
    10f0:	e1 e0       	ldi	r30, 0x01	; 1
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	ec 0f       	add	r30, r28
    10f6:	fd 1f       	adc	r31, r29
    10f8:	e8 0f       	add	r30, r24
    10fa:	f1 1d       	adc	r31, r1
    10fc:	80 81       	ld	r24, Z
    10fe:	86 0f       	add	r24, r22
    1100:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_WriteCommand>
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	08 95       	ret

0000110e <H_Led_Init>:
    110e:	82 30       	cpi	r24, 0x02	; 2
    1110:	a9 f0       	breq	.+42     	; 0x113c <H_Led_Init+0x2e>
    1112:	28 f4       	brcc	.+10     	; 0x111e <H_Led_Init+0x10>
    1114:	88 23       	and	r24, r24
    1116:	41 f0       	breq	.+16     	; 0x1128 <H_Led_Init+0x1a>
    1118:	81 30       	cpi	r24, 0x01	; 1
    111a:	59 f0       	breq	.+22     	; 0x1132 <H_Led_Init+0x24>
    111c:	08 95       	ret
    111e:	83 30       	cpi	r24, 0x03	; 3
    1120:	91 f0       	breq	.+36     	; 0x1146 <H_Led_Init+0x38>
    1122:	84 30       	cpi	r24, 0x04	; 4
    1124:	a9 f0       	breq	.+42     	; 0x1150 <H_Led_Init+0x42>
    1126:	08 95       	ret
    1128:	61 e0       	ldi	r22, 0x01	; 1
    112a:	84 e2       	ldi	r24, 0x24	; 36
    112c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <M_Dio_PinMode>
    1130:	08 95       	ret
    1132:	61 e0       	ldi	r22, 0x01	; 1
    1134:	85 e2       	ldi	r24, 0x25	; 37
    1136:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <M_Dio_PinMode>
    113a:	08 95       	ret
    113c:	61 e0       	ldi	r22, 0x01	; 1
    113e:	8b e2       	ldi	r24, 0x2B	; 43
    1140:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <M_Dio_PinMode>
    1144:	08 95       	ret
    1146:	61 e0       	ldi	r22, 0x01	; 1
    1148:	84 e1       	ldi	r24, 0x14	; 20
    114a:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <M_Dio_PinMode>
    114e:	08 95       	ret
    1150:	61 e0       	ldi	r22, 0x01	; 1
    1152:	8d e2       	ldi	r24, 0x2D	; 45
    1154:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <M_Dio_PinMode>
    1158:	08 95       	ret

0000115a <H_Led_On>:
    115a:	82 30       	cpi	r24, 0x02	; 2
    115c:	a9 f0       	breq	.+42     	; 0x1188 <H_Led_On+0x2e>
    115e:	28 f4       	brcc	.+10     	; 0x116a <H_Led_On+0x10>
    1160:	88 23       	and	r24, r24
    1162:	41 f0       	breq	.+16     	; 0x1174 <H_Led_On+0x1a>
    1164:	81 30       	cpi	r24, 0x01	; 1
    1166:	59 f0       	breq	.+22     	; 0x117e <H_Led_On+0x24>
    1168:	08 95       	ret
    116a:	83 30       	cpi	r24, 0x03	; 3
    116c:	91 f0       	breq	.+36     	; 0x1192 <H_Led_On+0x38>
    116e:	84 30       	cpi	r24, 0x04	; 4
    1170:	a9 f0       	breq	.+42     	; 0x119c <H_Led_On+0x42>
    1172:	08 95       	ret
    1174:	61 e0       	ldi	r22, 0x01	; 1
    1176:	84 e2       	ldi	r24, 0x24	; 36
    1178:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
    117c:	08 95       	ret
    117e:	61 e0       	ldi	r22, 0x01	; 1
    1180:	85 e2       	ldi	r24, 0x25	; 37
    1182:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
    1186:	08 95       	ret
    1188:	61 e0       	ldi	r22, 0x01	; 1
    118a:	8b e2       	ldi	r24, 0x2B	; 43
    118c:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
    1190:	08 95       	ret
    1192:	61 e0       	ldi	r22, 0x01	; 1
    1194:	84 e1       	ldi	r24, 0x14	; 20
    1196:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
    119a:	08 95       	ret
    119c:	61 e0       	ldi	r22, 0x01	; 1
    119e:	8d e2       	ldi	r24, 0x2D	; 45
    11a0:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
    11a4:	08 95       	ret

000011a6 <H_Led_Off>:
    11a6:	82 30       	cpi	r24, 0x02	; 2
    11a8:	a9 f0       	breq	.+42     	; 0x11d4 <H_Led_Off+0x2e>
    11aa:	28 f4       	brcc	.+10     	; 0x11b6 <H_Led_Off+0x10>
    11ac:	88 23       	and	r24, r24
    11ae:	41 f0       	breq	.+16     	; 0x11c0 <H_Led_Off+0x1a>
    11b0:	81 30       	cpi	r24, 0x01	; 1
    11b2:	59 f0       	breq	.+22     	; 0x11ca <H_Led_Off+0x24>
    11b4:	08 95       	ret
    11b6:	83 30       	cpi	r24, 0x03	; 3
    11b8:	91 f0       	breq	.+36     	; 0x11de <H_Led_Off+0x38>
    11ba:	84 30       	cpi	r24, 0x04	; 4
    11bc:	a9 f0       	breq	.+42     	; 0x11e8 <H_Led_Off+0x42>
    11be:	08 95       	ret
    11c0:	62 e0       	ldi	r22, 0x02	; 2
    11c2:	84 e2       	ldi	r24, 0x24	; 36
    11c4:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
    11c8:	08 95       	ret
    11ca:	62 e0       	ldi	r22, 0x02	; 2
    11cc:	85 e2       	ldi	r24, 0x25	; 37
    11ce:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
    11d2:	08 95       	ret
    11d4:	62 e0       	ldi	r22, 0x02	; 2
    11d6:	8b e2       	ldi	r24, 0x2B	; 43
    11d8:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
    11dc:	08 95       	ret
    11de:	62 e0       	ldi	r22, 0x02	; 2
    11e0:	84 e1       	ldi	r24, 0x14	; 20
    11e2:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
    11e6:	08 95       	ret
    11e8:	62 e0       	ldi	r22, 0x02	; 2
    11ea:	8d e2       	ldi	r24, 0x2D	; 45
    11ec:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <M_Dio_PinWrite>
    11f0:	08 95       	ret

000011f2 <M_ADC_INIT>:
    11f2:	87 b1       	in	r24, 0x07	; 7
    11f4:	8f 77       	andi	r24, 0x7F	; 127
    11f6:	87 b9       	out	0x07, r24	; 7
    11f8:	87 b1       	in	r24, 0x07	; 7
    11fa:	80 64       	ori	r24, 0x40	; 64
    11fc:	87 b9       	out	0x07, r24	; 7
    11fe:	87 b1       	in	r24, 0x07	; 7
    1200:	8f 7d       	andi	r24, 0xDF	; 223
    1202:	87 b9       	out	0x07, r24	; 7
    1204:	86 b1       	in	r24, 0x06	; 6
    1206:	88 7f       	andi	r24, 0xF8	; 248
    1208:	86 b9       	out	0x06, r24	; 6
    120a:	86 b1       	in	r24, 0x06	; 6
    120c:	87 60       	ori	r24, 0x07	; 7
    120e:	86 b9       	out	0x06, r24	; 6
    1210:	86 b1       	in	r24, 0x06	; 6
    1212:	80 68       	ori	r24, 0x80	; 128
    1214:	86 b9       	out	0x06, r24	; 6
    1216:	08 95       	ret

00001218 <M_ADC_StartConversionAsynch>:
    1218:	61 15       	cp	r22, r1
    121a:	71 05       	cpc	r23, r1
    121c:	01 f1       	breq	.+64     	; 0x125e <M_ADC_StartConversionAsynch+0x46>
    121e:	41 15       	cp	r20, r1
    1220:	51 05       	cpc	r21, r1
    1222:	f9 f0       	breq	.+62     	; 0x1262 <M_ADC_StartConversionAsynch+0x4a>
    1224:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <Global_ADCBusyFlag>
    1228:	91 11       	cpse	r25, r1
    122a:	1d c0       	rjmp	.+58     	; 0x1266 <M_ADC_StartConversionAsynch+0x4e>
    122c:	91 e0       	ldi	r25, 0x01	; 1
    122e:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <Global_ADCBusyFlag>
    1232:	70 93 1a 03 	sts	0x031A, r23	; 0x80031a <Global_PointerResult+0x1>
    1236:	60 93 19 03 	sts	0x0319, r22	; 0x800319 <Global_PointerResult>
    123a:	50 93 18 03 	sts	0x0318, r21	; 0x800318 <Global_NotificationFunc+0x1>
    123e:	40 93 17 03 	sts	0x0317, r20	; 0x800317 <Global_NotificationFunc>
    1242:	97 b1       	in	r25, 0x07	; 7
    1244:	90 7e       	andi	r25, 0xE0	; 224
    1246:	97 b9       	out	0x07, r25	; 7
    1248:	97 b1       	in	r25, 0x07	; 7
    124a:	89 2b       	or	r24, r25
    124c:	87 b9       	out	0x07, r24	; 7
    124e:	86 b1       	in	r24, 0x06	; 6
    1250:	80 64       	ori	r24, 0x40	; 64
    1252:	86 b9       	out	0x06, r24	; 6
    1254:	86 b1       	in	r24, 0x06	; 6
    1256:	88 60       	ori	r24, 0x08	; 8
    1258:	86 b9       	out	0x06, r24	; 6
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	08 95       	ret
    125e:	83 e0       	ldi	r24, 0x03	; 3
    1260:	08 95       	ret
    1262:	83 e0       	ldi	r24, 0x03	; 3
    1264:	08 95       	ret
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	08 95       	ret

0000126a <__vector_16>:
    126a:	1f 92       	push	r1
    126c:	0f 92       	push	r0
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	0f 92       	push	r0
    1272:	11 24       	eor	r1, r1
    1274:	2f 93       	push	r18
    1276:	3f 93       	push	r19
    1278:	4f 93       	push	r20
    127a:	5f 93       	push	r21
    127c:	6f 93       	push	r22
    127e:	7f 93       	push	r23
    1280:	8f 93       	push	r24
    1282:	9f 93       	push	r25
    1284:	af 93       	push	r26
    1286:	bf 93       	push	r27
    1288:	ef 93       	push	r30
    128a:	ff 93       	push	r31
    128c:	e0 91 19 03 	lds	r30, 0x0319	; 0x800319 <Global_PointerResult>
    1290:	f0 91 1a 03 	lds	r31, 0x031A	; 0x80031a <Global_PointerResult+0x1>
    1294:	84 b1       	in	r24, 0x04	; 4
    1296:	95 b1       	in	r25, 0x05	; 5
    1298:	91 83       	std	Z+1, r25	; 0x01
    129a:	80 83       	st	Z, r24
    129c:	86 b1       	in	r24, 0x06	; 6
    129e:	87 7f       	andi	r24, 0xF7	; 247
    12a0:	86 b9       	out	0x06, r24	; 6
    12a2:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <Global_ADCBusyFlag>
    12a6:	e0 91 17 03 	lds	r30, 0x0317	; 0x800317 <Global_NotificationFunc>
    12aa:	f0 91 18 03 	lds	r31, 0x0318	; 0x800318 <Global_NotificationFunc+0x1>
    12ae:	30 97       	sbiw	r30, 0x00	; 0
    12b0:	09 f0       	breq	.+2      	; 0x12b4 <__vector_16+0x4a>
    12b2:	09 95       	icall
    12b4:	ff 91       	pop	r31
    12b6:	ef 91       	pop	r30
    12b8:	bf 91       	pop	r27
    12ba:	af 91       	pop	r26
    12bc:	9f 91       	pop	r25
    12be:	8f 91       	pop	r24
    12c0:	7f 91       	pop	r23
    12c2:	6f 91       	pop	r22
    12c4:	5f 91       	pop	r21
    12c6:	4f 91       	pop	r20
    12c8:	3f 91       	pop	r19
    12ca:	2f 91       	pop	r18
    12cc:	0f 90       	pop	r0
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	0f 90       	pop	r0
    12d2:	1f 90       	pop	r1
    12d4:	18 95       	reti

000012d6 <M_Dio_PinMode>:
    12d6:	9d ec       	ldi	r25, 0xCD	; 205
    12d8:	89 9f       	mul	r24, r25
    12da:	91 2d       	mov	r25, r1
    12dc:	11 24       	eor	r1, r1
    12de:	29 2f       	mov	r18, r25
    12e0:	26 95       	lsr	r18
    12e2:	26 95       	lsr	r18
    12e4:	26 95       	lsr	r18
    12e6:	22 0f       	add	r18, r18
    12e8:	32 2f       	mov	r19, r18
    12ea:	33 0f       	add	r19, r19
    12ec:	33 0f       	add	r19, r19
    12ee:	23 0f       	add	r18, r19
    12f0:	82 1b       	sub	r24, r18
    12f2:	28 2f       	mov	r18, r24
    12f4:	96 95       	lsr	r25
    12f6:	96 95       	lsr	r25
    12f8:	96 95       	lsr	r25
    12fa:	61 30       	cpi	r22, 0x01	; 1
    12fc:	19 f0       	breq	.+6      	; 0x1304 <M_Dio_PinMode+0x2e>
    12fe:	62 30       	cpi	r22, 0x02	; 2
    1300:	c1 f1       	breq	.+112    	; 0x1372 <M_Dio_PinMode+0x9c>
    1302:	08 95       	ret
    1304:	92 30       	cpi	r25, 0x02	; 2
    1306:	a1 f0       	breq	.+40     	; 0x1330 <M_Dio_PinMode+0x5a>
    1308:	18 f4       	brcc	.+6      	; 0x1310 <M_Dio_PinMode+0x3a>
    130a:	91 30       	cpi	r25, 0x01	; 1
    130c:	31 f0       	breq	.+12     	; 0x131a <M_Dio_PinMode+0x44>
    130e:	08 95       	ret
    1310:	93 30       	cpi	r25, 0x03	; 3
    1312:	c9 f0       	breq	.+50     	; 0x1346 <M_Dio_PinMode+0x70>
    1314:	94 30       	cpi	r25, 0x04	; 4
    1316:	11 f1       	breq	.+68     	; 0x135c <M_Dio_PinMode+0x86>
    1318:	08 95       	ret
    131a:	3a b3       	in	r19, 0x1a	; 26
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <M_Dio_PinMode+0x50>
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	2a 95       	dec	r18
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <M_Dio_PinMode+0x4c>
    132a:	83 2b       	or	r24, r19
    132c:	8a bb       	out	0x1a, r24	; 26
    132e:	08 95       	ret
    1330:	37 b3       	in	r19, 0x17	; 23
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 c0       	rjmp	.+4      	; 0x133c <M_Dio_PinMode+0x66>
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	2a 95       	dec	r18
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <M_Dio_PinMode+0x62>
    1340:	83 2b       	or	r24, r19
    1342:	87 bb       	out	0x17, r24	; 23
    1344:	08 95       	ret
    1346:	34 b3       	in	r19, 0x14	; 20
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <M_Dio_PinMode+0x7c>
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	2a 95       	dec	r18
    1354:	e2 f7       	brpl	.-8      	; 0x134e <M_Dio_PinMode+0x78>
    1356:	83 2b       	or	r24, r19
    1358:	84 bb       	out	0x14, r24	; 20
    135a:	08 95       	ret
    135c:	31 b3       	in	r19, 0x11	; 17
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <M_Dio_PinMode+0x92>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	2a 95       	dec	r18
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <M_Dio_PinMode+0x8e>
    136c:	83 2b       	or	r24, r19
    136e:	81 bb       	out	0x11, r24	; 17
    1370:	08 95       	ret
    1372:	92 30       	cpi	r25, 0x02	; 2
    1374:	a9 f0       	breq	.+42     	; 0x13a0 <M_Dio_PinMode+0xca>
    1376:	18 f4       	brcc	.+6      	; 0x137e <M_Dio_PinMode+0xa8>
    1378:	91 30       	cpi	r25, 0x01	; 1
    137a:	31 f0       	breq	.+12     	; 0x1388 <M_Dio_PinMode+0xb2>
    137c:	08 95       	ret
    137e:	93 30       	cpi	r25, 0x03	; 3
    1380:	d9 f0       	breq	.+54     	; 0x13b8 <M_Dio_PinMode+0xe2>
    1382:	94 30       	cpi	r25, 0x04	; 4
    1384:	29 f1       	breq	.+74     	; 0x13d0 <M_Dio_PinMode+0xfa>
    1386:	08 95       	ret
    1388:	3a b3       	in	r19, 0x1a	; 26
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <M_Dio_PinMode+0xbe>
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	2a 95       	dec	r18
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <M_Dio_PinMode+0xba>
    1398:	80 95       	com	r24
    139a:	83 23       	and	r24, r19
    139c:	8a bb       	out	0x1a, r24	; 26
    139e:	08 95       	ret
    13a0:	37 b3       	in	r19, 0x17	; 23
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <M_Dio_PinMode+0xd6>
    13a8:	88 0f       	add	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	2a 95       	dec	r18
    13ae:	e2 f7       	brpl	.-8      	; 0x13a8 <M_Dio_PinMode+0xd2>
    13b0:	80 95       	com	r24
    13b2:	83 23       	and	r24, r19
    13b4:	87 bb       	out	0x17, r24	; 23
    13b6:	08 95       	ret
    13b8:	34 b3       	in	r19, 0x14	; 20
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <M_Dio_PinMode+0xee>
    13c0:	88 0f       	add	r24, r24
    13c2:	99 1f       	adc	r25, r25
    13c4:	2a 95       	dec	r18
    13c6:	e2 f7       	brpl	.-8      	; 0x13c0 <M_Dio_PinMode+0xea>
    13c8:	80 95       	com	r24
    13ca:	83 23       	and	r24, r19
    13cc:	84 bb       	out	0x14, r24	; 20
    13ce:	08 95       	ret
    13d0:	31 b3       	in	r19, 0x11	; 17
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <M_Dio_PinMode+0x106>
    13d8:	88 0f       	add	r24, r24
    13da:	99 1f       	adc	r25, r25
    13dc:	2a 95       	dec	r18
    13de:	e2 f7       	brpl	.-8      	; 0x13d8 <M_Dio_PinMode+0x102>
    13e0:	80 95       	com	r24
    13e2:	83 23       	and	r24, r19
    13e4:	81 bb       	out	0x11, r24	; 17
    13e6:	08 95       	ret

000013e8 <M_Dio_PinPullRes>:
    13e8:	9d ec       	ldi	r25, 0xCD	; 205
    13ea:	89 9f       	mul	r24, r25
    13ec:	91 2d       	mov	r25, r1
    13ee:	11 24       	eor	r1, r1
    13f0:	29 2f       	mov	r18, r25
    13f2:	26 95       	lsr	r18
    13f4:	26 95       	lsr	r18
    13f6:	26 95       	lsr	r18
    13f8:	22 0f       	add	r18, r18
    13fa:	32 2f       	mov	r19, r18
    13fc:	33 0f       	add	r19, r19
    13fe:	33 0f       	add	r19, r19
    1400:	23 0f       	add	r18, r19
    1402:	82 1b       	sub	r24, r18
    1404:	28 2f       	mov	r18, r24
    1406:	96 95       	lsr	r25
    1408:	96 95       	lsr	r25
    140a:	96 95       	lsr	r25
    140c:	61 30       	cpi	r22, 0x01	; 1
    140e:	19 f0       	breq	.+6      	; 0x1416 <M_Dio_PinPullRes+0x2e>
    1410:	62 30       	cpi	r22, 0x02	; 2
    1412:	c1 f1       	breq	.+112    	; 0x1484 <M_Dio_PinPullRes+0x9c>
    1414:	08 95       	ret
    1416:	92 30       	cpi	r25, 0x02	; 2
    1418:	a1 f0       	breq	.+40     	; 0x1442 <M_Dio_PinPullRes+0x5a>
    141a:	18 f4       	brcc	.+6      	; 0x1422 <M_Dio_PinPullRes+0x3a>
    141c:	91 30       	cpi	r25, 0x01	; 1
    141e:	31 f0       	breq	.+12     	; 0x142c <M_Dio_PinPullRes+0x44>
    1420:	08 95       	ret
    1422:	93 30       	cpi	r25, 0x03	; 3
    1424:	c9 f0       	breq	.+50     	; 0x1458 <M_Dio_PinPullRes+0x70>
    1426:	94 30       	cpi	r25, 0x04	; 4
    1428:	11 f1       	breq	.+68     	; 0x146e <M_Dio_PinPullRes+0x86>
    142a:	08 95       	ret
    142c:	3b b3       	in	r19, 0x1b	; 27
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <M_Dio_PinPullRes+0x50>
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	2a 95       	dec	r18
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <M_Dio_PinPullRes+0x4c>
    143c:	83 2b       	or	r24, r19
    143e:	8b bb       	out	0x1b, r24	; 27
    1440:	08 95       	ret
    1442:	38 b3       	in	r19, 0x18	; 24
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	02 c0       	rjmp	.+4      	; 0x144e <M_Dio_PinPullRes+0x66>
    144a:	88 0f       	add	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	2a 95       	dec	r18
    1450:	e2 f7       	brpl	.-8      	; 0x144a <M_Dio_PinPullRes+0x62>
    1452:	83 2b       	or	r24, r19
    1454:	88 bb       	out	0x18, r24	; 24
    1456:	08 95       	ret
    1458:	35 b3       	in	r19, 0x15	; 21
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <M_Dio_PinPullRes+0x7c>
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	2a 95       	dec	r18
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <M_Dio_PinPullRes+0x78>
    1468:	83 2b       	or	r24, r19
    146a:	85 bb       	out	0x15, r24	; 21
    146c:	08 95       	ret
    146e:	32 b3       	in	r19, 0x12	; 18
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	02 c0       	rjmp	.+4      	; 0x147a <M_Dio_PinPullRes+0x92>
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	2a 95       	dec	r18
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <M_Dio_PinPullRes+0x8e>
    147e:	83 2b       	or	r24, r19
    1480:	82 bb       	out	0x12, r24	; 18
    1482:	08 95       	ret
    1484:	92 30       	cpi	r25, 0x02	; 2
    1486:	a9 f0       	breq	.+42     	; 0x14b2 <M_Dio_PinPullRes+0xca>
    1488:	18 f4       	brcc	.+6      	; 0x1490 <M_Dio_PinPullRes+0xa8>
    148a:	91 30       	cpi	r25, 0x01	; 1
    148c:	31 f0       	breq	.+12     	; 0x149a <M_Dio_PinPullRes+0xb2>
    148e:	08 95       	ret
    1490:	93 30       	cpi	r25, 0x03	; 3
    1492:	d9 f0       	breq	.+54     	; 0x14ca <M_Dio_PinPullRes+0xe2>
    1494:	94 30       	cpi	r25, 0x04	; 4
    1496:	29 f1       	breq	.+74     	; 0x14e2 <M_Dio_PinPullRes+0xfa>
    1498:	08 95       	ret
    149a:	3b b3       	in	r19, 0x1b	; 27
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <M_Dio_PinPullRes+0xbe>
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	2a 95       	dec	r18
    14a8:	e2 f7       	brpl	.-8      	; 0x14a2 <M_Dio_PinPullRes+0xba>
    14aa:	80 95       	com	r24
    14ac:	83 23       	and	r24, r19
    14ae:	8b bb       	out	0x1b, r24	; 27
    14b0:	08 95       	ret
    14b2:	38 b3       	in	r19, 0x18	; 24
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <M_Dio_PinPullRes+0xd6>
    14ba:	88 0f       	add	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	2a 95       	dec	r18
    14c0:	e2 f7       	brpl	.-8      	; 0x14ba <M_Dio_PinPullRes+0xd2>
    14c2:	80 95       	com	r24
    14c4:	83 23       	and	r24, r19
    14c6:	88 bb       	out	0x18, r24	; 24
    14c8:	08 95       	ret
    14ca:	35 b3       	in	r19, 0x15	; 21
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <M_Dio_PinPullRes+0xee>
    14d2:	88 0f       	add	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	2a 95       	dec	r18
    14d8:	e2 f7       	brpl	.-8      	; 0x14d2 <M_Dio_PinPullRes+0xea>
    14da:	80 95       	com	r24
    14dc:	83 23       	and	r24, r19
    14de:	85 bb       	out	0x15, r24	; 21
    14e0:	08 95       	ret
    14e2:	32 b3       	in	r19, 0x12	; 18
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <M_Dio_PinPullRes+0x106>
    14ea:	88 0f       	add	r24, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	2a 95       	dec	r18
    14f0:	e2 f7       	brpl	.-8      	; 0x14ea <M_Dio_PinPullRes+0x102>
    14f2:	80 95       	com	r24
    14f4:	83 23       	and	r24, r19
    14f6:	82 bb       	out	0x12, r24	; 18
    14f8:	08 95       	ret

000014fa <M_Dio_PinWrite>:
    14fa:	9d ec       	ldi	r25, 0xCD	; 205
    14fc:	89 9f       	mul	r24, r25
    14fe:	91 2d       	mov	r25, r1
    1500:	11 24       	eor	r1, r1
    1502:	29 2f       	mov	r18, r25
    1504:	26 95       	lsr	r18
    1506:	26 95       	lsr	r18
    1508:	26 95       	lsr	r18
    150a:	22 0f       	add	r18, r18
    150c:	32 2f       	mov	r19, r18
    150e:	33 0f       	add	r19, r19
    1510:	33 0f       	add	r19, r19
    1512:	23 0f       	add	r18, r19
    1514:	82 1b       	sub	r24, r18
    1516:	28 2f       	mov	r18, r24
    1518:	96 95       	lsr	r25
    151a:	96 95       	lsr	r25
    151c:	96 95       	lsr	r25
    151e:	61 30       	cpi	r22, 0x01	; 1
    1520:	19 f0       	breq	.+6      	; 0x1528 <M_Dio_PinWrite+0x2e>
    1522:	62 30       	cpi	r22, 0x02	; 2
    1524:	c1 f1       	breq	.+112    	; 0x1596 <M_Dio_PinWrite+0x9c>
    1526:	08 95       	ret
    1528:	92 30       	cpi	r25, 0x02	; 2
    152a:	a1 f0       	breq	.+40     	; 0x1554 <M_Dio_PinWrite+0x5a>
    152c:	18 f4       	brcc	.+6      	; 0x1534 <M_Dio_PinWrite+0x3a>
    152e:	91 30       	cpi	r25, 0x01	; 1
    1530:	31 f0       	breq	.+12     	; 0x153e <M_Dio_PinWrite+0x44>
    1532:	08 95       	ret
    1534:	93 30       	cpi	r25, 0x03	; 3
    1536:	c9 f0       	breq	.+50     	; 0x156a <M_Dio_PinWrite+0x70>
    1538:	94 30       	cpi	r25, 0x04	; 4
    153a:	11 f1       	breq	.+68     	; 0x1580 <M_Dio_PinWrite+0x86>
    153c:	08 95       	ret
    153e:	3b b3       	in	r19, 0x1b	; 27
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	02 c0       	rjmp	.+4      	; 0x154a <M_Dio_PinWrite+0x50>
    1546:	88 0f       	add	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	2a 95       	dec	r18
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <M_Dio_PinWrite+0x4c>
    154e:	83 2b       	or	r24, r19
    1550:	8b bb       	out	0x1b, r24	; 27
    1552:	08 95       	ret
    1554:	38 b3       	in	r19, 0x18	; 24
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <M_Dio_PinWrite+0x66>
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	2a 95       	dec	r18
    1562:	e2 f7       	brpl	.-8      	; 0x155c <M_Dio_PinWrite+0x62>
    1564:	83 2b       	or	r24, r19
    1566:	88 bb       	out	0x18, r24	; 24
    1568:	08 95       	ret
    156a:	35 b3       	in	r19, 0x15	; 21
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <M_Dio_PinWrite+0x7c>
    1572:	88 0f       	add	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	2a 95       	dec	r18
    1578:	e2 f7       	brpl	.-8      	; 0x1572 <M_Dio_PinWrite+0x78>
    157a:	83 2b       	or	r24, r19
    157c:	85 bb       	out	0x15, r24	; 21
    157e:	08 95       	ret
    1580:	32 b3       	in	r19, 0x12	; 18
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	02 c0       	rjmp	.+4      	; 0x158c <M_Dio_PinWrite+0x92>
    1588:	88 0f       	add	r24, r24
    158a:	99 1f       	adc	r25, r25
    158c:	2a 95       	dec	r18
    158e:	e2 f7       	brpl	.-8      	; 0x1588 <M_Dio_PinWrite+0x8e>
    1590:	83 2b       	or	r24, r19
    1592:	82 bb       	out	0x12, r24	; 18
    1594:	08 95       	ret
    1596:	92 30       	cpi	r25, 0x02	; 2
    1598:	a9 f0       	breq	.+42     	; 0x15c4 <M_Dio_PinWrite+0xca>
    159a:	18 f4       	brcc	.+6      	; 0x15a2 <M_Dio_PinWrite+0xa8>
    159c:	91 30       	cpi	r25, 0x01	; 1
    159e:	31 f0       	breq	.+12     	; 0x15ac <M_Dio_PinWrite+0xb2>
    15a0:	08 95       	ret
    15a2:	93 30       	cpi	r25, 0x03	; 3
    15a4:	d9 f0       	breq	.+54     	; 0x15dc <M_Dio_PinWrite+0xe2>
    15a6:	94 30       	cpi	r25, 0x04	; 4
    15a8:	29 f1       	breq	.+74     	; 0x15f4 <M_Dio_PinWrite+0xfa>
    15aa:	08 95       	ret
    15ac:	3b b3       	in	r19, 0x1b	; 27
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <M_Dio_PinWrite+0xbe>
    15b4:	88 0f       	add	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	2a 95       	dec	r18
    15ba:	e2 f7       	brpl	.-8      	; 0x15b4 <M_Dio_PinWrite+0xba>
    15bc:	80 95       	com	r24
    15be:	83 23       	and	r24, r19
    15c0:	8b bb       	out	0x1b, r24	; 27
    15c2:	08 95       	ret
    15c4:	38 b3       	in	r19, 0x18	; 24
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <M_Dio_PinWrite+0xd6>
    15cc:	88 0f       	add	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	2a 95       	dec	r18
    15d2:	e2 f7       	brpl	.-8      	; 0x15cc <M_Dio_PinWrite+0xd2>
    15d4:	80 95       	com	r24
    15d6:	83 23       	and	r24, r19
    15d8:	88 bb       	out	0x18, r24	; 24
    15da:	08 95       	ret
    15dc:	35 b3       	in	r19, 0x15	; 21
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <M_Dio_PinWrite+0xee>
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	2a 95       	dec	r18
    15ea:	e2 f7       	brpl	.-8      	; 0x15e4 <M_Dio_PinWrite+0xea>
    15ec:	80 95       	com	r24
    15ee:	83 23       	and	r24, r19
    15f0:	85 bb       	out	0x15, r24	; 21
    15f2:	08 95       	ret
    15f4:	32 b3       	in	r19, 0x12	; 18
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <M_Dio_PinWrite+0x106>
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	2a 95       	dec	r18
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <M_Dio_PinWrite+0x102>
    1604:	80 95       	com	r24
    1606:	83 23       	and	r24, r19
    1608:	82 bb       	out	0x12, r24	; 18
    160a:	08 95       	ret

0000160c <M_Dio_PinRead>:
    160c:	9d ec       	ldi	r25, 0xCD	; 205
    160e:	89 9f       	mul	r24, r25
    1610:	91 2d       	mov	r25, r1
    1612:	11 24       	eor	r1, r1
    1614:	29 2f       	mov	r18, r25
    1616:	26 95       	lsr	r18
    1618:	26 95       	lsr	r18
    161a:	26 95       	lsr	r18
    161c:	22 0f       	add	r18, r18
    161e:	32 2f       	mov	r19, r18
    1620:	33 0f       	add	r19, r19
    1622:	33 0f       	add	r19, r19
    1624:	23 0f       	add	r18, r19
    1626:	82 1b       	sub	r24, r18
    1628:	28 2f       	mov	r18, r24
    162a:	89 2f       	mov	r24, r25
    162c:	86 95       	lsr	r24
    162e:	86 95       	lsr	r24
    1630:	86 95       	lsr	r24
    1632:	82 30       	cpi	r24, 0x02	; 2
    1634:	91 f0       	breq	.+36     	; 0x165a <M_Dio_PinRead+0x4e>
    1636:	18 f4       	brcc	.+6      	; 0x163e <M_Dio_PinRead+0x32>
    1638:	81 30       	cpi	r24, 0x01	; 1
    163a:	31 f0       	breq	.+12     	; 0x1648 <M_Dio_PinRead+0x3c>
    163c:	29 c0       	rjmp	.+82     	; 0x1690 <M_Dio_PinRead+0x84>
    163e:	83 30       	cpi	r24, 0x03	; 3
    1640:	a9 f0       	breq	.+42     	; 0x166c <M_Dio_PinRead+0x60>
    1642:	84 30       	cpi	r24, 0x04	; 4
    1644:	e1 f0       	breq	.+56     	; 0x167e <M_Dio_PinRead+0x72>
    1646:	24 c0       	rjmp	.+72     	; 0x1690 <M_Dio_PinRead+0x84>
    1648:	89 b3       	in	r24, 0x19	; 25
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <M_Dio_PinRead+0x46>
    164e:	95 95       	asr	r25
    1650:	87 95       	ror	r24
    1652:	2a 95       	dec	r18
    1654:	e2 f7       	brpl	.-8      	; 0x164e <M_Dio_PinRead+0x42>
    1656:	81 70       	andi	r24, 0x01	; 1
    1658:	08 95       	ret
    165a:	86 b3       	in	r24, 0x16	; 22
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <M_Dio_PinRead+0x58>
    1660:	95 95       	asr	r25
    1662:	87 95       	ror	r24
    1664:	2a 95       	dec	r18
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <M_Dio_PinRead+0x54>
    1668:	81 70       	andi	r24, 0x01	; 1
    166a:	08 95       	ret
    166c:	83 b3       	in	r24, 0x13	; 19
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <M_Dio_PinRead+0x6a>
    1672:	95 95       	asr	r25
    1674:	87 95       	ror	r24
    1676:	2a 95       	dec	r18
    1678:	e2 f7       	brpl	.-8      	; 0x1672 <M_Dio_PinRead+0x66>
    167a:	81 70       	andi	r24, 0x01	; 1
    167c:	08 95       	ret
    167e:	80 b3       	in	r24, 0x10	; 16
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <M_Dio_PinRead+0x7c>
    1684:	95 95       	asr	r25
    1686:	87 95       	ror	r24
    1688:	2a 95       	dec	r18
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <M_Dio_PinRead+0x78>
    168c:	81 70       	andi	r24, 0x01	; 1
    168e:	08 95       	ret
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	08 95       	ret

00001694 <M_EXTI_PINMODE>:
    1694:	62 e0       	ldi	r22, 0x02	; 2
    1696:	8a e2       	ldi	r24, 0x2A	; 42
    1698:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <M_Dio_PinMode>
    169c:	62 e0       	ldi	r22, 0x02	; 2
    169e:	8b e2       	ldi	r24, 0x2B	; 43
    16a0:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <M_Dio_PinMode>
    16a4:	61 e0       	ldi	r22, 0x01	; 1
    16a6:	8a e2       	ldi	r24, 0x2A	; 42
    16a8:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <M_Dio_PinPullRes>
    16ac:	61 e0       	ldi	r22, 0x01	; 1
    16ae:	8a e2       	ldi	r24, 0x2A	; 42
    16b0:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <M_Dio_PinPullRes>
    16b4:	08 95       	ret

000016b6 <M_EXTI_Init>:
    16b6:	0e 94 4a 0b 	call	0x1694	; 0x1694 <M_EXTI_PINMODE>
    16ba:	85 b7       	in	r24, 0x35	; 53
    16bc:	8e 7f       	andi	r24, 0xFE	; 254
    16be:	85 bf       	out	0x35, r24	; 53
    16c0:	85 b7       	in	r24, 0x35	; 53
    16c2:	82 60       	ori	r24, 0x02	; 2
    16c4:	85 bf       	out	0x35, r24	; 53
    16c6:	85 b7       	in	r24, 0x35	; 53
    16c8:	84 60       	ori	r24, 0x04	; 4
    16ca:	85 bf       	out	0x35, r24	; 53
    16cc:	85 b7       	in	r24, 0x35	; 53
    16ce:	87 7f       	andi	r24, 0xF7	; 247
    16d0:	85 bf       	out	0x35, r24	; 53
    16d2:	84 b7       	in	r24, 0x34	; 52
    16d4:	87 7f       	andi	r24, 0xF7	; 247
    16d6:	84 bf       	out	0x34, r24	; 52
    16d8:	8b b7       	in	r24, 0x3b	; 59
    16da:	80 64       	ori	r24, 0x40	; 64
    16dc:	8b bf       	out	0x3b, r24	; 59
    16de:	8b b7       	in	r24, 0x3b	; 59
    16e0:	8f 77       	andi	r24, 0x7F	; 127
    16e2:	8b bf       	out	0x3b, r24	; 59
    16e4:	8b b7       	in	r24, 0x3b	; 59
    16e6:	8f 7d       	andi	r24, 0xDF	; 223
    16e8:	8b bf       	out	0x3b, r24	; 59
    16ea:	08 95       	ret

000016ec <M_EXTI_CallBack>:
    16ec:	61 15       	cp	r22, r1
    16ee:	71 05       	cpc	r23, r1
    16f0:	51 f0       	breq	.+20     	; 0x1706 <M_EXTI_CallBack+0x1a>
    16f2:	83 30       	cpi	r24, 0x03	; 3
    16f4:	40 f4       	brcc	.+16     	; 0x1706 <M_EXTI_CallBack+0x1a>
    16f6:	e8 2f       	mov	r30, r24
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	ee 0f       	add	r30, r30
    16fc:	ff 1f       	adc	r31, r31
    16fe:	e5 5e       	subi	r30, 0xE5	; 229
    1700:	fc 4f       	sbci	r31, 0xFC	; 252
    1702:	71 83       	std	Z+1, r23	; 0x01
    1704:	60 83       	st	Z, r22
    1706:	08 95       	ret

00001708 <__vector_1>:
    1708:	1f 92       	push	r1
    170a:	0f 92       	push	r0
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	0f 92       	push	r0
    1710:	11 24       	eor	r1, r1
    1712:	2f 93       	push	r18
    1714:	3f 93       	push	r19
    1716:	4f 93       	push	r20
    1718:	5f 93       	push	r21
    171a:	6f 93       	push	r22
    171c:	7f 93       	push	r23
    171e:	8f 93       	push	r24
    1720:	9f 93       	push	r25
    1722:	af 93       	push	r26
    1724:	bf 93       	push	r27
    1726:	ef 93       	push	r30
    1728:	ff 93       	push	r31
    172a:	e0 91 1b 03 	lds	r30, 0x031B	; 0x80031b <CallBackFunc>
    172e:	f0 91 1c 03 	lds	r31, 0x031C	; 0x80031c <CallBackFunc+0x1>
    1732:	30 97       	sbiw	r30, 0x00	; 0
    1734:	09 f0       	breq	.+2      	; 0x1738 <__vector_1+0x30>
    1736:	09 95       	icall
    1738:	ff 91       	pop	r31
    173a:	ef 91       	pop	r30
    173c:	bf 91       	pop	r27
    173e:	af 91       	pop	r26
    1740:	9f 91       	pop	r25
    1742:	8f 91       	pop	r24
    1744:	7f 91       	pop	r23
    1746:	6f 91       	pop	r22
    1748:	5f 91       	pop	r21
    174a:	4f 91       	pop	r20
    174c:	3f 91       	pop	r19
    174e:	2f 91       	pop	r18
    1750:	0f 90       	pop	r0
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	0f 90       	pop	r0
    1756:	1f 90       	pop	r1
    1758:	18 95       	reti

0000175a <__vector_2>:
    175a:	1f 92       	push	r1
    175c:	0f 92       	push	r0
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	0f 92       	push	r0
    1762:	11 24       	eor	r1, r1
    1764:	2f 93       	push	r18
    1766:	3f 93       	push	r19
    1768:	4f 93       	push	r20
    176a:	5f 93       	push	r21
    176c:	6f 93       	push	r22
    176e:	7f 93       	push	r23
    1770:	8f 93       	push	r24
    1772:	9f 93       	push	r25
    1774:	af 93       	push	r26
    1776:	bf 93       	push	r27
    1778:	ef 93       	push	r30
    177a:	ff 93       	push	r31
    177c:	e0 91 1d 03 	lds	r30, 0x031D	; 0x80031d <CallBackFunc+0x2>
    1780:	f0 91 1e 03 	lds	r31, 0x031E	; 0x80031e <CallBackFunc+0x3>
    1784:	30 97       	sbiw	r30, 0x00	; 0
    1786:	09 f0       	breq	.+2      	; 0x178a <__vector_2+0x30>
    1788:	09 95       	icall
    178a:	ff 91       	pop	r31
    178c:	ef 91       	pop	r30
    178e:	bf 91       	pop	r27
    1790:	af 91       	pop	r26
    1792:	9f 91       	pop	r25
    1794:	8f 91       	pop	r24
    1796:	7f 91       	pop	r23
    1798:	6f 91       	pop	r22
    179a:	5f 91       	pop	r21
    179c:	4f 91       	pop	r20
    179e:	3f 91       	pop	r19
    17a0:	2f 91       	pop	r18
    17a2:	0f 90       	pop	r0
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	0f 90       	pop	r0
    17a8:	1f 90       	pop	r1
    17aa:	18 95       	reti

000017ac <__vector_3>:
    17ac:	1f 92       	push	r1
    17ae:	0f 92       	push	r0
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	0f 92       	push	r0
    17b4:	11 24       	eor	r1, r1
    17b6:	2f 93       	push	r18
    17b8:	3f 93       	push	r19
    17ba:	4f 93       	push	r20
    17bc:	5f 93       	push	r21
    17be:	6f 93       	push	r22
    17c0:	7f 93       	push	r23
    17c2:	8f 93       	push	r24
    17c4:	9f 93       	push	r25
    17c6:	af 93       	push	r26
    17c8:	bf 93       	push	r27
    17ca:	ef 93       	push	r30
    17cc:	ff 93       	push	r31
    17ce:	e0 91 1f 03 	lds	r30, 0x031F	; 0x80031f <CallBackFunc+0x4>
    17d2:	f0 91 20 03 	lds	r31, 0x0320	; 0x800320 <CallBackFunc+0x5>
    17d6:	30 97       	sbiw	r30, 0x00	; 0
    17d8:	09 f0       	breq	.+2      	; 0x17dc <__vector_3+0x30>
    17da:	09 95       	icall
    17dc:	ff 91       	pop	r31
    17de:	ef 91       	pop	r30
    17e0:	bf 91       	pop	r27
    17e2:	af 91       	pop	r26
    17e4:	9f 91       	pop	r25
    17e6:	8f 91       	pop	r24
    17e8:	7f 91       	pop	r23
    17ea:	6f 91       	pop	r22
    17ec:	5f 91       	pop	r21
    17ee:	4f 91       	pop	r20
    17f0:	3f 91       	pop	r19
    17f2:	2f 91       	pop	r18
    17f4:	0f 90       	pop	r0
    17f6:	0f be       	out	0x3f, r0	; 63
    17f8:	0f 90       	pop	r0
    17fa:	1f 90       	pop	r1
    17fc:	18 95       	reti

000017fe <M_GIE_EnableGlobal>:
    17fe:	78 94       	sei
    1800:	08 95       	ret

00001802 <TIMER0_Init>:
    1802:	83 b7       	in	r24, 0x33	; 51
    1804:	80 64       	ori	r24, 0x40	; 64
    1806:	83 bf       	out	0x33, r24	; 51
    1808:	83 b7       	in	r24, 0x33	; 51
    180a:	88 60       	ori	r24, 0x08	; 8
    180c:	83 bf       	out	0x33, r24	; 51
    180e:	80 e7       	ldi	r24, 0x70	; 112
    1810:	82 bf       	out	0x32, r24	; 50
    1812:	83 b7       	in	r24, 0x33	; 51
    1814:	88 7f       	andi	r24, 0xF8	; 248
    1816:	83 bf       	out	0x33, r24	; 51
    1818:	83 b7       	in	r24, 0x33	; 51
    181a:	83 60       	ori	r24, 0x03	; 3
    181c:	83 bf       	out	0x33, r24	; 51
    181e:	83 b7       	in	r24, 0x33	; 51
    1820:	8f 7e       	andi	r24, 0xEF	; 239
    1822:	83 bf       	out	0x33, r24	; 51
    1824:	83 b7       	in	r24, 0x33	; 51
    1826:	80 62       	ori	r24, 0x20	; 32
    1828:	83 bf       	out	0x33, r24	; 51
    182a:	08 95       	ret

0000182c <TIMER0_SetCompVal>:
    182c:	8c bf       	out	0x3c, r24	; 60
    182e:	08 95       	ret

00001830 <__vector_11>:
    1830:	1f 92       	push	r1
    1832:	0f 92       	push	r0
    1834:	0f b6       	in	r0, 0x3f	; 63
    1836:	0f 92       	push	r0
    1838:	11 24       	eor	r1, r1
    183a:	2f 93       	push	r18
    183c:	3f 93       	push	r19
    183e:	4f 93       	push	r20
    1840:	5f 93       	push	r21
    1842:	6f 93       	push	r22
    1844:	7f 93       	push	r23
    1846:	8f 93       	push	r24
    1848:	9f 93       	push	r25
    184a:	af 93       	push	r26
    184c:	bf 93       	push	r27
    184e:	ef 93       	push	r30
    1850:	ff 93       	push	r31
    1852:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <counter.1616>
    1856:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <counter.1616+0x1>
    185a:	01 96       	adiw	r24, 0x01	; 1
    185c:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <counter.1616+0x1>
    1860:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <counter.1616>
    1864:	81 3d       	cpi	r24, 0xD1	; 209
    1866:	93 40       	sbci	r25, 0x03	; 3
    1868:	69 f4       	brne	.+26     	; 0x1884 <__vector_11+0x54>
    186a:	80 e7       	ldi	r24, 0x70	; 112
    186c:	82 bf       	out	0x32, r24	; 50
    186e:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <counter.1616+0x1>
    1872:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <counter.1616>
    1876:	e0 91 25 03 	lds	r30, 0x0325	; 0x800325 <TIMER0_OVFCallBackFunc>
    187a:	f0 91 26 03 	lds	r31, 0x0326	; 0x800326 <TIMER0_OVFCallBackFunc+0x1>
    187e:	30 97       	sbiw	r30, 0x00	; 0
    1880:	09 f0       	breq	.+2      	; 0x1884 <__vector_11+0x54>
    1882:	09 95       	icall
    1884:	ff 91       	pop	r31
    1886:	ef 91       	pop	r30
    1888:	bf 91       	pop	r27
    188a:	af 91       	pop	r26
    188c:	9f 91       	pop	r25
    188e:	8f 91       	pop	r24
    1890:	7f 91       	pop	r23
    1892:	6f 91       	pop	r22
    1894:	5f 91       	pop	r21
    1896:	4f 91       	pop	r20
    1898:	3f 91       	pop	r19
    189a:	2f 91       	pop	r18
    189c:	0f 90       	pop	r0
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	0f 90       	pop	r0
    18a2:	1f 90       	pop	r1
    18a4:	18 95       	reti

000018a6 <TIMER1_Init>:
    18a6:	8f b5       	in	r24, 0x2f	; 47
    18a8:	8e 7f       	andi	r24, 0xFE	; 254
    18aa:	8f bd       	out	0x2f, r24	; 47
    18ac:	8f b5       	in	r24, 0x2f	; 47
    18ae:	8d 7f       	andi	r24, 0xFD	; 253
    18b0:	8f bd       	out	0x2f, r24	; 47
    18b2:	8e b5       	in	r24, 0x2e	; 46
    18b4:	87 7f       	andi	r24, 0xF7	; 247
    18b6:	8e bd       	out	0x2e, r24	; 46
    18b8:	8e b5       	in	r24, 0x2e	; 46
    18ba:	8f 7e       	andi	r24, 0xEF	; 239
    18bc:	8e bd       	out	0x2e, r24	; 46
    18be:	8e b5       	in	r24, 0x2e	; 46
    18c0:	81 60       	ori	r24, 0x01	; 1
    18c2:	8e bd       	out	0x2e, r24	; 46
    18c4:	8e b5       	in	r24, 0x2e	; 46
    18c6:	8d 7f       	andi	r24, 0xFD	; 253
    18c8:	8e bd       	out	0x2e, r24	; 46
    18ca:	8e b5       	in	r24, 0x2e	; 46
    18cc:	84 60       	ori	r24, 0x04	; 4
    18ce:	8e bd       	out	0x2e, r24	; 46
    18d0:	89 b7       	in	r24, 0x39	; 57
    18d2:	84 60       	ori	r24, 0x04	; 4
    18d4:	89 bf       	out	0x39, r24	; 57
    18d6:	08 95       	ret

000018d8 <M_Timer1_CallBackFn>:
    18d8:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <TIMER1_OVFCallBackFunc+0x1>
    18dc:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <TIMER1_OVFCallBackFunc>
    18e0:	08 95       	ret

000018e2 <__vector_9>:
    18e2:	1f 92       	push	r1
    18e4:	0f 92       	push	r0
    18e6:	0f b6       	in	r0, 0x3f	; 63
    18e8:	0f 92       	push	r0
    18ea:	11 24       	eor	r1, r1
    18ec:	2f 93       	push	r18
    18ee:	3f 93       	push	r19
    18f0:	4f 93       	push	r20
    18f2:	5f 93       	push	r21
    18f4:	6f 93       	push	r22
    18f6:	7f 93       	push	r23
    18f8:	8f 93       	push	r24
    18fa:	9f 93       	push	r25
    18fc:	af 93       	push	r26
    18fe:	bf 93       	push	r27
    1900:	ef 93       	push	r30
    1902:	ff 93       	push	r31
    1904:	e0 91 23 03 	lds	r30, 0x0323	; 0x800323 <TIMER1_OVFCallBackFunc>
    1908:	f0 91 24 03 	lds	r31, 0x0324	; 0x800324 <TIMER1_OVFCallBackFunc+0x1>
    190c:	30 97       	sbiw	r30, 0x00	; 0
    190e:	09 f0       	breq	.+2      	; 0x1912 <__vector_9+0x30>
    1910:	09 95       	icall
    1912:	ff 91       	pop	r31
    1914:	ef 91       	pop	r30
    1916:	bf 91       	pop	r27
    1918:	af 91       	pop	r26
    191a:	9f 91       	pop	r25
    191c:	8f 91       	pop	r24
    191e:	7f 91       	pop	r23
    1920:	6f 91       	pop	r22
    1922:	5f 91       	pop	r21
    1924:	4f 91       	pop	r20
    1926:	3f 91       	pop	r19
    1928:	2f 91       	pop	r18
    192a:	0f 90       	pop	r0
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	0f 90       	pop	r0
    1930:	1f 90       	pop	r1
    1932:	18 95       	reti

00001934 <UART_Init>:
    1934:	81 b3       	in	r24, 0x11	; 17
    1936:	8e 7f       	andi	r24, 0xFE	; 254
    1938:	81 bb       	out	0x11, r24	; 17
    193a:	81 b3       	in	r24, 0x11	; 17
    193c:	82 60       	ori	r24, 0x02	; 2
    193e:	81 bb       	out	0x11, r24	; 17
    1940:	87 e6       	ldi	r24, 0x67	; 103
    1942:	89 b9       	out	0x09, r24	; 9
    1944:	10 bc       	out	0x20, r1	; 32
    1946:	86 e8       	ldi	r24, 0x86	; 134
    1948:	80 bd       	out	0x20, r24	; 32
    194a:	8a b1       	in	r24, 0x0a	; 10
    194c:	80 61       	ori	r24, 0x10	; 16
    194e:	8a b9       	out	0x0a, r24	; 10
    1950:	8a b1       	in	r24, 0x0a	; 10
    1952:	88 60       	ori	r24, 0x08	; 8
    1954:	8a b9       	out	0x0a, r24	; 10
    1956:	08 95       	ret

00001958 <UART_Tx>:
    1958:	8c b9       	out	0x0c, r24	; 12
    195a:	5e 9b       	sbis	0x0b, 6	; 11
    195c:	fe cf       	rjmp	.-4      	; 0x195a <UART_Tx+0x2>
    195e:	08 95       	ret

00001960 <UART_Rx>:
    1960:	04 c0       	rjmp	.+8      	; 0x196a <UART_Rx+0xa>
    1962:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <Local_u8_Variable13>
    1966:	81 11       	cpse	r24, r1
    1968:	02 c0       	rjmp	.+4      	; 0x196e <UART_Rx+0xe>
    196a:	5f 9b       	sbis	0x0b, 7	; 11
    196c:	fa cf       	rjmp	.-12     	; 0x1962 <UART_Rx+0x2>
    196e:	8c b1       	in	r24, 0x0c	; 12
    1970:	08 95       	ret

00001972 <UART_TxString>:
    1972:	0f 93       	push	r16
    1974:	1f 93       	push	r17
    1976:	cf 93       	push	r28
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	59 f4       	brne	.+22     	; 0x1992 <UART_TxString+0x20>
    197c:	12 c0       	rjmp	.+36     	; 0x19a2 <UART_TxString+0x30>
    197e:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_Tx>
    1982:	cf 5f       	subi	r28, 0xFF	; 255
    1984:	8f e3       	ldi	r24, 0x3F	; 63
    1986:	9c e9       	ldi	r25, 0x9C	; 156
    1988:	01 97       	sbiw	r24, 0x01	; 1
    198a:	f1 f7       	brne	.-4      	; 0x1988 <UART_TxString+0x16>
    198c:	00 c0       	rjmp	.+0      	; 0x198e <UART_TxString+0x1c>
    198e:	00 00       	nop
    1990:	02 c0       	rjmp	.+4      	; 0x1996 <UART_TxString+0x24>
    1992:	8c 01       	movw	r16, r24
    1994:	c0 e0       	ldi	r28, 0x00	; 0
    1996:	f8 01       	movw	r30, r16
    1998:	ec 0f       	add	r30, r28
    199a:	f1 1d       	adc	r31, r1
    199c:	80 81       	ld	r24, Z
    199e:	81 11       	cpse	r24, r1
    19a0:	ee cf       	rjmp	.-36     	; 0x197e <UART_TxString+0xc>
    19a2:	cf 91       	pop	r28
    19a4:	1f 91       	pop	r17
    19a6:	0f 91       	pop	r16
    19a8:	08 95       	ret

000019aa <__tablejump2__>:
    19aa:	ee 0f       	add	r30, r30
    19ac:	ff 1f       	adc	r31, r31
    19ae:	05 90       	lpm	r0, Z+
    19b0:	f4 91       	lpm	r31, Z
    19b2:	e0 2d       	mov	r30, r0
    19b4:	09 94       	ijmp

000019b6 <__umulhisi3>:
    19b6:	a2 9f       	mul	r26, r18
    19b8:	b0 01       	movw	r22, r0
    19ba:	b3 9f       	mul	r27, r19
    19bc:	c0 01       	movw	r24, r0
    19be:	a3 9f       	mul	r26, r19
    19c0:	70 0d       	add	r23, r0
    19c2:	81 1d       	adc	r24, r1
    19c4:	11 24       	eor	r1, r1
    19c6:	91 1d       	adc	r25, r1
    19c8:	b2 9f       	mul	r27, r18
    19ca:	70 0d       	add	r23, r0
    19cc:	81 1d       	adc	r24, r1
    19ce:	11 24       	eor	r1, r1
    19d0:	91 1d       	adc	r25, r1
    19d2:	08 95       	ret

000019d4 <_exit>:
    19d4:	f8 94       	cli

000019d6 <__stop_program>:
    19d6:	ff cf       	rjmp	.-2      	; 0x19d6 <__stop_program>
